# syntax=docker/dockerfile:1.4

###########################
# The golang build container
FROM golang:1.22-bullseye as cosmos-go

WORKDIR /usr/src/agoric-sdk/golang/cosmos
COPY golang/cosmos/go.mod golang/cosmos/go.sum ./
RUN go mod download

COPY golang/cosmos ./

# Optional, set in workflow push the SDK image but not in builds for test
ARG GIT_COMMIT
ARG GIT_REVISION
ENV GOCACHE=/root/.cache/go-build
RUN --mount=type=cache,target=$GOCACHE make GIT_COMMIT="$GIT_COMMIT" GIT_REVISION="$GIT_REVISION" MOD_READONLY= compile-go

###############################
# OTEL fetch
# from https://github.com/open-telemetry/opentelemetry-collector-releases/releases

FROM node:18-bullseye AS otel

ARG OTEL_VERSION=0.48.0
ARG OTEL_HASH_arm64=846852f4c34f6e494abe202402fdf1d17e2ec3c7a7f96985b6011126ae553249
ARG OTEL_HASH_amd64=7c6923ecbc045e6d8825479d836d3e8b8a2b3c20185e9dda531b3aa2b973459c

RUN set -eux; \
  pkgArch="$(dpkg --print-architecture)"; \
  eval "otelHash=\$OTEL_HASH_${pkgArch}"; \
  wget -O otel.tgz "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${OTEL_VERSION}/otelcol-contrib_${OTEL_VERSION}_linux_${pkgArch}.tar.gz"; \
  echo "${otelHash} otel.tgz" | sha256sum -c -; \
  tar -C / -xzf otel.tgz

###############################
# @agoric/cosmos package
FROM node:18-bullseye AS cosmos-package
ENV YARN_CACHE_FOLDER=/root/.yarn

WORKDIR /usr/src/agoric-sdk/golang/cosmos
COPY --from=cosmos-go --link /usr/src/agoric-sdk/golang/cosmos .
COPY --link scripts /usr/src/agoric-sdk/scripts

RUN corepack enable
RUN echo unknown > git-revision.txt

# XXX until https://github.com/Agoric/agoric-sdk/issues/9043, then just:
# RUN yarn install --frozen-lockfile
RUN bash -c \
  "for i in {1..3}; do yarn install --frozen-lockfile --network-timeout 1000000 && exit 0 || (echo retrying; sleep 15;) done; exit 1"
RUN yarn build:gyp

# Remove dev dependencies.
WORKDIR /usr/src/agoric-sdk/
RUN mkdir golang/tmp && \
  mv golang/cosmos/package.json golang/cosmos/build golang/cosmos/index.cjs golang/tmp/ && \
  rm -rf golang/cosmos && mv golang/tmp golang/cosmos

###############################
# @agoric/xsnap package
FROM node:18-bullseye AS xsnap-package
ENV YARN_CACHE_FOLDER=/root/.yarn

# When changing/adding entries here, make sure to search the whole project for
# `@@AGORIC_DOCKER_SUBMODULES@@`
ARG MODDABLE_COMMIT_HASH
ARG MODDABLE_URL
ARG XSNAP_NATIVE_COMMIT_HASH
ARG XSNAP_NATIVE_URL

WORKDIR /usr/src/agoric-sdk
COPY --link packages/xsnap packages/xsnap
COPY --link scripts scripts

WORKDIR /usr/src/agoric-sdk/packages/xsnap
# Check out the specified submodule versions.
# When changing/adding entries here, make sure to search the whole project for
# `@@AGORIC_DOCKER_SUBMODULES@@`
RUN \
  MODDABLE_COMMIT_HASH="$MODDABLE_COMMIT_HASH" \
  MODDABLE_URL="$MODDABLE_URL" \
  XSNAP_NATIVE_COMMIT_HASH="$XSNAP_NATIVE_COMMIT_HASH" \
  XSNAP_NATIVE_URL="$XSNAP_NATIVE_URL" \
  yarn build

# Remove dev dependencies.
WORKDIR /usr/src/agoric-sdk
RUN rm -rf packages/xsnap/moddable packages/xsnap/xsnap-native/build/tmp

###############################
# The js build container
FROM node:18-bullseye AS build-js
ENV YARN_CACHE_FOLDER=/root/.yarn

WORKDIR /usr/src/agoric-sdk

# Minimal to build SDK (exclude docs, a3p-integration, etc)
COPY --link lerna.json package.json repoconfig.sh tsconfig.json yarn.lock ./
COPY --link bin bin
COPY --link packages packages
COPY --link patches patches
COPY --link scripts scripts
COPY --from=cosmos-package --link /usr/src/agoric-sdk/golang golang
COPY --from=xsnap-package --link /usr/src/agoric-sdk/packages/xsnap packages/xsnap

# XXX until https://github.com/Agoric/agoric-sdk/issues/9043, then just:
# RUN --mount=type=cache,target=$YARN_CACHE_FOLDER yarn install --frozen-lockfile
RUN --mount=type=cache,target=$YARN_CACHE_FOLDER bash -c \
  "for i in {1..3}; do yarn install --frozen-lockfile --network-timeout 1000000 && exit 0 || (echo retrying; sleep 15;) done; exit 1"

# build everything except xsnap, built above. 'cosmos' was also built above but
# it's safe to include here because its package "build" script is "exit 0".
RUN yarn lerna run --ignore "@agoric/xsnap" build

###############################
# The install container.
FROM node:18-bullseye AS install

# Install some conveniences.
RUN apt-get --allow-releaseinfo-change update && apt-get install -y vim jq less && apt-get clean -y

WORKDIR /usr/src
COPY --from=build-js --link /usr/src/agoric-sdk agoric-sdk
COPY --from=otel --link /otelcol-contrib /usr/local/bin/
# use the naked binary of agd instead of the wrapper script that rebuilds sometimes
RUN ln -s /usr/src/agoric-sdk/golang/cosmos/build/agd /usr/local/bin/
RUN ln -s /usr/src/agoric-sdk/packages/cosmic-swingset/bin/ag-chain-cosmos /usr/local/bin/
RUN ln -s /usr/src/agoric-sdk/packages/solo/bin/ag-solo /usr/local/bin/
RUN ln -s /usr/src/agoric-sdk/packages/agoric-cli/bin/agoric /usr/local/bin/
COPY --link . lib/ag-solo/

ARG GIT_REVISION=unknown
RUN echo "$GIT_REVISION" > /usr/src/agoric-sdk/packages/solo/public/git-revision.txt

# Compatibility links for older containers.
RUN ln -sf /data /agoric
RUN ln -sf /data/solo /usr/src/agoric-sdk/packages/cosmic-swingset/solo
RUN ln -sf /data/chains /usr/src/agoric-sdk/packages/cosmic-swingset/chains

COPY --link scripts agoric-sdk/scripts
RUN /usr/src/agoric-sdk/scripts/smoketest-binaries.sh

# By default, run the daemon with specified arguments.
WORKDIR /root
EXPOSE 1317 9090 26657
ENTRYPOINT [ "/usr/src/agoric-sdk/packages/cosmic-swingset/scripts/chain-entry.sh" ]
