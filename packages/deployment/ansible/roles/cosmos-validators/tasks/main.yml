- name: 'Check {{ STAKER }}-* exists'
  become: yes
  become_user: '{{ service }}'
  shell: 'agd keys show --keyring-backend=test -a {{ STAKER }}-{{ inventory_hostname }}'
  ignore_errors: true
  register: staker_exists

- name: 'Create {{ STAKER }}-*'
  become_user: '{{ service }}'
  become: true
  shell: 'agd keys add --keyring-backend=test {{ staker }}'
  vars:
    staker: '{{ STAKER }}-{{ inventory_hostname }}'
  when: inventory_hostname != STAKER_NODE and staker_exists.rc != 0

- name: 'Check {{ STAKER }}-* exists'
  become: yes
  become_user: '{{ service }}'
  shell: 'agd keys show --keyring-backend=test -a {{ STAKER }}-{{ inventory_hostname }}'
  register: staker_address

- name: 'Transfer {{ STAKER_INIT_COINS }} to {{ STAKER }}-*'
  delegate_to: localhost
  shell: "\
    agd --home={{ SETUP_HOME + '/../faucet' }} \
    tx bank send faucet {{ staker_address.stdout }} {{ STAKER_INIT_COINS }} \
    --node=tcp://{{ hostvars[STAKER_NODE]['ansible_host'] }}:26657 --keyring-backend=test --chain-id={{ CHAIN_NAME }} \
    --broadcast-mode=block --yes"
  vars:
    staker: '{{ STAKER }}-{{ inventory_hostname }}'
  when: inventory_hostname != STAKER_NODE

- name: 'Find staking_denom from {{ STAKER_SELF_DELEGATION }}'
  set_fact:
    staking_denom: "{{ STAKER_SELF_DELEGATION | regex_search('^[0-9]*(.*)', '\\1') | first }}"

- name: 'Specially set JSON valconspub'
  set_fact:
    valconspub: "{{ lookup('file', data + '/' + inventory_hostname + '/pubkey') | string }}"

- name: 'Wait for transfer of {{ staking_denom }} to arrive at {{ inventory_hostname }}'
  shell: "\
    agd query bank balances {{ staker_address.stdout }}"
  register: staker_balance
  until: staker_balance.stdout.find(staking_denom) != -1
  delay: 10
  retries: 20 # 200 seconds === 3m20s

- name: 'Create validator JSON config for {{ STAKER }}-*'
  become_user: '{{ service }}'
  become: true
  copy:
    content: |
      {
        "pubkey": {{ valconspub }},
        "amount": "{{ STAKER_SELF_DELEGATION }}",
        "moniker": "{{ moniker | default(inventory_hostname) }}",
        "identity": "{{ identity | default('') }}",
        "website": "{{ website | default('') }}",
        "security": "{{ security_contact | default('') }}",
        "details": "{{ details | default('') }}",
        "commission-rate": "0.100000000000000000",
        "commission-max-rate": "0.200000000000000000",
        "commission-max-change-rate": "0.010000000000000000",
        "min-self-delegation": "1"
      }
    dest: "/tmp/validator-{{ inventory_hostname }}.json"
  vars:
    staker: '{{ STAKER }}-{{ inventory_hostname }}'
  when: inventory_hostname != STAKER_NODE

- name: 'Create validators for {{ STAKER }}-*'
  become_user: '{{ service }}'
  become: true
  shell: "\
    agd tx staking create-validator /tmp/validator-{{ inventory_hostname }}.json \
    --from={{ staker }} \
    --chain-id={{ CHAIN_NAME }} \
    --keyring-backend=test \
    --broadcast-mode=block \
    --yes"
  vars:
    staker: '{{ STAKER }}-{{ inventory_hostname }}'
  when: inventory_hostname != STAKER_NODE

- name: 'Clean up validator JSON config'
  become_user: '{{ service }}'
  become: true
  file:
    path: "/tmp/validator-{{ inventory_hostname }}.json"
    state: absent
  when: inventory_hostname != STAKER_NODE
