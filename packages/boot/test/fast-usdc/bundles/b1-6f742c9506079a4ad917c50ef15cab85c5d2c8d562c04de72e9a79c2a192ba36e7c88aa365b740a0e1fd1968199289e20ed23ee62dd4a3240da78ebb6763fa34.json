{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "6f742c9506079a4ad917c50ef15cab85c5d2c8d562c04de72e9a79c2a192ba36e7c88aa365b740a0e1fd1968199289e20ed23ee62dd4a3240da78ebb6763fa34"
}