#!/usr/bin/env -S node --import ts-blank-space/register

/**
 * @file
 *
 * Fetch canonical chain info for Agoric Devnet.
 *
 * Note: queries Cosmos Testnets, as these are typically long-lived networks.
 *
 */
import { ChainRegistryClient } from '@chain-registry/client';
import fsp from 'node:fs/promises';
import prettier from 'prettier';
import { convertChainInfo } from '../src/utils/registry.js';

// XXX script assumes it's run from the package path
// XXX .json would be more apt; UNTIL https://github.com/endojs/endo/issues/2110
const outputFile = 'src/fetched-chain-info.devnet.js';

/**
 * Names for which to fetch info
 */
export const chainNames = [
  // 'agoric',
  'axelar',
  'neutron',
  'noble',
  'osmosis',
  'stride',
].map(x => `${x}testnet`);

const client = new ChainRegistryClient({
  chainNames,
  /** use _testsnets_, not _devnets_ as these are typically the long-lived networks */
  baseUrl:
    'https://raw.githubusercontent.com/cosmos/chain-registry/master/testnets',
});

// chain info, assets and ibc data will be downloaded dynamically by invoking fetchUrls method
await client.fetchUrls();

const chainInfo = await convertChainInfo(client);

const withEnvAgnosticChainNames = Object.entries(chainInfo).reduce(
  (acc, [chainName, chain]) => {
    const networkAgnosticName = chainName.replace('testnet', '');
    acc[networkAgnosticName] = chain;
    return acc;
  },
  {},
);

const record = JSON.stringify(withEnvAgnosticChainNames, null, 2);
const src = `/** @file Generated by fetch-devnet-chain-info.ts */\nexport default /** @type {const} } */ (${record});`;
const prettySrc = await prettier.format(src, {
  parser: 'babel', // 'typescript' fails to preserve parens for typecast
  singleQuote: true,
  trailingComma: 'all',
});
await fsp.writeFile(outputFile, prettySrc);
