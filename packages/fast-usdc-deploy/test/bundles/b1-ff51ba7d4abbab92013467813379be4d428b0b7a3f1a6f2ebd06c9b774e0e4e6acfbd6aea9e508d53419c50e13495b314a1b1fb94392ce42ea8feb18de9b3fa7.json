{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "ff51ba7d4abbab92013467813379be4d428b0b7a3f1a6f2ebd06c9b774e0e4e6acfbd6aea9e508d53419c50e13495b314a1b1fb94392ce42ea8feb18de9b3fa7"
}