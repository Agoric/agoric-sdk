#!/usr/bin/env node
/* eslint-env node */
const { exec, execSync, spawnSync } = require('node:child_process');
const path = require('node:path');
const assert = require('node:assert/strict');
const process = require('node:process');
const telescope = require('@cosmology/telescope').default;
const rimraf = require('rimraf').rimrafSync;

const protoDirs = [path.join(__dirname, '/../../cosmic-proto/proto')];
const outPath = path.join(__dirname, '../src/codegen');
rimraf(outPath);

/**
 * Make the JsonSafe type import compatible with TS verbatimImportSyntax
 *
 * @param {string} directory
 * @param {boolean} gnuSed
 */
function fixTypeImport(directory, gnuSed) {
  const fullPath = path.resolve(directory);
  const command = `
    find ${fullPath} -type f -exec ${gnuSed ? 'sed -i' : 'sed -i ""'} \
    -e 's/import { JsonSafe/import {type JsonSafe/g' \
    -e 's/import { Rpc/import {type Rpc/g' \
    -e 's/ HttpEndpoint }/ type HttpEndpoint }/g' \
    -e 's/\\([{,]\\) \\([[:alnum:]_]*SDKType\\)/\\1 type \\2/g' {} +
  `;

  exec(command, (error, stdout, stderr) => {
    if (error) {
      console.error(`Error during replacement: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`Standard error: ${stderr}`);
    }
  });
}

// XXX copied from cosmic-proto's codegen
telescope({
  protoDirs,
  outPath,
  options: {
    // for ESM compatibility
    restoreImportExtension: '.js',
    tsDisable: {
      // FIXME types aren't resolving correctly
      disableAll: true,
      files: [
        'cosmos/authz/v1beta1/tx.amino.ts',
        'cosmos/staking/v1beta1/tx.amino.ts',
      ],
      patterns: ['**/*amino.ts', '**/*registry.ts'],
    },
    interfaces: {
      enabled: false,
      useUnionTypes: false,
    },
    prototypes: {
      includePackageVar: false,
      excluded: {
        packages: [
          'ibc.applications.fee.v1', // issue with parsing protos (LCD routes with nested objects in params)

          'cosmos.app.v1alpha1',
          'cosmos.app.v1beta1',
          'cosmos.base.kv.v1beta1',
          'cosmos.base.reflection.v1beta1',
          'cosmos.base.snapshots.v1beta1',
          'cosmos.base.store.v1beta1',
          'cosmos.base.tendermint.v1beta1',
          'cosmos.crisis.v1beta1',
          'cosmos.evidence.v1beta1',
          'cosmos.genutil.v1beta1',

          'cosmos.autocli.v1',

          'cosmos.msg.v1',
          'cosmos.nft.v1beta1',
          'cosmos.capability.v1beta1',
          'cosmos.orm.v1alpha1',
          'cosmos.orm.v1',
          'cosmos.slashing.v1beta1',
          'google.api',
          'ibc.core.port.v1',
          'ibc.core.types.v1',
        ],
      },
      methods: {
        fromJSON: true,
        toJSON: true,
        encode: true,
        decode: true,
        fromPartial: true,
        toAmino: false,
        fromAmino: false,
        fromProto: true,
        toProto: true,
      },
      parser: {
        keepCase: false,
      },
      typingsFormat: {
        useDeepPartial: false,
        timestamp: 'timestamp',

        // [Defaults]
        // timestamp: 'date',
        // duration: 'duration',
        // num64: 'bigint',
        // useExact: false,
        // customTypes: {
        //   useCosmosSDKDec: true,
        // },
        customTypes: {
          base64Lib: '@endo/base64',
          useEnhancedDecimal: true,
        },
      },
    },
    aminoEncoding: {
      // Necessary for getSigningAgoricClient but that's future work
      // UNTIL https://github.com/Agoric/agoric-sdk/issues/5912
      enabled: false,
    },
    lcdClients: {
      // REST APIs are deprecated?
      enabled: false,
    },
    rpcClients: {
      // Main difference from cosmic-proto
      enabled: true,
    },
    stargateClients: {
      enabled: true,
    },
  },
})
  .then(() => {
    console.log('🔨 code generated by Telescope');

    // for all files under codegen/ replace "import { JsonSafe" with "import type { JsonSafe"
    const gnuSed =
      execSync(`sed --help 2>&1 | sed 2q | grep -qe '-i ' || printf gnu`, {
        encoding: 'utf8',
      }) === 'gnu';
    fixTypeImport('./src/codegen', gnuSed);
    console.log('🔧 type keyword added');

    // top-level to get the root prettier config
    const prettierResult = spawnSync(
      'yarn',
      ['run', '--top-level', 'prettier', '--write', 'src'],
      {
        cwd: path.join(__dirname, '..'),
        stdio: 'inherit',
      },
    );
    assert.equal(prettierResult.status, 0);
    console.log('💅 code formatted by Prettier');

    console.log('ℹ️ `yarn build && yarn test` to test it.');
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
