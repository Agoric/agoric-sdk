syntax = "proto3";
package agoric.swingset;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/Agoric/agoric-sdk/golang/cosmos/x/swingset/types";

// CoreEvalProposal is a gov Content type for evaluating code in the SwingSet
// core.
// See `bridgeCoreEval` in agoric-sdk packages/vats/src/core/chain-behaviors.js.
message CoreEvalProposal {
  option (cosmos_proto.implements_interface) = "cosmos.gov.v1beta1.Content";
  option (amino.name)                        = "swingset/CoreEvalProposal";

  option (gogoproto.goproto_getters) = false;

  string title       = 1;
  string description = 2;

  // Although evals are sequential, they may run concurrently, since they each
  // can return a Promise.
  repeated CoreEval evals = 3 [(gogoproto.nullable) = false];
}

// CoreEval defines an individual SwingSet core evaluation, for use in
// CoreEvalProposal.
message CoreEval {
  // Grant these JSON-stringified core bootstrap permits to the jsCode, as the
  // `powers` endowment.
  string json_permits = 1 [(gogoproto.moretags) = "yaml:\"json_permits\""];

  // Evaluate this JavaScript code in a Compartment endowed with `powers` as
  // well as some powerless helpers.
  string js_code = 2 [(gogoproto.moretags) = "yaml:\"js_code\""];
}

// Params are the swingset configuration/governance parameters.
message Params {
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // Map from unit name to a value in SwingSet "beans".
  // Must not be negative.
  //
  // These values are used by SwingSet to normalize named per-resource charges
  // (maybe rent) in a single Nat usage unit, the "bean".
  //
  // There is no required order to this list of entries, but all the chain
  // nodes must all serialize and deserialize the existing order without
  // permuting it.
  repeated StringBeans beans_per_unit = 1 [(gogoproto.nullable) = false];

  // The price in Coins per the unit named "fee".  This value is used by
  // cosmic-swingset JS code to decide how many tokens to charge.
  //
  // cost = beans_used * fee_unit_price / beans_per_unit["fee"]
  repeated cosmos.base.v1beta1.Coin fee_unit_price = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];

  // The SwingSet bootstrap vat configuration file.  Not usefully modifiable
  // via governance as it is only referenced by the chain's initial
  // construction.
  string bootstrap_vat_config = 3;

  // If the provision submitter doesn't hold a provisionpass, their requested
  // power flags are looked up in this fee menu (first match wins) and the sum
  // is charged.  If any power flag is not found in this menu, the request is
  // rejected.
  repeated PowerFlagFee power_flag_fees = 4 [(gogoproto.nullable) = false];

  // Maximum sizes for queues.
  // These values are used by SwingSet to compute how many messages should be
  // accepted in a block.
  //
  // There is no required order to this list of entries, but all the chain
  // nodes must all serialize and deserialize the existing order without
  // permuting it.
  repeated QueueSize queue_max = 5 [(gogoproto.nullable) = false];

  // Vat cleanup budget values.
  // These values are used by SwingSet to control the pace of removing data
  // associated with a terminated vat as described at
  // https://github.com/Agoric/agoric-sdk/blob/master/packages/SwingSet/docs/run-policy.md#terminated-vat-cleanup
  //
  // There is no required order to this list of entries, but all the chain
  // nodes must all serialize and deserialize the existing order without
  // permuting it.
  repeated UintMapEntry vat_cleanup_budget = 6 [(gogoproto.nullable) = false];

  // The maximum number of blocks that an async installation can use.  -1 is
  // unlimited.
  int64 installation_deadline_blocks = 7 [
    (gogoproto.jsontag)  = "installationDeadlineBlocks",
    (gogoproto.moretags) = "yaml:\"installationDeadlineBlocks\""
  ];

  // The maximum number of seconds that an async installation can use.  -1 is
  // unlimited.
  int64 installation_deadline_seconds = 8 [
    (gogoproto.jsontag)  = "installationDeadlineSeconds",
    (gogoproto.moretags) = "yaml:\"installationDeadlineSeconds\""
  ];
}

// The current state of the module.
message State {
  // The allowed number of items to add to queues, as determined by SwingSet.
  // Transactions which attempt to enqueue more should be rejected.
  repeated QueueSize queue_allowed = 1 [(gogoproto.nullable) = false];

  // Doubly-linked list in order of start block and time.
  uint64 first_chunked_artifact_id = 2
      [(gogoproto.jsontag) = "first_chunked_artifact_id", (gogoproto.moretags) = "yaml:\"first_chunked_artifact_id\""];

  // The last chunked artifact id that has not expired or completed.
  uint64 last_chunked_artifact_id = 3
      [(gogoproto.jsontag) = "lastChunkedArtifactId", (gogoproto.moretags) = "yaml:\"lastChunkedArtifactId\""];
}

// Map element of a string key to a Nat bean count.
message StringBeans {
  option (gogoproto.equal) = true;

  // What the beans are for.
  string key = 1;

  // The actual bean value.
  string beans = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Uint", (gogoproto.nullable) = false];
}

// Map a provisioning power flag to its corresponding fee.
message PowerFlagFee {
  option (gogoproto.equal) = true;

  string   power_flag                   = 1;
  repeated cosmos.base.v1beta1.Coin fee = 2
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", (gogoproto.nullable) = false];
}

// Map element of a string key to a size.
// TODO: Replace with UintMapEntry?
message QueueSize {
  option (gogoproto.equal) = true;

  // What the size is for.
  string key = 1;

  // The actual size value.
  int32 size = 2;
}

// Map element of a string key to an unsigned integer.
// The value uses cosmos-sdk Uint rather than a native Go type to ensure that
// zeroes survive "omitempty" JSON serialization.
message UintMapEntry {
  option (gogoproto.equal) = true;
  string key               = 1;
  string value             = 2 [(gogoproto.customtype) = "cosmossdk.io/math.Uint", (gogoproto.nullable) = false];
}

// Egress is the format for a swingset egress.
message Egress {
  option (gogoproto.equal) = false;

  string nickname = 1 [(gogoproto.jsontag) = "nickname", (gogoproto.moretags) = "yaml:\"nickname\""];
  bytes  peer     = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.jsontag)  = "peer",
    (gogoproto.moretags) = "yaml:\"peer\""
  ];
  // TODO: Remove these power flags as they are deprecated and have no effect.
  repeated string power_flags = 3 [
    (gogoproto.customname) = "PowerFlags",
    (gogoproto.jsontag)    = "powerFlags",
    (gogoproto.moretags)   = "yaml:\"powerFlags\""
  ];
}

// SwingStoreArtifact encodes an artifact of a swing-store export.
// Artifacts may be stored or transmitted in any order. Most handlers do
// maintain the artifact order from their original source as an effect of how
// they handle the artifacts.
message SwingStoreArtifact {
  option (gogoproto.equal) = false;
  string name              = 1 [(gogoproto.jsontag) = "name", (gogoproto.moretags) = "yaml:\"name\""];

  bytes data = 2 [(gogoproto.jsontag) = "data", (gogoproto.moretags) = "yaml:\"data\""];
}

// ChunkedArtifact is the manifest for an artifact that is submitted across
// multiple transactions, in chunks, as when using InstallBundle to submit
// chunks.
message ChunkedArtifact {
  // The SHA-512 hash of the compartment-map.json file inside the bundle.
  string sha512 = 1 [(gogoproto.jsontag) = "sha512", (gogoproto.moretags) = "yaml:\"sha512\""];

  // The size of the final bundle artifact in bytes.
  uint64 size_bytes = 2 [(gogoproto.jsontag) = "size_bytes", (gogoproto.moretags) = "yaml:\"size_bytes\""];

  // Information about the chunks that will be concatenated to form this
  // bundle.
  repeated ChunkInfo chunks = 3 [(gogoproto.jsontag) = "chunks", (gogoproto.moretags) = "yaml:\"chunks\""];
}

// Current state of this chunk.
enum ChunkState {
  // Unknown state.
  CHUNK_STATE_UNSPECIFIED = 0;

  // The chunk is still in-flight.
  CHUNK_STATE_IN_FLIGHT = 1;

  // The chunk has been received.
  CHUNK_STATE_RECEIVED = 2;

  // The chunk has been processed.
  CHUNK_STATE_PROCESSED = 3;
};

// Information about a chunk of a bundle.
message ChunkInfo {
  // The SHA-512 hash of the chunk contents.
  string sha512 = 1 [(gogoproto.jsontag) = "sha512", (gogoproto.moretags) = "yaml:\"sha512\""];

  // The chunk size in bytes.
  uint64 size_bytes = 2 [(gogoproto.jsontag) = "size_bytes", (gogoproto.moretags) = "yaml:\"size_bytes\""];

  // The current state of the chunk.
  ChunkState state = 3 [(gogoproto.jsontag) = "state", (gogoproto.moretags) = "yaml:\"state\""];
}

// A node in a doubly-linked-list of chunks of a chunked artifact, as used for
// chunked bundle installation, in order of ascending block time.
// The keeper uses this to expediently expire stale chunks.
message ChunkedArtifactNode {
  // The id of the pending bundle installation.
  uint64 chunked_artifact_id = 1
      [(gogoproto.jsontag) = "chunkedArtifactId", (gogoproto.moretags) = "yaml:\"chunkedArtifactId\""];

  // Doubly-linked list.
  uint64 next_id = 2 [(gogoproto.jsontag) = "nextId", (gogoproto.moretags) = "yaml:\"nextId\""];

  uint64 prev_id = 3 [(gogoproto.jsontag) = "prevId", (gogoproto.moretags) = "yaml:\"prevId\""];

  // The time at which the pending installation began, in UNIX epoch seconds.
  int64 start_time_unix = 4 [(gogoproto.jsontag) = "startTimeUnix", (gogoproto.moretags) = "yaml:\"startTimeUnix\""];

  // The block at which the pending installation began.
  int64 start_block_height = 5
      [(gogoproto.jsontag) = "startBlockHeight", (gogoproto.moretags) = "yaml:\"startBlockHeight\""];
}
