// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2025, NASD Inc. All rights reserved.
// Use of this software is governed by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN "AS IS" BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

syntax = "proto3";

package noble.forwarding.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/noble-assets/forwarding/v2/types";

service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterAccount(noble.forwarding.v1.MsgRegisterAccount) returns (noble.forwarding.v1.MsgRegisterAccountResponse);
  rpc ClearAccount(noble.forwarding.v1.MsgClearAccount) returns (noble.forwarding.v1.MsgClearAccountResponse);

  rpc SetAllowedDenoms(noble.forwarding.v1.MsgSetAllowedDenoms) returns (noble.forwarding.v1.MsgSetAllowedDenomsResponse);
}

//

message MsgRegisterAccount {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/forwarding/RegisterAccount";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string recipient = 2;
  string channel = 3;
  string fallback = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgRegisterAccountResponse {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgClearAccount {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/forwarding/ClearAccount";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  bool fallback = 3;
}

message MsgClearAccountResponse {}

message MsgSetAllowedDenoms {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "noble/forwarding/SetAllowedDenoms";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated string denoms = 2;
}

message MsgSetAllowedDenomsResponse {}
