diff --git a/src/deeplyFulfilled.d.ts b/src/deeplyFulfilled.d.ts
index 959ab7274bce73f1f218e66e4369d68ef0974859..c7dcad04e1da7d14fde0cfc1bf1d86be576dd180 100644
--- a/src/deeplyFulfilled.d.ts
+++ b/src/deeplyFulfilled.d.ts
@@ -16,6 +16,8 @@ export type DeeplyAwaitedObject<T extends {}> = { [K in keyof T]: T[K] extends C
 /**
  * Currently copied from
  */
-export type DeeplyAwaited<T> = T extends PromiseLike<any> ? Awaited<T> : T extends {} ? Simplify<DeeplyAwaitedObject<T>> : Awaited<T>;
+export type DeeplyAwaited<T> = T extends PromiseLike<any> ? Awaited<T> : T extends (RemotableBrand<any, any> | RemotableObject) ? T : T extends {} ? Simplify<DeeplyAwaitedObject<T>> : Awaited<T>;
 import type { Passable } from '@endo/pass-style';
+import type { RemotableBrand } from '@endo/eventual-send';
+import type { RemotableObject } from '@endo/pass-style';
 //# sourceMappingURL=deeplyFulfilled.d.ts.map
\ No newline at end of file
diff --git a/src/deeplyFulfilled.d.ts.map b/src/deeplyFulfilled.d.ts.map
index f1ccb5ab5f28b2f6fb9cd333df7b8059aa0d7180..d6c22038753ddbb9cc10b385ca48bb1a119b7870 100644
--- a/src/deeplyFulfilled.d.ts.map
+++ b/src/deeplyFulfilled.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"deeplyFulfilled.d.ts","sourceRoot":"","sources":["deeplyFulfilled.js"],"names":[],"mappings":"AAgFO,gCAJkB,CAAC,SAAb,QAAU,kBACZ,CAAC,GACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAqErC;;;;;;qBAhIY,CAAC,IACD,GAAG,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAE,GAAG,EAAE;;;;uBASzC,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,GAAG;;;;gCAOlB,CAAC,SAAN,EAAI,IACJ,GACP,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACnE;;;;0BAOS,CAAC,IACD,CAAC,SAAS,WAAW,CAAC,GAAG,CAAC,GAC9B,OAAO,CAAC,CAAC,CAAC,GACV,CAAC,SAAS,EAAE,GACV,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,GAChC,OAAO,CAAC,CAAC,CAAC;8BA1CqE,kBAAkB"}
\ No newline at end of file
+{"version":3,"file":"deeplyFulfilled.d.ts","sourceRoot":"","sources":["deeplyFulfilled.js"],"names":[],"mappings":"AAmFO,gCAJkB,CAAC,SAAb,QAAU,kBACZ,CAAC,GACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAqErC;;;;;;qBAlIY,CAAC,IACD,GAAG,OAAO,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAE,GAAG,EAAE;;;;uBASzC,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,KAAK,GAAG;;;;gCAOlB,CAAC,SAAN,EAAI,IACJ,GACP,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACnE;;;;0BAOS,CAAC,IACD,CAAC,SAAS,WAAW,CAAC,GAAG,CAAC,GAC9B,OAAO,CAAC,CAAC,CAAC,GACV,CAAC,SAAS,CAAC,eAAe,GAAG,EAAE,GAAG,CAAC,GAAG,eAAe,CAAC,GACpD,CAAC,GACD,CAAC,SAAS,EAAE,GACV,QAAQ,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,GAChC,OAAO,CAAC,CAAC,CAAC;8BA5CmE,kBAAkB;oCAD3E,qBAAqB;qCACoC,kBAAkB"}
\ No newline at end of file
diff --git a/src/deeplyFulfilled.js b/src/deeplyFulfilled.js
index 169edcba788d2ae73992261b883706565e2be5c2..6061dd56dc4f831a79fc68882a9def2ff8690937 100644
--- a/src/deeplyFulfilled.js
+++ b/src/deeplyFulfilled.js
@@ -7,6 +7,7 @@ import { makeTagged } from './makeTagged.js';
 import { isAtom } from './typeGuards.js';
 
 /**
+ * @import {RemotableBrand} from '@endo/eventual-send';
  * @import {Passable, ByteArray, CopyRecord, CopyArray, CopyTagged, RemotableObject} from '@endo/pass-style'
  */
 
@@ -47,9 +48,11 @@ const { fromEntries } = Object;
  * @template T
  * @typedef {T extends PromiseLike<any>
  *     ? Awaited<T>
- *     : T extends {}
- *       ? Simplify<DeeplyAwaitedObject<T>>
- *       : Awaited<T>} DeeplyAwaited
+ *     : T extends (RemotableBrand<any, any> | RemotableObject)
+ *       ? T
+ *       : T extends {}
+ *         ? Simplify<DeeplyAwaitedObject<T>>
+ *         : Awaited<T>} DeeplyAwaited
  */
 
 /**
diff --git a/src/remotable.js b/src/remotable.js
index 586597930e1f9ce207baaa3ae3ff784cdeba1324..65d0552e05fbd5e9f90f95d5762f0635eee0c1c9 100644
--- a/src/remotable.js
+++ b/src/remotable.js
@@ -16,7 +16,7 @@ import {
  * @import {Checker, RemotableMethodName} from './types.js'
  * @import {InterfaceSpec, PassStyled} from './types.js'
  * @import {PassStyleHelper} from './internal-types.js'
- * @import {RemotableObject as Remotable} from './types.js'
+ * @import {RemotableObject} from './types.js'
  */
 
 /**
@@ -185,14 +185,14 @@ const checkRemotableProtoOf = (original, check) => {
  * We don't remember rejections because they are possible to correct
  * with e.g. `harden`.
  *
- * @type {WeakSet<Remotable>}
+ * @type {WeakSet<RemotableObject>}
  */
 const confirmedRemotables = new WeakSet();
 
 /**
  * @param {any} val
  * @param {Checker} [check]
- * @returns {val is Remotable}
+ * @returns {val is RemotableObject}
  */
 const checkRemotable = (val, check) => {
   if (confirmedRemotables.has(val)) {
diff --git a/src/types.d.ts b/src/types.d.ts
index 7c50263edc7fb2af8ddf84db83dc5fd0f97e775e..76e50e129f3c2407765b7d974058fcb307018a53 100644
--- a/src/types.d.ts
+++ b/src/types.d.ts
@@ -1,3 +1,4 @@
+import type { RemotableBrand } from '@endo/eventual-send';
 /* eslint-disable no-use-before-define */
 import { PASS_STYLE } from './passStyle-helpers.js';
 
@@ -78,7 +79,9 @@ export type PassByCopy = Atom | Error | CopyArray | CopyRecord | CopyTagged;
 
 export type PassByRef =
   | RemotableObject
+  | RemotableBrand<any, any>
   | Promise<RemotableObject>
+  | Promise<RemotableBrand<any, any>>
   | Promise<PassByCopy>;
 
 /**
@@ -164,6 +167,9 @@ export type PassStyleOf = {
 export type PureData = Passable<never, never>;
 
 /**
+ * @deprecated this type doesn't carry the type of the behavior for remote
+ * sends. You likely want to use {@link RemotableBrand} instead.
+ *
  * An object marked as remotely accessible using the `Far` or `Remotable`
  * functions, or a local presence representing such a remote object.
  *
@@ -188,7 +194,10 @@ export type RemotableMethodName = PropertyKey;
 /**
  * The authority-bearing leaves of a Passable's pass-by-copy superstructure.
  */
-export type PassableCap = Promise<any> | RemotableObject;
+export type PassableCap =
+  | Promise<any>
+  | RemotableObject
+  | RemotableBrand<any, any>;
 
 /**
  * A Passable sequence of Passable values.
@@ -216,9 +225,7 @@ export type CopyRecord<T extends Passable = any> = Record<string, T>;
 export type CopyTagged<
   Tag extends string = string,
   Payload extends Passable = any,
-> = PassStyled<'tagged', Tag> & {
-  payload: Payload;
-};
+> = PassStyled<'tagged', Tag> & { payload: Payload };
 
 /**
  * This is an interface specification.
