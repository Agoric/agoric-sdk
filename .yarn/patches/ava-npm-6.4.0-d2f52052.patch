diff --git a/index.js b/index.js
new file mode 100644
index 0000000000..bee62d84af
--- /dev/null
+++ b/index.js
@@ -0,0 +1,2 @@
+// XXX work around https://github.com/import-js/eslint-plugin-import/issues/1810
+export {default} from './lib/worker/main.cjs';
diff --git a/lib/cli.js b/lib/cli.js
index 4e13084d47..6ee910ba35 100644
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -447,9 +447,13 @@ export default async function loadCli() { // eslint-disable-line complexity
 		serial: combined.serial,
 		snapshotDir: combined.snapshotDir ? path.resolve(projectDir, combined.snapshotDir) : null,
 		timeout: combined.timeout ?? '10s',
-		updateSnapshots: combined.updateSnapshots,
-		workerArgv: argv['--'],
-	});
+               updateSnapshots: combined.updateSnapshots,
+               workerArgv: argv['--'],
+       });
+
+       if (process.env.AGORIC_AVA_USE_TAP){
+               combined.tap = true;
+       }
 
 	let reporter;
 	if (combined.tap && !argv.watch && debug === null) {
diff --git a/lib/fork.js b/lib/fork.js
index 8317774ff9..18cea975ba 100644
--- a/lib/fork.js
+++ b/lib/fork.js
@@ -6,6 +6,7 @@ import {Worker} from 'node:worker_threads';
 import Emittery from 'emittery';
 
 import {controlFlow} from './ipc-flow-control.cjs';
+import {setCappedTimeout} from './now-and-timers.cjs';
 import serializeError, {tagWorkerError} from './serialize-error.js';
 
 let workerPath = new URL('worker/base.js', import.meta.url);
@@ -85,8 +86,13 @@ export default function loadFork(file, options, execArgv = process.execArgv) {
 		emitStateChange({type: 'worker-stderr', chunk});
 	});
 
-	let forcedExit = false;
-	const send = evt => {
+       let forcedExit = false;
+       let exitCode = null;
+       const exit = () => {
+               forcedExit = true;
+               close();
+       };
+       const send = evt => {
 		if (!finished && !forcedExit) {
 			postMessage({ava: evt});
 		}
@@ -109,22 +115,28 @@ export default function loadFork(file, options, execArgv = process.execArgv) {
 					break;
 				}
 
-				case 'shared-worker-connect': {
-					const {channelId, filename, initialData, port} = message.ava;
-					emitter.emit('connectSharedWorker', {
-						filename,
-						initialData,
-						port,
-						signalError() {
-							send({type: 'shared-worker-error', channelId});
-						},
-					});
-					break;
-				}
-
-				default: {
-					emitStateChange(message.ava);
-				}
+                               case 'shared-worker-connect': {
+                                       const {channelId, filename, initialData, port} = message.ava;
+                                       emitter.emit('connectSharedWorker', {
+                                               filename,
+                                               initialData,
+                                               port,
+                                               signalError() {
+                                                       send({type: 'shared-worker-error', channelId});
+                                               },
+                                       });
+                                       break;
+                               }
+
+                               case 'exiting': {
+                                       exitCode = message.ava.code;
+                                       setCappedTimeout(() => finished || exit(), 10_000).unref();
+                                       break;
+                               }
+
+                               default: {
+                                       emitStateChange(message.ava);
+                               }
 			}
 		});
 
@@ -133,16 +145,27 @@ export default function loadFork(file, options, execArgv = process.execArgv) {
 			finish();
 		});
 
-		worker.on('exit', (code, signal) => {
-			if (forcedExit) {
-				emitStateChange({type: 'worker-finished', forcedExit});
-			} else if (code > 0) {
-				emitStateChange({type: 'worker-failed', nonZeroExitCode: code});
-			} else if (code === null && signal) {
-				emitStateChange({type: 'worker-failed', signal});
-			} else {
-				emitStateChange({type: 'worker-finished', forcedExit});
-			}
+               worker.on('exit', (code, signal) => {
+                       if (forcedExit) {
+                               if (exitCode === null) {
+                                       emitStateChange({type: 'worker-finished', forcedExit});
+                               } else if (!exitCode) {
+                                       if (!process.env.NODE_V8_COVERAGE) {
+                                               emitStateChange({type: 'worker-failed', err: Error('Test did not cleanup'), signal: 'exit timeout'});
+                                       } else {
+                                               emitStateChange({type: 'worker-stderr', chunk: `Test did not cleanup, ignoring because NODE_V8_COVERAGE is set.\n`});
+                                               emitStateChange({type: 'worker-finished', forcedExit: false});
+                                       }
+                               } else {
+                                       emitStateChange({type: 'worker-failed', nonZeroExitCode: exitCode});
+                               }
+                       } else if (code > 0 || exitCode > 0) {
+                               emitStateChange({type: 'worker-failed', nonZeroExitCode: code || exitCode});
+                       } else if (code === null && signal) {
+                               emitStateChange({type: 'worker-failed', signal});
+                       } else {
+                               emitStateChange({type: 'worker-finished', forcedExit});
+                       }
 
 			finish();
 		});
@@ -153,10 +176,7 @@ export default function loadFork(file, options, execArgv = process.execArgv) {
 		threadId: worker.threadId,
 		promise,
 
-		exit() {
-			forcedExit = true;
-			close();
-		},
+               exit,
 
 		notifyOfPeerFailure() {
 			send({type: 'peer-failed'});
diff --git a/lib/reporters/default.js b/lib/reporters/default.js
index 10ca84f656..bf9a853d09 100644
--- a/lib/reporters/default.js
+++ b/lib/reporters/default.js
@@ -730,9 +730,12 @@ export default class Reporter {
 			this.lineWriter.writeLine(colors.todo(`${this.stats.todoTests} ${plur('test', this.stats.todoTests)} todo`));
 		}
 
-		if (this.stats.unhandledRejections > 0) {
-			this.lineWriter.writeLine(colors.error(`${this.stats.unhandledRejections} unhandled ${plur('rejection', this.stats.unhandledRejections)}`));
-		}
+               // AGORIC: TODO(#11028): unhandled exceptions patch should be accomplished in userspace.
+               if (this.stats.unhandledRejections > 0 || process.env.AGORIC_AVA_EXPECT_UNHANDLED_REJECTIONS) {
+                       const expected = Number(process.env.AGORIC_AVA_EXPECT_UNHANDLED_REJECTIONS || 0);
+                       const color = this.stats.unhandledRejections === expected ? 'skip' : 'error';
+                       this.lineWriter.writeLine(colors[color](`${this.stats.unhandledRejections} unhandled ${plur('rejection', this.stats.unhandledRejections)} (AGORIC_AVA_EXPECT_UNHANDLED_REJECTIONS=${expected})`));
+               }
 
 		if (this.stats.uncaughtExceptions > 0) {
 			this.lineWriter.writeLine(colors.error(`${this.stats.uncaughtExceptions} uncaught ${plur('exception', this.stats.uncaughtExceptions)}`));
diff --git a/lib/reporters/tap.js b/lib/reporters/tap.js
index 258c927fca..72beb5b148 100644
--- a/lib/reporters/tap.js
+++ b/lib/reporters/tap.js
@@ -41,7 +41,11 @@ function dumpError({
 
 	originalError.stack = sanitizeStackOutput?.(stack || originalError.stack) ?? (stack || originalError.stack);
 
-	return originalError;
+       return originalError;
+}
+
+function durationOut(dur) {
+       return dur ? ` %ava-dur=${dur}ms` : '';
 }
 
 export default class TapReporter {
@@ -95,27 +99,28 @@ export default class TapReporter {
 		}
 	}
 
-	writeTest(evt, flags) {
-		this.reportStream.write(supertap.test(this.prefixTitle(evt.testFile, evt.title), {
-			comment: evt.logs,
-			error: evt.err ? dumpError(evt.err, this.sanitizeStackOutput) : null,
-			index: ++this.i,
-			passed: flags.passed,
-			skip: flags.skip,
-			todo: flags.todo,
-		}) + os.EOL);
+       writeTest(evt, flags) {
+               evt.title += durationOut(evt.duration);
+               this.reportStream.write(supertap.test(this.prefixTitle(evt.testFile, evt.title), {
+                       comment: evt.logs,
+                       error: evt.err ? dumpError(evt.err, this.sanitizeStackOutput) : null,
+                       index: ++this.i,
+                       passed: flags.passed,
+                       skip: flags.skip,
+                       todo: flags.todo,
+               }) + os.EOL);
 	}
 
-	writeCrash(evt, title) {
-		this.crashCount++;
-		this.reportStream.write(supertap.test(title ?? evt.err.stack?.split('\n')[0].trim() ?? evt.err.message ?? evt.type, {
-			comment: evt.logs,
-			error: evt.err ? dumpError(evt.err, this.sanitizeStackOutput) : null,
-			index: ++this.i,
-			passed: false,
-			skip: false,
-			todo: false,
-		}) + os.EOL);
+       writeCrash(evt, title) {
+               this.crashCount++;
+               this.reportStream.write(supertap.test((title ?? evt.err.stack?.split('\n')[0].trim() ?? evt.err.message ?? evt.type) + durationOut(evt.duration), {
+                       comment: evt.logs,
+                       error: evt.err ? dumpError(evt.err, this.sanitizeStackOutput) : null,
+                       index: ++this.i,
+                       passed: false,
+                       skip: false,
+                       todo: false,
+               }) + os.EOL);
 	}
 
 	writeComment(evt, {title = this.prefixTitle(evt.testFile, evt.title)}) {
diff --git a/lib/run-status.js b/lib/run-status.js
index ae6b68c4ea..8bb17188e8 100644
--- a/lib/run-status.js
+++ b/lib/run-status.js
@@ -242,17 +242,25 @@ export default class RunStatus extends Emittery {
 			|| this.stats.timeouts > 0
 			|| this.stats.uncaughtExceptions > 0
 			|| this.stats.unexpectedProcessExits > 0
-			|| this.stats.unhandledRejections > 0
+                       // AGORIC: `unhandledRejections` are processed below.
 		) {
 			return 1;
 		}
 
-		if ([...this.stats.byFile.values()].some(stats => stats.selectingLines && stats.selectedTests === 0)) {
-			return 1;
-		}
+                if ([...this.stats.byFile.values()].some(stats => stats.selectingLines && stats.selectedTests === 0)) {
+                        return 1;
+                }
 
-		return 0;
-	}
+               // AGORIC: TODO(#11028): unhandled exceptions patch should be accomplished in userspace.
+               if (this.stats.unhandledRejections > 0 || process.env.AGORIC_AVA_EXPECT_UNHANDLED_REJECTIONS) {
+                       const expected = Number(process.env.AGORIC_AVA_EXPECT_UNHANDLED_REJECTIONS || 0);
+                       if (this.stats.unhandledRejections !== expected) {
+                               return 1;
+                       }
+               }
+
+                return 0;
+        }
 
 	addPendingTestLogs(event) {
 		this.pendingTestsLogs.get(event.testFile)?.set(event.title, event.logs);
diff --git a/lib/worker/base.js b/lib/worker/base.js
index 520107dd35..2016bbfaf8 100644
--- a/lib/worker/base.js
+++ b/lib/worker/base.js
@@ -2,6 +2,7 @@ import {mkdir} from 'node:fs/promises';
 import {createRequire} from 'node:module';
 import path from 'node:path';
 import process from 'node:process';
+import v8 from 'node:v8';
 import {pathToFileURL} from 'node:url';
 import {workerData} from 'node:worker_threads';
 
@@ -25,6 +26,23 @@ const currentlyUnhandled = setUpCurrentlyUnhandled();
 let runner;
 
 let expectingExit = false;
+const realExit = process.exit;
+
+async function exit(code, forceSync = false) {
+       if (process.env.NODE_V8_COVERAGE) {
+               try {
+                       v8.takeCoverage();
+               } catch {}
+       }
+       channel.send({type: 'exiting', code});
+       const flushing = channel.flush();
+       if (!forceSync) {
+               await flushing;
+               process.exitCode ||= code;
+       } else {
+               Reflect.apply(realExit, process, [code]);
+       }
+}
 
 const forceExit = () => {
 	expectingExit = true;
@@ -32,8 +50,9 @@ const forceExit = () => {
 };
 
 const avaIsDone = () => {
-	expectingExit = true;
-	runCompletionHandlers();
+       expectingExit = true;
+       runCompletionHandlers();
+       void exit(0);
 };
 
 // Override process.exit with an undetectable replacement
