name: docker-testing

on:
  push:
    branches:
      - mz/ymax-planner-testing

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_REPO: ghcr.io/agoric/agoric-sdk-test
  IMAGE_TAG: ymax-planner-testing
  GCE_INSTANCE: ymax-test-planner
  GCE_ZONE: us-central1-a

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Write .env file from JSON
        shell: bash
        run: |
          jq -r 'to_entries[] | "\(.key)=\(.value)"' \
            <<< '${{ secrets.ENV_GCP_FILE }}' > .env.gcp

      - name: Build and Push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/ymax-planner/Dockerfile.testing
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      - name: Auth to Google Cloud (SA key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Check if VM already has this digest
        id: decide
        shell: bash
        run: |
          TARGET="ghcr.io/agoric/agoric-sdk-test:ymax-planner-testing@${{ steps.build.outputs.digest }}"

          # Pull current container declaration YAML from instance metadata
          DECL=$(
            gcloud compute instances describe "${{ env.GCE_INSTANCE }}" \
              --zone "${{ env.GCE_ZONE }}" \
              --format=json \
            | jq -r '.metadata.items[] | select(.key=="gce-container-declaration") | .value'
          )

          if printf '%s\n' "$DECL" | grep -F "$TARGET" >/dev/null 2>&1; then
            echo "VM already configured with this digest. Skipping deploy."
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          else
            echo "Digest differs (or not set). Will deploy."
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Update GCE container (by digest)
        if: steps.decide.outputs.should_deploy == 'true'
        shell: bash
        run: |
          IMAGE="${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}@${{ steps.build.outputs.digest }}"
          echo "Deploying image: $IMAGE"
          gcloud compute instances update-container "${{ env.GCE_INSTANCE }}" \
            --zone "${{ env.GCE_ZONE }}" \
            --container-env-file ./.env.gcp \
            --container-image="$IMAGE"
