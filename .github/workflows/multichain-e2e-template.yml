name: Multichain E2E Workflow Template

on:
  workflow_call:
    inputs:
      config:
        required: true
        type: string
      test_command:
        required: true
        type: string
        description: 'Test command to run (e.g., "test:main" or "test:fast-usdc")'
      test_suite_name:
        required: true
        type: string
        description: 'Identifier for the test suite that will be used as part of the filename name for logs'

jobs:
  multichain-e2e:
    name: Multichain E2E (${{ inputs.test_command }})
    runs-on: 'depot-ubuntu-24.04-16'

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
          path: ./agoric-sdk

      - uses: ./agoric-sdk/.github/actions/restore-node
        with:
          node-version: 'node-new'
          path: ./agoric-sdk

      # Extract chain and relayer information
      - name: Extract config information
        id: extract-config
        run: |
          # Create logs directory with unique path per run/job
          LOG_DIR="$GITHUB_WORKSPACE/agoric-sdk/multichain-testing/logs/$GITHUB_RUN_ID/$GITHUB_JOB"
          mkdir -p "$LOG_DIR/validators"
          mkdir -p "$LOG_DIR/relayers"
          echo "LOG_DIR=${LOG_DIR}" >> $GITHUB_ENV

          # Extract namespace name
          NAMESPACE=$(yq e '.name' ./agoric-sdk/multichain-testing/${{ inputs.config }})
          echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV

          # Build validator pod names (chainid-genesis-0)
          VALIDATOR_PODS=$(yq e '.chains[] | .id + "-genesis-0"' ./agoric-sdk/multichain-testing/${{ inputs.config }} | tr '\n' ' ')
          echo "VALIDATOR_PODS=${VALIDATOR_PODS}" >> $GITHUB_ENV

          # Build relayer pod names (type-name-0)
          RELAYER_PODS=$(yq e '.relayers[] | .type + "-" + .name + "-0"' ./agoric-sdk/multichain-testing/${{ inputs.config }} | tr '\n' ' ')
          echo "RELAYER_PODS=${RELAYER_PODS}" >> $GITHUB_ENV

          # For debugging
          echo "Namespace: ${NAMESPACE}"
          echo "Validator pods: ${VALIDATOR_PODS}"
          echo "Relayer pods: ${RELAYER_PODS}"

      - name: yarn link
        run: |
          yarn link-cli ~/bin/agoric
          echo "/home/runner/bin" >> $GITHUB_PATH
        working-directory: ./agoric-sdk

      - name: Enable Corepack
        run: corepack enable
        working-directory: ./agoric-sdk/multichain-testing

      # Before multichain-testing deps because that project portals into SDK
      # but only the SDK postinstall script will runs its package patching.
      - name: Install SDK deps
        run: yarn install

      - name: Install @agoric/multichain-testing deps
        run: yarn install
        working-directory: ./agoric-sdk/multichain-testing

      - name: Lint @agoric/multichain-testing
        # include testing imports to check package patches
        run: yarn lint && yarn ava test/imports.test.ts
        working-directory: ./agoric-sdk/multichain-testing

      - name: docker build (sdk)
        # Produces local ghcr.io/agoric/agoric-sdk:dev used in the following test.
        run: |
          make docker-build-sdk TAG=dev
        working-directory: ./agoric-sdk/packages/deployment

      - name: Setup Starship Infrastructure
        id: starship-infra
        # in lieu of cosmology-tech/starship-action@0.3.0
        # (see local .github/actions/starship-action/README.md)
        uses: ./agoric-sdk/.github/actions/starship-action
        with:
          values: ./agoric-sdk/multichain-testing/${{ inputs.config }}
          port-forward: true
          version: 0.2.20
          timeout: 20m # Usually 13min
          # Load the locally-built dev Docker image for the chain into kind.
          load-docker-images: ghcr.io/agoric/agoric-sdk:dev
          namespace: ${{ env.NAMESPACE }}
          repo: https://hyperweb-io.github.io/starship

      - name: Await pods
        run: |
          kubectl config set-context --current --namespace=${NAMESPACE}
          kubectl get pods
        working-directory: ./agoric-sdk/multichain-testing

      - name: Setup Agoric chain state
        uses: nick-fields/retry@v3
        with:
          # Retry arbitrarily; this isn't the test itself so don't wire up the flake detection.
          max_attempts: 3
          timeout_minutes: 5
          command: cd ./agoric-sdk/multichain-testing && make fund-provision-pool register-bank-assets

      - name: Run @agoric/multichain-testing E2E Tests
        id: run-tests
        # These integration tests can be flaky so retry automatically
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 15
          max_attempts: 2 # only retry once
          retry_on: error # let command timeout fail the job
          command: cd ./agoric-sdk/multichain-testing && ${{ inputs.test_command }}
        env:
          FILE: ${{ inputs.config }}

      - name: Notify of flakey test
        # If tests passed but required more than 1 attempt, then the test was flaky, so report it via Slack.
        if: ${{ steps.run-tests.outputs.exit_code == 0 && steps.run-tests.outputs.total_attempts > 1 }}
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "ðŸŽ¯ Flakey test detected in job ${{ github.job }} in workflow ${{ github.workflow }} of ${{ github.repository }}\nDetails at ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/1",
              "username": "GitHub"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Capture slog.slog
        if: always()
        run: |
          cd $GITHUB_WORKSPACE
          echo "Capturing agoric slog.slog"
          kubectl exec -i agoriclocal-genesis-0 -c validator -- cat slog.slog > "${LOG_DIR}/slog.slog" 2>&1 || true

      - name: Capture validator logs
        if: always()
        run: |
          cd $GITHUB_WORKSPACE
          for pod in ${VALIDATOR_PODS}; do
            echo "Capturing validator logs for ${pod}"
            kubectl logs ${pod} --container=validator > "${LOG_DIR}/validators/${pod}.log" 2>&1 || true
          done

      - name: Capture relayer logs
        if: always()
        run: |
          cd $GITHUB_WORKSPACE
          for pod in ${RELAYER_PODS}; do
            echo "Capturing relayer logs for ${pod}"
            kubectl logs ${pod} --container=relayer > "${LOG_DIR}/relayers/${pod}.log" 2>&1 || true
          done

      - name: Upload validator and relayer logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: multichain-e2e-logs-${{ env.NAMESPACE }}-${{ inputs.test_suite_name }}-${{ github.run_id }}-${{ github.job }}
          path: ${{ env.LOG_DIR }}
