{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "42f1ec1d0fe4c54de4f3e4127fdbe185c74ce2a1b235908bbd57893cbdfe77068e88d6994bd08f44747e89068e5e8a99c4d53cdd39a6d9fa03c8ba396c600cf2"
}