diff --git a/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js b/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
index b90267f..0740b1e 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internal-for-bigint.js
@@ -3,41 +3,8 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.getHelperForBigint = void 0;
 const getHelperForBigint = (options) => {
     return `
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
-
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
   readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/main/helpers/internal.js b/node_modules/@cosmology/telescope/main/helpers/internal.js
index 9df1935..3e1c3a2 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internal.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internal.js
@@ -14,39 +14,8 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
     readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js b/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
index 07b6e47..6a02c01 100644
--- a/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
+++ b/node_modules/@cosmology/telescope/main/helpers/internalForBigInt.js
@@ -2,41 +2,8 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.internalForBigInt = void 0;
 exports.internalForBigInt = `
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
-
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
   readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/module/helpers/internal.js b/node_modules/@cosmology/telescope/module/helpers/internal.js
index d24ec70..2fb7cc4 100644
--- a/node_modules/@cosmology/telescope/module/helpers/internal.js
+++ b/node_modules/@cosmology/telescope/module/helpers/internal.js
@@ -11,39 +11,8 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
     readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts b/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
index 9308f40..425b617 100644
--- a/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
+++ b/node_modules/@cosmology/telescope/src/helpers/internal-for-bigint.ts
@@ -2,41 +2,8 @@ import { TelescopeOptions } from "@cosmology/types";
 
 export const getHelperForBigint = (options: TelescopeOptions) => {
   return `
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-  if (typeof globalThis !== 'undefined') return globalThis;
-  if (typeof self !== 'undefined') return self;
-  if (typeof window !== 'undefined') return window;
-  if (typeof global !== 'undefined') return global;
-  throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-  globalThis.atob ||
-  ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-  const bin = atob(b64);
-  const arr = new Uint8Array(bin.length);
-  for (let i = 0; i < bin.length; ++i) {
-    arr[i] = bin.charCodeAt(i);
-  }
-  return arr;
-}
-
-const btoa: (bin: string) => string =
-  globalThis.btoa ||
-  ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-  const bin: string[] = [];
-  arr.forEach((byte) => {
-    bin.push(String.fromCharCode(byte));
-  });
-  return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
   readonly revision_number?: string;
diff --git a/node_modules/@cosmology/telescope/src/helpers/internal.ts b/node_modules/@cosmology/telescope/src/helpers/internal.ts
index ff08a4f..df2b8b6 100644
--- a/node_modules/@cosmology/telescope/src/helpers/internal.ts
+++ b/node_modules/@cosmology/telescope/src/helpers/internal.ts
@@ -13,39 +13,8 @@ if (_m0.util.Long !== Long) {
 
 export { Long };
 
-declare var self: any | undefined;
-declare var window: any | undefined;
-declare var global: any | undefined;
-var globalThis: any = (() => {
-    if (typeof globalThis !== 'undefined') return globalThis;
-    if (typeof self !== 'undefined') return self;
-    if (typeof window !== 'undefined') return window;
-    if (typeof global !== 'undefined') return global;
-    throw 'Unable to locate global object';
-})();
-
-const atob: (b64: string) => string =
-    globalThis.atob || ((b64) => globalThis.Buffer.from(b64, 'base64').toString('binary'));
-
-export function bytesFromBase64(b64: string): Uint8Array {
-    const bin = atob(b64);
-    const arr = new Uint8Array(bin.length);
-    for (let i = 0; i < bin.length; ++i) {
-        arr[i] = bin.charCodeAt(i);
-    }
-    return arr;
-}
-
-const btoa: (bin: string) => string =
-    globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, 'binary').toString('base64'));
-
-export function base64FromBytes(arr: Uint8Array): string {
-    const bin: string[] = [];
-    arr.forEach((byte) => {
-        bin.push(String.fromCharCode(byte));
-    });
-    return btoa(bin.join(''));
-}
+// PATCH: Use base64Lib: 'endo' instead for bytesFromBase64 and base64FromBytes
+// TODO update Telescope to put these helpers in a separate module so 'helpers' doesn't entail ambient authority
 
 export interface AminoHeight {
     readonly revision_number?: string;
