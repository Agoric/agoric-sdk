// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/swingset/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDeliverInbound defines an SDK message for delivering an eventual send
type MsgDeliverInbound struct {
	Messages  []string                                      `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages" yaml:"messages"`
	Nums      []uint64                                      `protobuf:"varint,2,rep,packed,name=nums,proto3" json:"nums" yaml:"nums"`
	Ack       uint64                                        `protobuf:"varint,3,opt,name=ack,proto3" json:"ack" yaml:"ack"`
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter" yaml:"submitter"`
}

func (m *MsgDeliverInbound) Reset()         { *m = MsgDeliverInbound{} }
func (m *MsgDeliverInbound) String() string { return proto.CompactTextString(m) }
func (*MsgDeliverInbound) ProtoMessage()    {}
func (*MsgDeliverInbound) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{0}
}
func (m *MsgDeliverInbound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeliverInbound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeliverInbound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeliverInbound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeliverInbound.Merge(m, src)
}
func (m *MsgDeliverInbound) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeliverInbound) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeliverInbound.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeliverInbound proto.InternalMessageInfo

func (m *MsgDeliverInbound) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *MsgDeliverInbound) GetNums() []uint64 {
	if m != nil {
		return m.Nums
	}
	return nil
}

func (m *MsgDeliverInbound) GetAck() uint64 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *MsgDeliverInbound) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

// MsgDeliverInboundResponse is an empty reply.
type MsgDeliverInboundResponse struct {
}

func (m *MsgDeliverInboundResponse) Reset()         { *m = MsgDeliverInboundResponse{} }
func (m *MsgDeliverInboundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeliverInboundResponse) ProtoMessage()    {}
func (*MsgDeliverInboundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{1}
}
func (m *MsgDeliverInboundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeliverInboundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeliverInboundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeliverInboundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeliverInboundResponse.Merge(m, src)
}
func (m *MsgDeliverInboundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeliverInboundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeliverInboundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeliverInboundResponse proto.InternalMessageInfo

// MsgWalletAction defines an SDK message for the on-chain wallet to perform an
// action that *does not* spend any assets (other than gas fees/stamps).  This
// message type is typically protected by feegrant budgets.
type MsgWalletAction struct {
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner" yaml:"owner"`
	// The action to perform, as JSON-stringified marshalled data.
	Action string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *MsgWalletAction) Reset()         { *m = MsgWalletAction{} }
func (m *MsgWalletAction) String() string { return proto.CompactTextString(m) }
func (*MsgWalletAction) ProtoMessage()    {}
func (*MsgWalletAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{2}
}
func (m *MsgWalletAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWalletAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWalletAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWalletAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWalletAction.Merge(m, src)
}
func (m *MsgWalletAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgWalletAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWalletAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWalletAction proto.InternalMessageInfo

func (m *MsgWalletAction) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgWalletAction) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

// MsgWalletActionResponse is an empty reply.
type MsgWalletActionResponse struct {
}

func (m *MsgWalletActionResponse) Reset()         { *m = MsgWalletActionResponse{} }
func (m *MsgWalletActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWalletActionResponse) ProtoMessage()    {}
func (*MsgWalletActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{3}
}
func (m *MsgWalletActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWalletActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWalletActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWalletActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWalletActionResponse.Merge(m, src)
}
func (m *MsgWalletActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWalletActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWalletActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWalletActionResponse proto.InternalMessageInfo

// MsgWalletSpendAction defines an SDK message for the on-chain wallet to
// perform an action that *does spend the owner's assets.*  This message type is
// typically protected by explicit confirmation by the user.
type MsgWalletSpendAction struct {
	Owner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner" yaml:"owner"`
	// The action to perform, as JSON-stringified marshalled data.
	SpendAction string `protobuf:"bytes,2,opt,name=spend_action,json=spendAction,proto3" json:"spend_action,omitempty"`
}

func (m *MsgWalletSpendAction) Reset()         { *m = MsgWalletSpendAction{} }
func (m *MsgWalletSpendAction) String() string { return proto.CompactTextString(m) }
func (*MsgWalletSpendAction) ProtoMessage()    {}
func (*MsgWalletSpendAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{4}
}
func (m *MsgWalletSpendAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWalletSpendAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWalletSpendAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWalletSpendAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWalletSpendAction.Merge(m, src)
}
func (m *MsgWalletSpendAction) XXX_Size() int {
	return m.Size()
}
func (m *MsgWalletSpendAction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWalletSpendAction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWalletSpendAction proto.InternalMessageInfo

func (m *MsgWalletSpendAction) GetOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *MsgWalletSpendAction) GetSpendAction() string {
	if m != nil {
		return m.SpendAction
	}
	return ""
}

// MsgWalletSpendActionResponse is an empty reply.
type MsgWalletSpendActionResponse struct {
}

func (m *MsgWalletSpendActionResponse) Reset()         { *m = MsgWalletSpendActionResponse{} }
func (m *MsgWalletSpendActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWalletSpendActionResponse) ProtoMessage()    {}
func (*MsgWalletSpendActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{5}
}
func (m *MsgWalletSpendActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWalletSpendActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWalletSpendActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWalletSpendActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWalletSpendActionResponse.Merge(m, src)
}
func (m *MsgWalletSpendActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWalletSpendActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWalletSpendActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWalletSpendActionResponse proto.InternalMessageInfo

// MsgProvision defines an SDK message for provisioning a client to the chain
type MsgProvision struct {
	Nickname   string                                        `protobuf:"bytes,1,opt,name=nickname,proto3" json:"nickname" yaml:"nickname"`
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address" yaml:"address"`
	PowerFlags []string                                      `protobuf:"bytes,3,rep,name=power_flags,json=powerFlags,proto3" json:"powerFlags" yaml:"powerFlags"`
	Submitter  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter" yaml:"submitter"`
}

func (m *MsgProvision) Reset()         { *m = MsgProvision{} }
func (m *MsgProvision) String() string { return proto.CompactTextString(m) }
func (*MsgProvision) ProtoMessage()    {}
func (*MsgProvision) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{6}
}
func (m *MsgProvision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvision.Merge(m, src)
}
func (m *MsgProvision) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvision) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvision.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvision proto.InternalMessageInfo

func (m *MsgProvision) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *MsgProvision) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgProvision) GetPowerFlags() []string {
	if m != nil {
		return m.PowerFlags
	}
	return nil
}

func (m *MsgProvision) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

// MsgProvisionResponse is an empty reply.
type MsgProvisionResponse struct {
}

func (m *MsgProvisionResponse) Reset()         { *m = MsgProvisionResponse{} }
func (m *MsgProvisionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProvisionResponse) ProtoMessage()    {}
func (*MsgProvisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{7}
}
func (m *MsgProvisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProvisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProvisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProvisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProvisionResponse.Merge(m, src)
}
func (m *MsgProvisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProvisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProvisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProvisionResponse proto.InternalMessageInfo

// MsgInstallBundle carries a signed bundle to SwingSet.
type MsgInstallBundle struct {
	Bundle    string                                        `protobuf:"bytes,1,opt,name=bundle,proto3" json:"bundle" yaml:"bundle"`
	Submitter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter" yaml:"submitter"`
	// Either bundle or compressed_bundle will be set.
	// Default compression algorithm is gzip.
	CompressedBundle []byte `protobuf:"bytes,3,opt,name=compressed_bundle,json=compressedBundle,proto3" json:"compressedBundle" yaml:"compressedBundle"`
	// Size in bytes of uncompression of compressed_bundle.
	UncompressedSize int64 `protobuf:"varint,4,opt,name=uncompressed_size,json=uncompressedSize,proto3" json:"uncompressedSize"`
}

func (m *MsgInstallBundle) Reset()         { *m = MsgInstallBundle{} }
func (m *MsgInstallBundle) String() string { return proto.CompactTextString(m) }
func (*MsgInstallBundle) ProtoMessage()    {}
func (*MsgInstallBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{8}
}
func (m *MsgInstallBundle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstallBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstallBundle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstallBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstallBundle.Merge(m, src)
}
func (m *MsgInstallBundle) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstallBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstallBundle.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstallBundle proto.InternalMessageInfo

func (m *MsgInstallBundle) GetBundle() string {
	if m != nil {
		return m.Bundle
	}
	return ""
}

func (m *MsgInstallBundle) GetSubmitter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func (m *MsgInstallBundle) GetCompressedBundle() []byte {
	if m != nil {
		return m.CompressedBundle
	}
	return nil
}

func (m *MsgInstallBundle) GetUncompressedSize() int64 {
	if m != nil {
		return m.UncompressedSize
	}
	return 0
}

// MsgInstallBundleResponse is an empty acknowledgement that an install bundle
// message has been queued for the SwingSet kernel's consideration.
type MsgInstallBundleResponse struct {
}

func (m *MsgInstallBundleResponse) Reset()         { *m = MsgInstallBundleResponse{} }
func (m *MsgInstallBundleResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInstallBundleResponse) ProtoMessage()    {}
func (*MsgInstallBundleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_788baa062b181a57, []int{9}
}
func (m *MsgInstallBundleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInstallBundleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInstallBundleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInstallBundleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInstallBundleResponse.Merge(m, src)
}
func (m *MsgInstallBundleResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInstallBundleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInstallBundleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInstallBundleResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeliverInbound)(nil), "agoric.swingset.MsgDeliverInbound")
	proto.RegisterType((*MsgDeliverInboundResponse)(nil), "agoric.swingset.MsgDeliverInboundResponse")
	proto.RegisterType((*MsgWalletAction)(nil), "agoric.swingset.MsgWalletAction")
	proto.RegisterType((*MsgWalletActionResponse)(nil), "agoric.swingset.MsgWalletActionResponse")
	proto.RegisterType((*MsgWalletSpendAction)(nil), "agoric.swingset.MsgWalletSpendAction")
	proto.RegisterType((*MsgWalletSpendActionResponse)(nil), "agoric.swingset.MsgWalletSpendActionResponse")
	proto.RegisterType((*MsgProvision)(nil), "agoric.swingset.MsgProvision")
	proto.RegisterType((*MsgProvisionResponse)(nil), "agoric.swingset.MsgProvisionResponse")
	proto.RegisterType((*MsgInstallBundle)(nil), "agoric.swingset.MsgInstallBundle")
	proto.RegisterType((*MsgInstallBundleResponse)(nil), "agoric.swingset.MsgInstallBundleResponse")
}

func init() { proto.RegisterFile("agoric/swingset/msgs.proto", fileDescriptor_788baa062b181a57) }

var fileDescriptor_788baa062b181a57 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0xe3, 0x50, 0x36, 0xaf, 0xd9, 0x6d, 0x63, 0x95, 0xad, 0xd7, 0x0b, 0x99, 0xac, 0xa5,
	0x15, 0x01, 0xd4, 0x44, 0xb0, 0xb7, 0xed, 0x29, 0x16, 0x42, 0x5a, 0xa4, 0xa0, 0xc5, 0x2b, 0x84,
	0x54, 0x81, 0x5a, 0xc7, 0x19, 0x5c, 0x2b, 0xb6, 0xc7, 0xf2, 0x38, 0x2d, 0xed, 0x8d, 0xff, 0x00,
	0xfe, 0x01, 0x04, 0xff, 0x0d, 0xc7, 0x1e, 0x11, 0x87, 0x51, 0x95, 0x5e, 0x90, 0x8f, 0x3e, 0x72,
	0x42, 0x9e, 0xf1, 0x8f, 0xfc, 0x82, 0xa2, 0x1e, 0xca, 0x29, 0x79, 0xdf, 0xf7, 0xbd, 0xf7, 0xbe,
	0x99, 0x79, 0x63, 0x1b, 0x34, 0xcb, 0x21, 0x91, 0x6b, 0x0f, 0xe8, 0xb9, 0x1b, 0x38, 0x14, 0xc7,
	0x03, 0x9f, 0x3a, 0xb4, 0x1f, 0x46, 0x24, 0x26, 0xca, 0x8e, 0xe0, 0xfa, 0x05, 0xa7, 0xed, 0x39,
	0xc4, 0x21, 0x9c, 0x1b, 0x64, 0xff, 0x84, 0x4c, 0xff, 0xb9, 0x0e, 0xed, 0x11, 0x75, 0x3e, 0xc5,
	0x9e, 0x7b, 0x86, 0xa3, 0x57, 0xc1, 0x98, 0xcc, 0x82, 0x89, 0x72, 0x08, 0x0f, 0x7c, 0x4c, 0xa9,
	0xe5, 0x60, 0xaa, 0x4a, 0x5d, 0xb9, 0xd7, 0x34, 0x50, 0xc2, 0x50, 0x89, 0xa5, 0x0c, 0xed, 0x5c,
	0x58, 0xbe, 0xf7, 0x52, 0x2f, 0x10, 0xdd, 0x2c, 0x49, 0xe5, 0x23, 0x68, 0x04, 0x33, 0x9f, 0xaa,
	0xf5, 0xae, 0xdc, 0x6b, 0x18, 0xfb, 0x09, 0x43, 0x3c, 0x4e, 0x19, 0xda, 0x16, 0x49, 0x59, 0xa4,
	0x9b, 0x1c, 0x54, 0xde, 0x07, 0xd9, 0xb2, 0xa7, 0xaa, 0xdc, 0x95, 0x7a, 0x0d, 0xe3, 0x9d, 0x84,
	0xa1, 0x2c, 0x4c, 0x19, 0x02, 0x21, 0xb5, 0xec, 0xa9, 0x6e, 0x66, 0x90, 0x12, 0x42, 0x93, 0xce,
	0xc6, 0xbe, 0x1b, 0xc7, 0x38, 0x52, 0x1b, 0x5d, 0xa9, 0xd7, 0x32, 0xcc, 0x84, 0xa1, 0x0a, 0x4c,
	0x19, 0xda, 0x15, 0x49, 0x25, 0xa4, 0xff, 0xc5, 0xd0, 0x81, 0xe3, 0xc6, 0xa7, 0xb3, 0x71, 0xdf,
	0x26, 0xfe, 0xc0, 0x26, 0xd4, 0x27, 0x34, 0xff, 0x39, 0xa0, 0x93, 0xe9, 0x20, 0xbe, 0x08, 0x31,
	0xed, 0x0f, 0x6d, 0x7b, 0x38, 0x99, 0x44, 0x98, 0x52, 0xb3, 0xaa, 0xf7, 0xb2, 0xf1, 0xe7, 0x2f,
	0xa8, 0xa6, 0x3f, 0x85, 0x27, 0x6b, 0xfb, 0x63, 0x62, 0x1a, 0x92, 0x80, 0x62, 0xfd, 0x27, 0x09,
	0x76, 0x46, 0xd4, 0xf9, 0xda, 0xf2, 0x3c, 0x1c, 0x0f, 0xed, 0xd8, 0x25, 0x81, 0x72, 0x02, 0x6f,
	0x91, 0xf3, 0x00, 0x47, 0xaa, 0xc4, 0x4d, 0x7e, 0x9e, 0x30, 0x24, 0x80, 0x94, 0xa1, 0x96, 0x30,
	0xc8, 0xc3, 0x3b, 0x98, 0x13, 0x75, 0x94, 0xc7, 0xb0, 0x65, 0xf1, 0x5e, 0x6a, 0xbd, 0x2b, 0xf5,
	0x9a, 0x66, 0x1e, 0xe5, 0x86, 0x9f, 0xc0, 0xfe, 0x8a, 0xa5, 0xd2, 0xee, 0xaf, 0x12, 0xec, 0x95,
	0xdc, 0x9b, 0x10, 0x07, 0x93, 0x7b, 0xf3, 0xfc, 0x0c, 0x5a, 0x34, 0x6b, 0x78, 0xbc, 0xe4, 0x7c,
	0x9b, 0x56, 0x26, 0x72, 0xfb, 0x1d, 0x78, 0x77, 0x93, 0xc5, 0x72, 0x0d, 0x3f, 0xc8, 0xd0, 0x1a,
	0x51, 0xe7, 0x75, 0x44, 0xce, 0x5c, 0x9a, 0x79, 0x3f, 0x84, 0x07, 0x81, 0x6b, 0x4f, 0x03, 0xcb,
	0xc7, 0xdc, 0x7e, 0x3e, 0xab, 0x05, 0x56, 0xcd, 0x6a, 0x81, 0xe8, 0x66, 0x49, 0x2a, 0xa7, 0xf0,
	0xb6, 0x25, 0x8c, 0x72, 0x47, 0x2d, 0xe3, 0x8b, 0x84, 0xa1, 0x02, 0x4a, 0x19, 0x7a, 0x94, 0x8f,
	0xa1, 0x00, 0xee, 0xb0, 0xfc, 0xa2, 0x96, 0x62, 0xc2, 0x76, 0x48, 0xce, 0x71, 0x74, 0xfc, 0x9d,
	0x67, 0x39, 0x54, 0x95, 0xf9, 0xad, 0xfa, 0x78, 0xce, 0x10, 0xbc, 0xce, 0xe0, 0xcf, 0x32, 0x34,
	0x61, 0x08, 0xc2, 0x32, 0x4a, 0x19, 0x6a, 0x8b, 0xf6, 0x15, 0xa6, 0x9b, 0x0b, 0x82, 0xff, 0xed,
	0x4e, 0x3c, 0xe6, 0x63, 0x54, 0x1e, 0x41, 0x79, 0x36, 0x7f, 0xd4, 0x61, 0x77, 0x44, 0x9d, 0x57,
	0x01, 0x8d, 0x2d, 0xcf, 0x33, 0x66, 0xc1, 0xc4, 0xc3, 0xca, 0x0b, 0xd8, 0x1a, 0xf3, 0x7f, 0xf9,
	0xe9, 0x3c, 0x4d, 0x18, 0xca, 0x91, 0x94, 0xa1, 0x87, 0xc2, 0x9e, 0x88, 0x75, 0x33, 0x27, 0x96,
	0x57, 0x56, 0xbf, 0x87, 0x95, 0x29, 0xdf, 0x40, 0xdb, 0x26, 0x7e, 0x98, 0xc1, 0x78, 0x72, 0x9c,
	0x3b, 0x96, 0x79, 0xe7, 0x41, 0xc2, 0xd0, 0x6e, 0x45, 0x1a, 0x85, 0xf7, 0x7d, 0x61, 0x60, 0x95,
	0xd1, 0xcd, 0x35, 0xb1, 0x32, 0x84, 0xf6, 0x2c, 0x58, 0xa8, 0x4f, 0xdd, 0x4b, 0xcc, 0x4f, 0x4c,
	0x36, 0xf6, 0xb2, 0xea, 0x8b, 0xe4, 0x1b, 0xf7, 0x12, 0x9b, 0x6b, 0x88, 0xae, 0x81, 0xba, 0xba,
	0xb7, 0xc5, 0xc6, 0x7f, 0x72, 0x2d, 0x83, 0x3c, 0xa2, 0x8e, 0xf2, 0x2d, 0x3c, 0x5c, 0xde, 0xfc,
	0x67, 0xfd, 0x95, 0xd7, 0x40, 0x7f, 0xb5, 0x86, 0xf6, 0xc1, 0xad, 0x92, 0xa2, 0x8d, 0x72, 0x02,
	0x8f, 0x56, 0x5e, 0x14, 0xfa, 0xa6, 0xe4, 0x65, 0x8d, 0xf6, 0xe1, 0xed, 0x9a, 0xb2, 0xc3, 0x11,
	0xb4, 0x96, 0x1e, 0xa6, 0xdd, 0x4d, 0xb9, 0x8b, 0x0a, 0xad, 0x77, 0x9b, 0xa2, 0xac, 0xed, 0x42,
	0x7b, 0xfd, 0xc9, 0xf7, 0xfc, 0x9f, 0xd3, 0x17, 0x64, 0xda, 0xc1, 0x7f, 0x92, 0x95, 0xad, 0xbe,
	0x84, 0x66, 0xf5, 0x80, 0x7a, 0x6f, 0x53, 0x6e, 0x49, 0x6b, 0xcf, 0xff, 0x95, 0x2e, 0x4a, 0x1a,
	0x5f, 0xfd, 0x36, 0xef, 0x48, 0x57, 0xf3, 0x8e, 0x74, 0x3d, 0xef, 0x48, 0x3f, 0xde, 0x74, 0x6a,
	0x57, 0x37, 0x9d, 0xda, 0xef, 0x37, 0x9d, 0xda, 0xd1, 0xe1, 0xc2, 0xcc, 0x0f, 0xc5, 0x07, 0x81,
	0xa8, 0xc8, 0x67, 0xde, 0x21, 0x9e, 0x15, 0x38, 0xc5, 0x65, 0xf8, 0xbe, 0xfa, 0x56, 0xe0, 0x97,
	0x61, 0xbc, 0xc5, 0x3f, 0x03, 0x5e, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x51, 0x66, 0x1b, 0xd5,
	0x4b, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Install a JavaScript sources bundle on the chain's SwingSet controller.
	InstallBundle(ctx context.Context, in *MsgInstallBundle, opts ...grpc.CallOption) (*MsgInstallBundleResponse, error)
	// Send inbound messages.
	DeliverInbound(ctx context.Context, in *MsgDeliverInbound, opts ...grpc.CallOption) (*MsgDeliverInboundResponse, error)
	// Perform a low-privilege wallet action.
	WalletAction(ctx context.Context, in *MsgWalletAction, opts ...grpc.CallOption) (*MsgWalletActionResponse, error)
	// Perform a wallet action that spends assets.
	WalletSpendAction(ctx context.Context, in *MsgWalletSpendAction, opts ...grpc.CallOption) (*MsgWalletSpendActionResponse, error)
	// Provision a new endpoint.
	Provision(ctx context.Context, in *MsgProvision, opts ...grpc.CallOption) (*MsgProvisionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InstallBundle(ctx context.Context, in *MsgInstallBundle, opts ...grpc.CallOption) (*MsgInstallBundleResponse, error) {
	out := new(MsgInstallBundleResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Msg/InstallBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeliverInbound(ctx context.Context, in *MsgDeliverInbound, opts ...grpc.CallOption) (*MsgDeliverInboundResponse, error) {
	out := new(MsgDeliverInboundResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Msg/DeliverInbound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WalletAction(ctx context.Context, in *MsgWalletAction, opts ...grpc.CallOption) (*MsgWalletActionResponse, error) {
	out := new(MsgWalletActionResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Msg/WalletAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WalletSpendAction(ctx context.Context, in *MsgWalletSpendAction, opts ...grpc.CallOption) (*MsgWalletSpendActionResponse, error) {
	out := new(MsgWalletSpendActionResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Msg/WalletSpendAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Provision(ctx context.Context, in *MsgProvision, opts ...grpc.CallOption) (*MsgProvisionResponse, error) {
	out := new(MsgProvisionResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Msg/Provision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Install a JavaScript sources bundle on the chain's SwingSet controller.
	InstallBundle(context.Context, *MsgInstallBundle) (*MsgInstallBundleResponse, error)
	// Send inbound messages.
	DeliverInbound(context.Context, *MsgDeliverInbound) (*MsgDeliverInboundResponse, error)
	// Perform a low-privilege wallet action.
	WalletAction(context.Context, *MsgWalletAction) (*MsgWalletActionResponse, error)
	// Perform a wallet action that spends assets.
	WalletSpendAction(context.Context, *MsgWalletSpendAction) (*MsgWalletSpendActionResponse, error)
	// Provision a new endpoint.
	Provision(context.Context, *MsgProvision) (*MsgProvisionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InstallBundle(ctx context.Context, req *MsgInstallBundle) (*MsgInstallBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallBundle not implemented")
}
func (*UnimplementedMsgServer) DeliverInbound(ctx context.Context, req *MsgDeliverInbound) (*MsgDeliverInboundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverInbound not implemented")
}
func (*UnimplementedMsgServer) WalletAction(ctx context.Context, req *MsgWalletAction) (*MsgWalletActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletAction not implemented")
}
func (*UnimplementedMsgServer) WalletSpendAction(ctx context.Context, req *MsgWalletSpendAction) (*MsgWalletSpendActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletSpendAction not implemented")
}
func (*UnimplementedMsgServer) Provision(ctx context.Context, req *MsgProvision) (*MsgProvisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Provision not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InstallBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInstallBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InstallBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Msg/InstallBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InstallBundle(ctx, req.(*MsgInstallBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeliverInbound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeliverInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeliverInbound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Msg/DeliverInbound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeliverInbound(ctx, req.(*MsgDeliverInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WalletAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWalletAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WalletAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Msg/WalletAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WalletAction(ctx, req.(*MsgWalletAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WalletSpendAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWalletSpendAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WalletSpendAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Msg/WalletSpendAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WalletSpendAction(ctx, req.(*MsgWalletSpendAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProvision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Msg/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Provision(ctx, req.(*MsgProvision))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agoric.swingset.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallBundle",
			Handler:    _Msg_InstallBundle_Handler,
		},
		{
			MethodName: "DeliverInbound",
			Handler:    _Msg_DeliverInbound_Handler,
		},
		{
			MethodName: "WalletAction",
			Handler:    _Msg_WalletAction_Handler,
		},
		{
			MethodName: "WalletSpendAction",
			Handler:    _Msg_WalletSpendAction_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _Msg_Provision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agoric/swingset/msgs.proto",
}

func (m *MsgDeliverInbound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeliverInbound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeliverInbound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ack != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Ack))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nums) > 0 {
		dAtA2 := make([]byte, len(m.Nums)*10)
		var j1 int
		for _, num := range m.Nums {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMsgs(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintMsgs(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeliverInboundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeliverInboundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeliverInboundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWalletAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWalletAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWalletAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWalletActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWalletActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWalletActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWalletSpendAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWalletSpendAction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWalletSpendAction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpendAction) > 0 {
		i -= len(m.SpendAction)
		copy(dAtA[i:], m.SpendAction)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.SpendAction)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWalletSpendActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWalletSpendActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWalletSpendActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgProvision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PowerFlags) > 0 {
		for iNdEx := len(m.PowerFlags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PowerFlags[iNdEx])
			copy(dAtA[i:], m.PowerFlags[iNdEx])
			i = encodeVarintMsgs(dAtA, i, uint64(len(m.PowerFlags[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProvisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProvisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProvisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInstallBundle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstallBundle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstallBundle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UncompressedSize != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.UncompressedSize))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CompressedBundle) > 0 {
		i -= len(m.CompressedBundle)
		copy(dAtA[i:], m.CompressedBundle)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.CompressedBundle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bundle) > 0 {
		i -= len(m.Bundle)
		copy(dAtA[i:], m.Bundle)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Bundle)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInstallBundleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInstallBundleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInstallBundleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeliverInbound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	if len(m.Nums) > 0 {
		l = 0
		for _, e := range m.Nums {
			l += sovMsgs(uint64(e))
		}
		n += 1 + sovMsgs(uint64(l)) + l
	}
	if m.Ack != 0 {
		n += 1 + sovMsgs(uint64(m.Ack))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgDeliverInboundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWalletAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgWalletActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWalletSpendAction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.SpendAction)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgWalletSpendActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgProvision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.PowerFlags) > 0 {
		for _, s := range m.PowerFlags {
			l = len(s)
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgProvisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInstallBundle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bundle)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.CompressedBundle)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.UncompressedSize != 0 {
		n += 1 + sovMsgs(uint64(m.UncompressedSize))
	}
	return n
}

func (m *MsgInstallBundleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeliverInbound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeliverInbound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeliverInbound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nums = append(m.Nums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsgs
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsgs
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsgs
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nums) == 0 {
					m.Nums = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsgs
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nums = append(m.Nums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nums", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			m.Ack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ack |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeliverInboundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeliverInboundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeliverInboundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWalletAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWalletAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWalletAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWalletActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWalletActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWalletActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWalletSpendAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWalletSpendAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWalletSpendAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendAction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendAction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWalletSpendActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWalletSpendActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWalletSpendActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerFlags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PowerFlags = append(m.PowerFlags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProvisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProvisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProvisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstallBundle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstallBundle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstallBundle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bundle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bundle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter[:0], dAtA[iNdEx:postIndex]...)
			if m.Submitter == nil {
				m.Submitter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressedBundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompressedBundle = append(m.CompressedBundle[:0], dAtA[iNdEx:postIndex]...)
			if m.CompressedBundle == nil {
				m.CompressedBundle = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncompressedSize", wireType)
			}
			m.UncompressedSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UncompressedSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInstallBundleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInstallBundleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInstallBundleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
