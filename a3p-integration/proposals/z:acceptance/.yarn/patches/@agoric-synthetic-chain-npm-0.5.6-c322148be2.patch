diff --git a/dist/lib/index.js b/dist/lib/index.js
index 158b72a3eaeb8becb43151740f1bcddc121014ab..8e356dcc3c978ce17e82bd7dbad1683ae297624d 100644
--- a/dist/lib/index.js
+++ b/dist/lib/index.js
@@ -35,11 +35,14 @@ var SDK_ROOT = process.env.AGORIC_SDK || "/usr/src/agoric-sdk";
 // src/lib/cliHelper.ts
 import { $, execaCommand } from "execa";
 var executeCommand = async (command, params, options = {}) => {
-  const { stdout } = await execaCommand(
-    `${command} ${params.join(" ")}`,
-    options
-  );
-  return stdout;
+  const invocation = `${command} ${params.join(" ")}`;
+  console.warn('# invoking:', invocation);
+  const result = await execaCommand(invocation, options);
+  if (!options.stderr) {
+    const { stderr } = result;
+    if (stderr) console.warn(stderr);
+  }
+  return result.stdout;
 };
 var agd = {
   query: async (...params) => {
@@ -203,7 +206,17 @@ var makeAgd = ({
       );
     }
     const nodeArgs = [...rpcAddrs ? [`--node`, rpcAddrs[0]] : []];
-    const exec = (args, opts) => execFileSync2(agdBinary, args, opts).toString();
+    const exec = (args, opts) => {
+      console.warn(
+        '# invoking agd:',
+        ...[agdBinary, ...args].map(arg =>
+          arg.match(/[^a-zA-Z0-9,._+:@%/-]/)
+            ? `'${arg.replaceAll(`'`, `'\\''`)}'`
+            : arg,
+        ),
+      );
+      return execFileSync2(agdBinary, args, opts).toString();
+    };
     const outJson = ["--output", "json"];
     const ro = freeze({
       status: async () => JSON.parse(exec([...nodeArgs, "status"])),
@@ -337,18 +350,21 @@ var waitForBlock = async (n = 1) => {
   }
 };
 var provisionSmartWallet = async (address, amount) => {
-  console.log(`funding ${address}`);
-  await agd.tx(
-    "bank",
-    "send",
-    "validator",
-    address,
-    amount,
-    "-y",
-    "--keyring-backend=test",
-    `--chain-id="${CHAINID}"`
-  );
-  await waitForBlock();
+  await null;
+  if (amount) {
+    console.log(`funding ${address}`);
+    await agd.tx(
+      "bank",
+      "send",
+      "validator",
+      address,
+      amount,
+      "-y",
+      "--keyring-backend=test",
+      `--chain-id="${CHAINID}"`
+    );
+    await waitForBlock();
+  }
   console.log(`provisioning ${address}`);
   await agd.tx(
     "swingset",
@@ -393,18 +409,23 @@ var calculateWalletState = async (addr) => {
   }
   return state;
 };
-var executeOffer = async (address, offerPromise) => {
+var executeOffer = async (address, offerPromise, options = {}) => {
   const offerPath = await mkTemp("agops.XXX");
   const offer = await offerPromise;
   await fsp.writeFile(offerPath, offer);
-  await agops.perf(
+  if (options.verbose) {
+    console.warn(`# ${offerPath}:`, await fsp.readFile(offerPath, { encoding: "utf8" }));
+  }
+  const stdout = await agops.perf(
     "satisfaction",
     "--from",
     address,
     "--executeOffer",
     offerPath,
-    "--keyring-backend=test"
+    "--keyring-backend=test",
+    ...(options.verbose ? ["--verbose"] : []),
   );
+  console.warn(stdout);
 };
 var getUser = async (user) => {
   return agd.keys("show", user, "-a", "--keyring-backend=test");
@@ -920,8 +941,8 @@ var flags = (record) => {
   return Object.entries(record).map(([k, v]) => [`--${k}`, v]).flat();
 };
 var txAbbr = (tx) => {
-  const { txhash, code, height, gas_used } = tx;
-  return { txhash, code, height, gas_used };
+  const { txhash, codespace, code, height, gas_used } = tx;
+  return { txhash, codespace, code, height, gas_used };
 };
 var loadedBundleIds = (swingstore) => {
   const ids = swingstore`SELECT bundleID FROM bundles`.map(
@@ -1205,7 +1226,7 @@ var passCoreEvalProposal = async (bundleInfos, coreEvalConfig = {}) => {
           ["swingset", "install-bundle", `@${bundleRd}`],
           { from, chainId, yes: true }
         );
-        console.log(txAbbr(result));
+        console.log(result.code === 0 ? txAbbr(result) : result);
         assert4.equal(result.code, 0);
         const info = await getContractInfo("bundles", { agoric: agoric2, prefix: "" });
         console.log(info);
