diff --git a/dist/cli/cli.js b/dist/cli/cli.js
index d6a419172f2ff63b3214204b90b722ca7a2b86ae..801b96822dbf25c497ba30408d84e22cd2b411fa 100755
--- a/dist/cli/cli.js
+++ b/dist/cli/cli.js
@@ -829,9 +829,11 @@ switch (cmd) {
         const image = imageNameForProposal(proposal, "test");
         bakeTarget(image.target, values.dry);
         runTestImage({ proposal });
-        execSync3("docker system df", { stdio: "inherit" });
-        execSync3(`docker rmi ${image.name}`, { stdio: "inherit" });
-        execSync3("docker system df", { stdio: "inherit" });
+        if (!values.dry) {
+          execSync3("docker system df", { stdio: "inherit" });
+          execSync3(`docker rmi ${image.name}`, { stdio: "inherit" });
+          execSync3("docker system df", { stdio: "inherit" });
+        }
       }
     }
     break;
diff --git a/dist/cli/cli.js.map b/dist/cli/cli.js.map
index c3413c075c69e09f080230fc575b2c6e5632d27a..48bdd2de1e92ca8c5d83f2fff7264b2fa9b6f748 100644
--- a/dist/cli/cli.js.map
+++ b/dist/cli/cli.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/cli/cli.ts","../../src/cli/build.ts","../../src/cli/dockerfileGen.ts","../../src/cli/proposals.ts","../../src/cli/doctor.ts","../../src/cli/run.ts"],"sourcesContent":["#!/usr/bin/env -S node --import ts-blank-space/register\n/**\n * @file CLI entrypoint, transpiled during build so Node is the env to run it in\n */\nimport chalk from 'chalk';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\nimport path from 'node:path';\nimport { parseArgs } from 'node:util';\nimport {\n  bakeTarget,\n  buildProposalSubmissions,\n  readBuildConfig,\n} from './build.js';\nimport { writeBakefileProposals, writeDockerfile } from './dockerfileGen.js';\nimport { runDoctor } from './doctor.js';\nimport {\n  imageNameForProposal,\n  readProposals,\n  getProposalRange,\n  type ProposalRange,\n} from './proposals.js';\nimport { debugTestImage, runTestImage } from './run.js';\n\nconst root = path.resolve('.');\nconst buildConfig = readBuildConfig(root);\n\nconst { positionals, values } = parseArgs({\n  options: {\n    all: { type: 'boolean', default: false },\n    match: { short: 'm', type: 'string' },\n    dry: { type: 'boolean' },\n    debug: { type: 'boolean' },\n    rebuild: { type: 'boolean', default: false },\n    'no-push': { type: 'boolean', default: false },\n    start: { type: 'string', default: '' },\n    stop: { type: 'string', default: '' },\n  },\n  allowPositionals: true,\n});\n\nconst range = getProposalRange(readProposals(root), buildConfig, values);\n\nconst [cmd] = positionals;\n\n// TODO consider a lib like Commander for auto-gen help\nconst USAGE = `USAGE:\nprepare-build   - generate Docker build configs\n\nmake-ranges     - split proposals into required ranges\n  [--rebuild]   - rebuild all the proposals\n  [--no-push]   - error if any images would need to be pushed\n\nbuild           - build the synthetic-chain \"use\" images\n  [--dry]       - print the config without building images\n\ntest            - build the \"test\" images and run them\n                  respecting any SLOGFILE environment variable\n                  https://github.com/Agoric/agoric-sdk/blob/master/docs/env.md#slogfile\n  [-m <name>]   - target a particular proposal by substring match\n    [--debug]   - run containers with interactive TTY and port mapping\n  [--dry]       - print the config without building images\n\ndoctor          - diagnostics and quick fixes\n`;\n\nconst EXPLAIN_MULTIPLATFORM = `\nERROR: docker exporter does not currently support exporting manifest lists\n\nMultiple platforms are configured but Docker does not support multiplatform in one builder.\nUntil https://github.com/docker/roadmap/issues/371, attempting it will error as above.\n\nInstead use a builder that supports multiplatform such as depot.dev.\n`;\n\n/**\n * Put into places files that building depends upon.\n */\nconst prepareDockerBuild = (range: ProposalRange) => {\n  const cliPath = new URL(import.meta.url).pathname;\n  const publicDir = path.resolve(cliPath, '..', '..');\n  // copy and generate files of the build context that aren't in the build contents\n  execSync(`cp -r ${path.resolve(publicDir, 'docker-bake.hcl')} .`);\n  writeDockerfile(range);\n  writeBakefileProposals(range, buildConfig.platforms);\n  // copy and generate files to include in the build\n  execSync(`cp -r ${path.resolve(publicDir, 'upgrade-test-scripts')} .`);\n  buildProposalSubmissions(range.proposals);\n  // set timestamp of build content to zero to avoid invalidating the build cache\n  // (change in contents will still invalidate)\n  execSync(\n    'find upgrade-test-scripts -type f -exec touch -t 197001010000 {} +',\n  );\n};\n\nswitch (cmd) {\n  case 'make-ranges': {\n    const { all, rebuild, 'no-push': noPush } = values;\n    const ranges: string[] = [];\n    let lastName: string | undefined;\n    let rebuildRest = rebuild;\n    const someProposals = range.proposals;\n    const lastUpgrade = range.proposals.findLastIndex(\n      p => p.type === 'Software Upgrade Proposal',\n    );\n    const tail = lastUpgrade < 0 ? 0 : lastUpgrade;\n    for (let i = 0; i < someProposals.length; i++) {\n      const proposal = someProposals[i];\n      const name = proposal.proposalName;\n      if (!rebuildRest) {\n        const image = imageNameForProposal(proposal, 'use');\n        if (\n          i < tail &&\n          (all || proposal.type === 'Software Upgrade Proposal')\n        ) {\n          console.warn(\n            `[${i + 1}/${someProposals.length}] Checking ${image.name}...`,\n          );\n          try {\n            execSync(`docker manifest inspect ${JSON.stringify(image.name)}`, {\n              stdio: 'ignore',\n            });\n            console.warn(`Skipping ${name} because it is already pushed`);\n            lastName = name;\n            continue;\n          } catch (e) {}\n        }\n        if (i >= tail || !noPush) {\n          console.warn(`Rebuilding ${name} and the rest...`);\n          rebuildRest = true;\n        } else if (noPush) {\n          console.error(`${name} not found, needs to be pushed`);\n          process.exit(1);\n        }\n      }\n\n      if (lastName !== undefined) {\n        ranges.push(`${lastName}/${name}`);\n      }\n      lastName = name;\n    }\n\n    if (lastName !== undefined) {\n      ranges.push(`${lastName}/`);\n    }\n\n    console.log(JSON.stringify(ranges));\n    break;\n  }\n  case 'prepare-build':\n    prepareDockerBuild(range);\n    break;\n  case 'build': {\n    prepareDockerBuild(range);\n    // do not encapsulate running Depot. It's a special case which the user should understand.\n    if (buildConfig.platforms) {\n      console.error(EXPLAIN_MULTIPLATFORM);\n      process.exit(1);\n    }\n    bakeTarget('use', values.dry);\n    break;\n  }\n  case 'test':\n    // Always rebuild all test images to keep it simple. With the \"use\" stages\n    // cached, these are pretty fast building doesn't run agd.\n    prepareDockerBuild(range);\n\n    if (values.debug) {\n      assert(values.match, '--debug requires -m');\n      assert(range.proposalsToTest.length === 1, 'too many proposals match');\n      const proposal = range.proposalsToTest[0];\n      console.log(chalk.yellow.bold(`Debugging ${proposal.proposalName}`));\n      bakeTarget(imageNameForProposal(proposal, 'test').target, values.dry);\n      debugTestImage(proposal);\n      // don't bother to delete the test image because there's just one\n      // and the user probably wants to run it again.\n    } else {\n      for (const proposal of range.proposalsToTest) {\n        console.log(chalk.cyan.bold(`Testing ${proposal.proposalName}`));\n        const image = imageNameForProposal(proposal, 'test');\n        bakeTarget(image.target, values.dry);\n        runTestImage({ proposal });\n        // delete the image to reclaim disk space. The next build\n        // will use the build cache.\n        execSync('docker system df', { stdio: 'inherit' });\n        execSync(`docker rmi ${image.name}`, { stdio: 'inherit' });\n        execSync('docker system df', { stdio: 'inherit' });\n      }\n    }\n    break;\n  case 'doctor':\n    runDoctor(range.allProposals);\n    break;\n  default:\n    console.log(USAGE);\n    process.exit(1);\n}\n","import { execSync } from 'node:child_process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { type ProposalInfo } from './proposals.js';\n\nexport type Platform = 'linux/amd64' | 'linux/arm64';\n\nexport type AgoricSyntheticChainConfig = {\n  /**\n   * The agoric-3-proposals tag to build the agoric synthetic chain from.\n   * If `null`, the chain is built from an ag0 genesis.\n   * Defaults to `latest`, which containing all passed proposals\n   */\n  fromTag: string | null;\n  platforms?: Platform[];\n};\n\nconst defaultConfig: AgoricSyntheticChainConfig = {\n  // Tag of the agoric-3 image containing all passed proposals\n  // Must match the Bake file and CI config\n  fromTag: 'latest',\n};\n\nexport function readBuildConfig(root: string): AgoricSyntheticChainConfig {\n  const packageJsonPath = path.join(root, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricSyntheticChain } = JSON.parse(packageJson);\n\n  const config = { ...defaultConfig, ...agoricSyntheticChain };\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  return config;\n}\n\nexport const buildProposalSubmissions = (proposals: ProposalInfo[]) => {\n  for (const proposal of proposals) {\n    if (!('source' in proposal && proposal.source === 'build')) continue;\n\n    console.log(\n      'Refreshing submission for',\n      proposal.proposalIdentifier,\n      proposal.proposalName,\n    );\n    const { buildScript } = proposal;\n    const proposalPath = `proposals/${path}`;\n    const submissionPath = `${proposalPath}/submission`;\n    const relativeBuildScript = path.relative(submissionPath, buildScript);\n\n    execSync(`mkdir -p ${submissionPath}`);\n    // Generate files only in submission path.\n    execSync(`agoric run ${relativeBuildScript}`, {\n      cwd: submissionPath,\n      env: { ...process.env, HOME: '.' },\n    });\n    // find the one file ending in -plan.json\n    // TODO error if there is more than one\n    const planPath = execSync(\n      `find ${submissionPath} -maxdepth 1 -type f -name '*-plan.json'`,\n    )\n      .toString()\n      .trim();\n    const plan = JSON.parse(fs.readFileSync(planPath, 'utf-8'));\n    for (const { fileName } of plan.bundles) {\n      // Copy the bundle into the submission path.\n      execSync(`cp ${fileName} ${submissionPath}`);\n      // Set timestamp to zero to avoid invalidating the build cache\n      execSync(`touch -t 197001010000 ${submissionPath}/${fileName}`);\n    }\n  }\n};\n\n/**\n * Bake images using the docker buildx bake command.\n *\n * Note this uses `--load` which pushes the completed images to the builder,\n * consuming 2-3 GB per image.\n * @see {@link https://docs.docker.com/engine/reference/commandline/buildx_build/#load}\n *\n * @param target - The image or group target\n * @param [dry] - Whether to skip building and just print the build config.\n */\nexport const bakeTarget = (target: string, dry = false) => {\n  const cmd = [\n    'docker',\n    'buildx',\n    'bake',\n    `--load \"${target}\"`,\n    dry && '--print',\n    process.env.DOCKER_PROGRESS_FORMAT &&\n      `--progress \"${process.env.DOCKER_PROGRESS_FORMAT}\"`,\n  ]\n    .filter(Boolean)\n    .join(' ');\n  console.log(cmd);\n  execSync(cmd, { stdio: 'inherit' });\n};\n","import fs from 'node:fs';\nimport { type Platform } from './build.js';\nimport {\n  encodeUpgradeInfo,\n  imageNameForProposal,\n  isPassed,\n  ProposalRange,\n  type CoreEvalPackage,\n  type ParameterChangePackage,\n  type ProposalInfo,\n  type SoftwareUpgradePackage,\n} from './proposals.js';\n\n// We need this unstable syntax for the `COPY --exclude` feature.\nconst syntaxPragma = '# syntax=docker/dockerfile:1.7-labs';\n\n/**\n * Templates for Dockerfile stages\n */\nconst stage = {\n  /**\n   * Prepare an upgrade from ag0, start of the chain\n   */\n  PREPARE_ZERO(proposalName: string, to: string) {\n    const agZeroUpgrade = 'agoric-upgrade-7-2';\n    return `\n## START\n# on ${agZeroUpgrade}, with upgrade to ${to}\nFROM ghcr.io/agoric/ag0:${agZeroUpgrade} as prepare-${proposalName}\nENV UPGRADE_TO=${to}\n\n# put env functions into shell environment\nRUN echo '. /usr/src/upgrade-test-scripts/env_setup.sh' >> ~/.bashrc\n\n# copy scripts\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_prepare_zero.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\n# this is the only layer that starts ag0\nRUN /usr/src/upgrade-test-scripts/run_prepare_zero.sh\n`;\n  },\n  /**\n   * Resume from state of an existing image.\n   * Creates a \"use\" stage upon which a PREPARE or EVAL can stack.\n   */\n  RESUME(proposalName: string) {\n    return `\n## RESUME\nFROM ghcr.io/agoric/agoric-3-proposals:use-${proposalName} as use-${proposalName}\n`;\n  },\n\n  /**\n   * Prepare an upgrade handler to run.\n   *\n   * - Submit the software-upgrade proposal for planName and run until upgradeHeight, leaving the state-dir ready for next agd.\n   */\n  PREPARE(\n    {\n      path,\n      planName,\n      proposalName,\n      upgradeInfo,\n      releaseNotes,\n    }: SoftwareUpgradePackage,\n    lastProposal: ProposalInfo,\n  ) {\n    const skipProposalValidation = !releaseNotes;\n    return `\n# PREPARE ${proposalName}\n\n# upgrading to ${planName}\nFROM use-${lastProposal.proposalName} as prepare-${proposalName}\nENV \\\n    UPGRADE_TO=${planName} \\\n    UPGRADE_INFO=${JSON.stringify(encodeUpgradeInfo(upgradeInfo))} \\\n    SKIP_PROPOSAL_VALIDATION=${skipProposalValidation}\n\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_prepare.sh',\n  './upgrade-test-scripts/start_to_to.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nWORKDIR /usr/src/upgrade-test-scripts\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_prepare.sh ${path}\n`;\n  },\n  /**\n   * Execute a prepared upgrade.\n   * - Start agd with the SDK that has the upgradeHandler\n   * - Run any core-evals associated with the proposal (either the ones specified in prepare, or straight from the proposal)\n   */\n  EXECUTE({\n    path,\n    planName,\n    proposalName,\n    sdkImageTag,\n  }: SoftwareUpgradePackage) {\n    return `\n# EXECUTE ${proposalName}\nFROM ghcr.io/agoric/agoric-sdk:${sdkImageTag} as execute-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# base is a fresh sdk image so set up the proposal and its dependencies\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_execute.sh',\n  './upgrade-test-scripts/start_to_to.sh',\n  './upgrade-test-scripts/install_deps.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --from=prepare-${proposalName} /root/.agoric /root/.agoric\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_execute.sh ${planName}\n`;\n  },\n  /**\n   * Run a core-eval proposal\n   * - Run the core-eval scripts from the proposal. They are only guaranteed to have started, not completed.\n   */\n  EVAL(\n    { path, proposalName }: CoreEvalPackage | ParameterChangePackage,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# EVAL ${proposalName}\nFROM use-${lastProposal.proposalName} as eval-${proposalName}\n\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# First stage of this proposal so install its deps.\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/install_deps.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/*eval*',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_eval.sh ${path}\n`;\n  },\n  /**\n   * Use the proposal\n   *\n   * - Perform any mutations that should be part of chain history\n   */\n  USE({ path, proposalName, type }: ProposalInfo) {\n    const previousStage =\n      type === 'Software Upgrade Proposal' ? 'execute' : 'eval';\n    return `\n# USE ${proposalName}\nFROM ${previousStage}-${proposalName} as use-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/run_use.sh',\n  './upgrade-test-scripts/start_agd.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_use.sh ${path}\nENTRYPOINT ./start_agd.sh\n`;\n  },\n  /**\n   * Generate image than can test the proposal\n   *\n   * - Run with the image of the last \"use\"\n   * - Run tests of the proposal\n   *\n   * Needs to be an image to have access to the SwingSet db. run it with `docker run --rm` to not make the container ephemeral.\n   */\n  TEST({ path, proposalName }: ProposalInfo) {\n    return `\n# TEST ${proposalName}\nFROM use-${proposalName} as test-${proposalName}\n\n# Previous stages copied excluding test files (see COPY above). It would be good\n# to copy only missing files, but there may be none. Fortunately, copying extra\n# does not invalidate other images because nothing depends on this layer.\n${createCopyCommand(\n  ['host', 'node_modules'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/run_test.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT ./run_test.sh ${path}\n`;\n  },\n  /**\n   * The last target in the file, for untargeted `docker build`\n   */\n  LAST(lastProposal: ProposalInfo) {\n    // Assumes the 'use' image is built and tagged.\n    // This isn't necessary for a multi-stage build, but without it CI\n    // rebuilds the last \"use\" image during the \"default\" image step\n    // Some background: https://github.com/moby/moby/issues/34715\n    const useImage = imageNameForProposal(lastProposal, 'use').name;\n    return `\n## LAST\nFROM ${useImage} as latest\n`;\n  },\n};\n\nexport const createCopyCommand = (\n  exclusionList: Array<string>,\n  ...files: Array<string>\n) =>\n  [\n    'COPY',\n    '--link',\n    '--chmod=755',\n    ...exclusionList.map(excluded => `--exclude=${excluded}`),\n    ...files,\n  ].join(' ');\n\nexport function writeBakefileProposals(\n  range: ProposalRange,\n  platforms?: Platform[],\n) {\n  const json = {\n    variable: {\n      PLATFORMS: {\n        default: platforms || null,\n      },\n      PROPOSALS: {\n        default: range.proposals.map(p => p.proposalName),\n      },\n      UPGRADE_PROPOSALS: {\n        default: range.proposals\n          .filter(p => p.type === 'Software Upgrade Proposal')\n          .map(p => p.proposalName),\n      },\n    },\n  };\n  fs.writeFileSync('docker-bake.json', JSON.stringify(json, null, 2));\n}\n\nexport function writeDockerfile(range: ProposalRange) {\n  // Each stage tests something about the left argument and prepare an upgrade to the right side (by passing the proposal and halting the chain.)\n  // The upgrade doesn't happen until the next stage begins executing.\n  const blocks: string[] = [syntaxPragma];\n\n  let previousProposal = range.previousProposal;\n  if (previousProposal) {\n    blocks.push(stage.RESUME(previousProposal.proposalName));\n  }\n  for (const proposal of range.proposals) {\n    // UNTIL region support https://github.com/microsoft/vscode-docker/issues/230\n    blocks.push(\n      `#----------------\\n# ${proposal.proposalName}\\n#----------------`,\n    );\n\n    switch (proposal.type) {\n      case '/agoric.swingset.CoreEvalProposal':\n      case '/cosmos.params.v1beta1.ParameterChangeProposal':\n        blocks.push(stage.EVAL(proposal, previousProposal!));\n        break;\n      case 'Software Upgrade Proposal':\n        if (previousProposal) {\n          blocks.push(stage.PREPARE(proposal, previousProposal));\n        } else {\n          // handle the first proposal of the chain specially\n          blocks.push(\n            stage.PREPARE_ZERO(proposal.proposalName, proposal.planName),\n          );\n        }\n        blocks.push(stage.EXECUTE(proposal));\n        break;\n      default:\n        // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n        // @ts-expect-error exhaustive switch narrowed type to `never`\n        throw new Error(`unsupported proposal type ${proposal.type}`);\n    }\n\n    // The stages must be output in dependency order because if the builder finds a FROM\n    // that it hasn't built yet, it will search for it in the registry. But it won't be there!\n    blocks.push(stage.USE(proposal));\n    blocks.push(stage.TEST(proposal));\n    previousProposal = proposal;\n  }\n\n  if (range.lastProposalIsLatest) {\n    // If one of the proposals is a passed proposal, make the latest one the default entrypoint\n    const lastPassed = range.proposals.findLast(isPassed);\n    if (lastPassed) {\n      blocks.push(stage.LAST(lastPassed));\n    }\n  }\n\n  const contents = blocks.join('\\n');\n  fs.writeFileSync('Dockerfile', contents);\n}\n","import assert from 'node:assert';\nimport fs from 'node:fs';\nimport * as path from 'node:path';\nimport type { DirRd, FileRd } from '../lib/webAsset.js';\nimport type { AgoricSyntheticChainConfig } from './build.js';\n\nexport const repository = 'ghcr.io/agoric/agoric-3-proposals';\n\ntype ProposalCommon = {\n  path: string; // in the proposals directory\n  proposalName: string;\n  proposalIdentifier: string;\n};\n\nexport type ProposalRange = {\n  allProposals: ProposalInfo[];\n  previousProposal?: ProposalInfo;\n  proposals: ProposalInfo[];\n  proposalsToTest: ProposalInfo[];\n  lastProposalIsLatest: boolean;\n};\n\nexport function synthesizePreviousProposal(fromTag: string): ProposalInfo {\n  const proposalName = fromTag.replace(/^use-/, '');\n\n  return {\n    proposalName,\n    proposalIdentifier: proposalName,\n    // XXX these are bogus\n    path: '.',\n    type: '/agoric.swingset.CoreEvalProposal',\n    source: 'subdir',\n  };\n}\n\nexport function getProposalRange(\n  allProposals: ProposalInfo[],\n  { fromTag }: AgoricSyntheticChainConfig,\n  { start, stop, match }: { start: string; stop: string; match?: string },\n): ProposalRange {\n  let failures = '';\n  let sep = '';\n\n  const startIndex = allProposals.findIndex(p => p.proposalName === start);\n  if (start && startIndex < 0) {\n    failures += `${sep}Start proposal \"${start}\" not found`;\n    sep = ', ';\n  }\n\n  const stopIndex = allProposals.findIndex(p => p.proposalName === stop);\n  if (stop && stopIndex < 0) {\n    failures += `${sep}Stop proposal \"${stop}\" not found`;\n    sep = ', ';\n  }\n\n  if (failures) {\n    console.error(`Getting proposal range:`, { start, stop });\n    throw new Error(`Invalid proposal range: ${failures}`);\n  }\n\n  const sliceStart = start ? startIndex : 0;\n  const sliceEnd = stop ? stopIndex : allProposals.length;\n  const someProposals = allProposals.slice(sliceStart, sliceEnd);\n  const proposals = match\n    ? someProposals.filter(p => p.proposalName.includes(match))\n    : someProposals;\n\n  const previousProposal = sliceStart\n    ? allProposals[sliceStart - 1]\n    : fromTag\n      ? synthesizePreviousProposal(fromTag)\n      : undefined;\n\n  if (proposals.length === 0) {\n    failures += `${sep}No proposals found`;\n    sep = ', ';\n  }\n\n  if (\n    previousProposal &&\n    proposals.some(p => p.proposalName === previousProposal.proposalName)\n  ) {\n    throw Error(\n      `Unexpected previous proposal ${previousProposal.proposalName}`,\n    );\n  }\n\n  const proposalsToTest = proposals;\n  const lastProposalIsLatest = sliceEnd === allProposals.length;\n\n  if (failures) {\n    console.error(\n      `Considering proposals: ${proposals.map(p => p.proposalName).join(', ')}`,\n    );\n    throw new Error(`Invalid proposal range: ${failures}`);\n  }\n\n  return {\n    allProposals,\n    previousProposal,\n    proposals,\n    proposalsToTest,\n    lastProposalIsLatest,\n  };\n}\n\nexport type SoftwareUpgradePackage = ProposalCommon & {\n  sdkImageTag: string;\n  planName: string;\n  upgradeInfo?: unknown;\n  /**\n   * The URL for the notes of the release.\n   * `false` for unreleased upgrades for which `upgradeInfo` cannot be validated\n   */\n  releaseNotes: string | false;\n  type: 'Software Upgrade Proposal';\n};\n\nexport type CoreEvalPackage = ProposalCommon & {\n  type: '/agoric.swingset.CoreEvalProposal';\n} & (\n    | { source: 'build'; buildScript: string }\n    | {\n        // default behavior\n        source: 'subdir';\n      }\n  );\n\nexport type ParameterChangePackage = ProposalCommon & {\n  type: '/cosmos.params.v1beta1.ParameterChangeProposal';\n};\n\nexport type ProposalInfo =\n  | SoftwareUpgradePackage\n  | CoreEvalPackage\n  | ParameterChangePackage;\n\n/** @deprecated use readInfoOf */\nfunction readInfo(proposalPath: string): ProposalInfo {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = path.join('proposals', proposalPath, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nasync function readInfoOf(\n  proposals: FileRd,\n  proposalPath: string,\n): Promise<ProposalInfo> {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = proposals.join(proposalPath, 'package.json');\n  const packageJson = await packageJsonPath.readText();\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nexport function encodeUpgradeInfo(upgradeInfo: unknown): string {\n  return upgradeInfo != null ? JSON.stringify(upgradeInfo) : '';\n}\n\nexport function compareProposalDirNames(a: string, b: string): -1 | 0 | 1 {\n  // Proposal directories should be named like \"$position:$name\", and we expect\n  // $position to be numeric but this logic tolerates deviation.\n  // Compare by position numerically, then by position lexicographically (by\n  // code unit for simplicity), then by the full name.\n  const [_a, aPos, aNumericPos] = a.match(/^(([0-9]+)|[^:]*):.*/) || [];\n  const [_b, bPos, bNumericPos] = b.match(/^(([0-9]+)|[^:]*):.*/) || [];\n  if (aNumericPos && !bNumericPos) return -1;\n  if (!aNumericPos && bNumericPos) return 1;\n  if (aNumericPos && bNumericPos) {\n    if (Number(aNumericPos) < Number(bNumericPos)) return -1;\n    if (Number(aNumericPos) > Number(bNumericPos)) return 1;\n  }\n  if (aPos !== undefined && bPos === undefined) return -1;\n  if (aPos === undefined && bPos !== undefined) return 1;\n  if (aPos !== undefined && bPos !== undefined) {\n    if (aPos < bPos) return -1;\n    if (aPos > bPos) return 1;\n  }\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/** @deprecated use readProposalsOf */\nexport function readProposals(proposalsParent: string): ProposalInfo[] {\n  const proposalsDir = path.join(proposalsParent, 'proposals');\n  const proposalPaths = fs\n    .readdirSync(proposalsDir, { withFileTypes: true })\n    .filter(dirent => {\n      assert('path' in dirent, 'missing path in dirent added in Node 18.17');\n      const hasPackageJson = fs.existsSync(\n        path.join(dirent.path, dirent.name, 'package.json'),\n      );\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          dirent.name,\n        );\n      }\n      return hasPackageJson;\n    })\n    .map(dirent => dirent.name)\n    .sort(compareProposalDirNames);\n  return proposalPaths.map(readInfo);\n}\n\nexport async function readProposalsOf(\n  proposalsParent: DirRd,\n): Promise<ProposalInfo[]> {\n  const proposalsDir = proposalsParent.join('proposals');\n  const candidates = await proposalsDir.readdir();\n  const proposalPaths = candidates\n    .filter(dirent => {\n      const hasPackageJson = dirent.join('package.json').existsSync();\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          `${dirent}`,\n        );\n      }\n      return hasPackageJson;\n    })\n    .sort((a, b) => compareProposalDirNames(a.basename(), b.basename()));\n  return Promise.all(\n    proposalPaths.map(p => readInfoOf(proposalsDir.asFileRd(), p.basename())),\n  );\n}\n\nexport function imageNameForProposal(\n  proposal: Pick<ProposalCommon, 'proposalName'>,\n  stage: 'test' | 'use',\n) {\n  const target = `${stage}-${proposal.proposalName}`;\n  return { name: `${repository}:${target}`, target };\n}\n\nexport function isPassed(proposal: ProposalInfo) {\n  return proposal.proposalIdentifier.match(/^\\d/);\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { glob } from 'glob';\nimport { type ProposalInfo } from './proposals.js';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\n\nconst checkShellScripts = (proposalPath: string) => {\n  const shellScripts = glob.sync('*.sh', { cwd: proposalPath });\n  for (const script of shellScripts) {\n    const scriptPath = path.join(proposalPath, script);\n    const content = fs.readFileSync(scriptPath, 'utf-8');\n    assert(\n      content.includes('set -e'),\n      `${script} must include \"set -e\"; otherwise lines may fail silently. \"set -euo pipefail\" is recommended.`,\n    );\n  }\n};\n\nconst fixupProposal = (proposal: ProposalInfo) => {\n  const proposalPath = path.join('proposals', proposal.path);\n  checkShellScripts(proposalPath);\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join(proposalPath, 'package.json'), 'utf-8'),\n  );\n  if (packageJson.dependencies || packageJson.devDependencies) {\n    assert(\n      packageJson.packageManager,\n      'missing packageManager in package.json',\n    );\n    if (packageJson.packageManager.includes('yarn')) {\n      console.log('found \"yarn\" packageManager, processing...');\n      // ensure it has its own yarn.lock, to indicate this is a separate project\n      const yarnLock = path.join(proposalPath, 'yarn.lock');\n      if (!fs.existsSync(yarnLock)) {\n        console.log(`creating empty ${yarnLock}`);\n        fs.writeFileSync(yarnLock, '');\n      }\n\n      // default to node-modules linker\n      // (The pnpm linker has little benefit because hard links can't cross\n      // volumes so each Docker layer will have copies of the deps anyway. The\n      // pnp linker might work but requires other changes.)\n      const yarnRc = path.join(proposalPath, '.yarnrc.yml');\n      if (!fs.existsSync(yarnRc)) {\n        console.log(`creating ${yarnRc} with node-modules linker`);\n        fs.writeFileSync(yarnRc, 'nodeLinker: node-modules\\n');\n      }\n\n      // refresh install\n      execSync('rm -rf node_modules', { cwd: proposalPath });\n      // skip builds to prevent local native artifacts from accidentally being\n      // copied into the Docker image. The local environment never runs the\n      // proposal so the only artifacts that are necessary are the files that\n      // the JS IDE expects (e.g. for module resolution, types).\n      execSync('yarn install --mode=skip-build', { cwd: proposalPath });\n    }\n  }\n};\n\nconst checkYarn = () => {\n  const yarnpath = execSync('which yarn', {\n    encoding: 'utf-8',\n  });\n  console.log(yarnpath);\n\n  if (yarnpath.includes('homebrew')) {\n    // Homebrew's yarn install overrides Node's corepack install\n    console.error(\n      'Homebrew installs of yarn are not supported. Use corepack instead:',\n    );\n    console.error('  brew uninstall yarn');\n    process.exit(1);\n  }\n\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join('package.json'), 'utf-8'),\n  );\n  const expectedYarnVersion =\n    packageJson.packageManager.match(/yarn@(\\d+\\.\\d+\\.\\d+)/)[1];\n  const actualYarnVersion = execSync('yarn --version', {\n    encoding: 'utf-8',\n  }).trim();\n  if (actualYarnVersion !== expectedYarnVersion) {\n    console.log({ actualYarnVersion, expectedYarnVersion });\n    console.error(\n      `Corepack specifies yarn version ${expectedYarnVersion} but the path has ${actualYarnVersion}`,\n    );\n    console.error('Find a way to remove the global yarn before proceeding.');\n    process.exit(1);\n  }\n};\n\nexport const runDoctor = (proposals: ProposalInfo[]) => {\n  console.log('Running doctor...');\n\n  console.log('enabling corepack');\n  execSync('corepack enable', { stdio: 'inherit' });\n\n  checkYarn();\n\n  console.log('Verifying the CLI runs and create the Dockerfiles');\n  execSync('yarn synthetic-chain prepare-build', { stdio: 'inherit' });\n\n  console.log(\n    'Verifying the install Docker Buildx is new enough to handle the Bake file',\n  );\n  try {\n    execSync('docker buildx bake --print');\n  } catch (e: any) {\n    console.error('Docker Buildx version is too old');\n    execSync('docker buildx version', { stdio: 'inherit' });\n    console.log(\n      'It must be at least 0.11. https://docs.docker.com/build/release-notes/#0110',\n    );\n    process.exit(1);\n  }\n\n  for (const proposal of proposals) {\n    try {\n      console.log('\\nchecking proposal', proposal.proposalName, '...');\n      fixupProposal(proposal);\n      console.log('passed');\n    } catch (e: any) {\n      console.error('message' in e ? e.message : e);\n      console.log('PROBLEM ^^^  After correcting, run doctor again.');\n    }\n  }\n};\n","import { spawnSync, type SpawnSyncReturns } from 'node:child_process';\nimport { existsSync, realpathSync } from 'node:fs';\nimport { resolve as resolvePath } from 'node:path';\nimport { fileSync as createTempFile } from 'tmp';\nimport { type ProposalInfo, imageNameForProposal } from './proposals.js';\n\nconst createMessageFile = (proposal: ProposalInfo) =>\n  createTempFile({ prefix: proposal.proposalName });\n\nconst executeHostScriptIfPresent = (\n  extraEnv: typeof process.env,\n  proposal: ProposalInfo,\n  scriptName: string,\n) => {\n  const scriptPath = `${resolvePath('.')}/proposals/${proposal.path}/host/${scriptName}`;\n  if (existsSync(scriptPath)) {\n    console.log(\n      `Running script ${scriptName} for proposal ${proposal.proposalName}`,\n    );\n    spawnSync(scriptPath, {\n      env: { ...process.env, ...extraEnv },\n      stdio: 'inherit',\n    });\n  }\n};\n\n/**\n * Used to propagate a SLOGFILE environment variable into Docker containers.\n * Any file identified by such a variable will be created if it does not already\n * exist.\n *\n * @param {typeof process.env} env environment variables\n * @returns {string[]} docker run options\n */\nconst propagateSlogfile = env => {\n  const { SLOGFILE } = env;\n  if (!SLOGFILE) return [];\n\n  spawnSync('touch', [SLOGFILE]);\n\n  return [\n    '--env',\n    `SLOGFILE=${SLOGFILE}`,\n    '--volume',\n    `${SLOGFILE}:${realpathSync(SLOGFILE)}`,\n  ];\n};\n\nexport const runTestImage = ({\n  extraDockerArgs = [],\n  proposal,\n  removeContainerOnExit = true,\n}: {\n  extraDockerArgs?: Array<string>;\n  proposal: ProposalInfo;\n  removeContainerOnExit?: boolean;\n}) => {\n  const { name: messageFilePath, removeCallback: removeTempFileCallback } =\n    createMessageFile(proposal);\n\n  const containerFilePath = '/root/message-file-path';\n  const { name: imageName } = imageNameForProposal(proposal, 'test');\n\n  let runResult: SpawnSyncReturns<Buffer>;\n\n  try {\n    executeHostScriptIfPresent(\n      {\n        MESSAGE_FILE_PATH: messageFilePath,\n      },\n      proposal,\n      'before-test-run.sh',\n    );\n\n    console.log(`Running test image for proposal ${proposal.proposalName}`);\n    runResult = spawnSync(\n      'docker',\n      [\n        'run',\n        '--env',\n        `MESSAGE_FILE_PATH=${containerFilePath}`,\n        '--mount',\n        `source=${messageFilePath},target=${containerFilePath},type=bind`,\n        ...(removeContainerOnExit ? ['--rm'] : []),\n        ...propagateSlogfile(process.env),\n        ...extraDockerArgs,\n        imageName,\n      ],\n      { stdio: 'inherit' },\n    );\n\n    executeHostScriptIfPresent(\n      {\n        MESSAGE_FILE_PATH: messageFilePath,\n      },\n      proposal,\n      'after-test-run.sh',\n    );\n  } finally {\n    removeTempFileCallback();\n  }\n\n  if (runResult.status !== 0) {\n    console.error(\n      `Run of ${imageName} failed with exit code ${runResult.status}`,\n    );\n    throw new Error(`Run of ${imageName} failed`);\n  }\n};\n\nexport const debugTestImage = (proposal: ProposalInfo) => {\n  const { name } = imageNameForProposal(proposal, 'test');\n  console.log(\n    `\n  Starting chain of test image for proposal ${proposal.proposalName}\n\n  To get an interactive shell in the container, use an IDE feature like \"Attach Shell\" or this command:'\n\n    docker exec -ti $(docker ps -q -f ancestor=${name}) bash\n\n  And within that shell:\n    cd /usr/src/proposals/${proposal.path} && ./test.sh\n\n  To edit files you can use terminal tools like vim, or mount the container in your IDE.\n  In VS Code the command is:\n    Dev Containers: Attach to Running Container...\n  `,\n  );\n  return runTestImage({\n    extraDockerArgs: [\n      '--entrypoint',\n      '/usr/src/upgrade-test-scripts/start_agd.sh',\n      '--interactive',\n      '--publish',\n      '1317:1317',\n      '--publish',\n      '9090:9090',\n      '--publish',\n      '26657:26657',\n      '--tty',\n    ],\n    proposal,\n    removeContainerOnExit: false,\n  });\n};\n"],"mappings":"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","names":["assert","execSync","path","root","cmd","fs","fs","path","fs","stage","path","range","fs","fs","path","assert","execSync","path","range","execSync","assert"]}
\ No newline at end of file
+{"version":3,"sources":["../../src/cli/cli.ts","../../src/cli/build.ts","../../src/cli/dockerfileGen.ts","../../src/cli/proposals.ts","../../src/cli/doctor.ts","../../src/cli/run.ts"],"sourcesContent":["#!/usr/bin/env -S node --import ts-blank-space/register\n/**\n * @file CLI entrypoint, transpiled during build so Node is the env to run it in\n */\nimport chalk from 'chalk';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\nimport path from 'node:path';\nimport { parseArgs } from 'node:util';\nimport {\n  bakeTarget,\n  buildProposalSubmissions,\n  readBuildConfig,\n} from './build.js';\nimport { writeBakefileProposals, writeDockerfile } from './dockerfileGen.js';\nimport { runDoctor } from './doctor.js';\nimport {\n  imageNameForProposal,\n  readProposals,\n  getProposalRange,\n  type ProposalRange,\n} from './proposals.js';\nimport { debugTestImage, runTestImage } from './run.js';\n\nconst root = path.resolve('.');\nconst buildConfig = readBuildConfig(root);\n\nconst { positionals, values } = parseArgs({\n  options: {\n    all: { type: 'boolean', default: false },\n    match: { short: 'm', type: 'string' },\n    dry: { type: 'boolean' },\n    debug: { type: 'boolean' },\n    rebuild: { type: 'boolean', default: false },\n    'no-push': { type: 'boolean', default: false },\n    start: { type: 'string', default: '' },\n    stop: { type: 'string', default: '' },\n  },\n  allowPositionals: true,\n});\n\nconst range = getProposalRange(readProposals(root), buildConfig, values);\n\nconst [cmd] = positionals;\n\n// TODO consider a lib like Commander for auto-gen help\nconst USAGE = `USAGE:\nprepare-build   - generate Docker build configs\n\nmake-ranges     - split proposals into required ranges\n  [--rebuild]   - rebuild all the proposals\n  [--no-push]   - error if any images would need to be pushed\n\nbuild           - build the synthetic-chain \"use\" images\n  [--dry]       - print the config without building images\n\ntest            - build the \"test\" images and run them\n                  respecting any SLOGFILE environment variable\n                  https://github.com/Agoric/agoric-sdk/blob/master/docs/env.md#slogfile\n  [-m <name>]   - target a particular proposal by substring match\n    [--debug]   - run containers with interactive TTY and port mapping\n  [--dry]       - print the config without building images\n\ndoctor          - diagnostics and quick fixes\n`;\n\nconst EXPLAIN_MULTIPLATFORM = `\nERROR: docker exporter does not currently support exporting manifest lists\n\nMultiple platforms are configured but Docker does not support multiplatform in one builder.\nUntil https://github.com/docker/roadmap/issues/371, attempting it will error as above.\n\nInstead use a builder that supports multiplatform such as depot.dev.\n`;\n\n/**\n * Put into places files that building depends upon.\n */\nconst prepareDockerBuild = (range: ProposalRange) => {\n  const cliPath = new URL(import.meta.url).pathname;\n  const publicDir = path.resolve(cliPath, '..', '..');\n  // copy and generate files of the build context that aren't in the build contents\n  execSync(`cp -r ${path.resolve(publicDir, 'docker-bake.hcl')} .`);\n  writeDockerfile(range);\n  writeBakefileProposals(range, buildConfig.platforms);\n  // copy and generate files to include in the build\n  execSync(`cp -r ${path.resolve(publicDir, 'upgrade-test-scripts')} .`);\n  buildProposalSubmissions(range.proposals);\n  // set timestamp of build content to zero to avoid invalidating the build cache\n  // (change in contents will still invalidate)\n  execSync(\n    'find upgrade-test-scripts -type f -exec touch -t 197001010000 {} +',\n  );\n};\n\nswitch (cmd) {\n  case 'make-ranges': {\n    const { all, rebuild, 'no-push': noPush } = values;\n    const ranges: string[] = [];\n    let lastName: string | undefined;\n    let rebuildRest = rebuild;\n    const someProposals = range.proposals;\n    const lastUpgrade = range.proposals.findLastIndex(\n      p => p.type === 'Software Upgrade Proposal',\n    );\n    const tail = lastUpgrade < 0 ? 0 : lastUpgrade;\n    for (let i = 0; i < someProposals.length; i++) {\n      const proposal = someProposals[i];\n      const name = proposal.proposalName;\n      if (!rebuildRest) {\n        const image = imageNameForProposal(proposal, 'use');\n        if (\n          i < tail &&\n          (all || proposal.type === 'Software Upgrade Proposal')\n        ) {\n          console.warn(\n            `[${i + 1}/${someProposals.length}] Checking ${image.name}...`,\n          );\n          try {\n            execSync(`docker manifest inspect ${JSON.stringify(image.name)}`, {\n              stdio: 'ignore',\n            });\n            console.warn(`Skipping ${name} because it is already pushed`);\n            lastName = name;\n            continue;\n          } catch (e) {}\n        }\n        if (i >= tail || !noPush) {\n          console.warn(`Rebuilding ${name} and the rest...`);\n          rebuildRest = true;\n        } else if (noPush) {\n          console.error(`${name} not found, needs to be pushed`);\n          process.exit(1);\n        }\n      }\n\n      if (lastName !== undefined) {\n        ranges.push(`${lastName}/${name}`);\n      }\n      lastName = name;\n    }\n\n    if (lastName !== undefined) {\n      ranges.push(`${lastName}/`);\n    }\n\n    console.log(JSON.stringify(ranges));\n    break;\n  }\n  case 'prepare-build':\n    prepareDockerBuild(range);\n    break;\n  case 'build': {\n    prepareDockerBuild(range);\n    // do not encapsulate running Depot. It's a special case which the user should understand.\n    if (buildConfig.platforms) {\n      console.error(EXPLAIN_MULTIPLATFORM);\n      process.exit(1);\n    }\n    bakeTarget('use', values.dry);\n    break;\n  }\n  case 'test':\n    // Always rebuild all test images to keep it simple. With the \"use\" stages\n    // cached, these are pretty fast building doesn't run agd.\n    prepareDockerBuild(range);\n\n    if (values.debug) {\n      assert(values.match, '--debug requires -m');\n      assert(range.proposalsToTest.length === 1, 'too many proposals match');\n      const proposal = range.proposalsToTest[0];\n      console.log(chalk.yellow.bold(`Debugging ${proposal.proposalName}`));\n      bakeTarget(imageNameForProposal(proposal, 'test').target, values.dry);\n      debugTestImage(proposal);\n      // don't bother to delete the test image because there's just one\n      // and the user probably wants to run it again.\n    } else {\n      for (const proposal of range.proposalsToTest) {\n        console.log(chalk.cyan.bold(`Testing ${proposal.proposalName}`));\n        const image = imageNameForProposal(proposal, 'test');\n        bakeTarget(image.target, values.dry);\n        runTestImage({ proposal });\n        // delete the image to reclaim disk space. The next build\n        // will use the build cache.\n        if (!values.dry) {\n          execSync('docker system df', { stdio: 'inherit' });\n          execSync(`docker rmi ${image.name}`, { stdio: 'inherit' });\n          execSync('docker system df', { stdio: 'inherit' });\n        }\n      }\n    }\n    break;\n  case 'doctor':\n    runDoctor(range.allProposals);\n    break;\n  default:\n    console.log(USAGE);\n    process.exit(1);\n}\n","import { execSync } from 'node:child_process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { type ProposalInfo } from './proposals.js';\n\nexport type Platform = 'linux/amd64' | 'linux/arm64';\n\nexport type AgoricSyntheticChainConfig = {\n  /**\n   * The agoric-3-proposals tag to build the agoric synthetic chain from.\n   * If `null`, the chain is built from an ag0 genesis.\n   * Defaults to `latest`, which containing all passed proposals\n   */\n  fromTag: string | null;\n  platforms?: Platform[];\n};\n\nconst defaultConfig: AgoricSyntheticChainConfig = {\n  // Tag of the agoric-3 image containing all passed proposals\n  // Must match the Bake file and CI config\n  fromTag: 'latest',\n};\n\nexport function readBuildConfig(root: string): AgoricSyntheticChainConfig {\n  const packageJsonPath = path.join(root, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricSyntheticChain } = JSON.parse(packageJson);\n\n  const config = { ...defaultConfig, ...agoricSyntheticChain };\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  return config;\n}\n\nexport const buildProposalSubmissions = (proposals: ProposalInfo[]) => {\n  for (const proposal of proposals) {\n    if (!('source' in proposal && proposal.source === 'build')) continue;\n\n    console.log(\n      'Refreshing submission for',\n      proposal.proposalIdentifier,\n      proposal.proposalName,\n    );\n    const { buildScript } = proposal;\n    const proposalPath = `proposals/${path}`;\n    const submissionPath = `${proposalPath}/submission`;\n    const relativeBuildScript = path.relative(submissionPath, buildScript);\n\n    execSync(`mkdir -p ${submissionPath}`);\n    // Generate files only in submission path.\n    execSync(`agoric run ${relativeBuildScript}`, {\n      cwd: submissionPath,\n      env: { ...process.env, HOME: '.' },\n    });\n    // find the one file ending in -plan.json\n    // TODO error if there is more than one\n    const planPath = execSync(\n      `find ${submissionPath} -maxdepth 1 -type f -name '*-plan.json'`,\n    )\n      .toString()\n      .trim();\n    const plan = JSON.parse(fs.readFileSync(planPath, 'utf-8'));\n    for (const { fileName } of plan.bundles) {\n      // Copy the bundle into the submission path.\n      execSync(`cp ${fileName} ${submissionPath}`);\n      // Set timestamp to zero to avoid invalidating the build cache\n      execSync(`touch -t 197001010000 ${submissionPath}/${fileName}`);\n    }\n  }\n};\n\n/**\n * Bake images using the docker buildx bake command.\n *\n * Note this uses `--load` which pushes the completed images to the builder,\n * consuming 2-3 GB per image.\n * @see {@link https://docs.docker.com/engine/reference/commandline/buildx_build/#load}\n *\n * @param target - The image or group target\n * @param [dry] - Whether to skip building and just print the build config.\n */\nexport const bakeTarget = (target: string, dry = false) => {\n  const cmd = [\n    'docker',\n    'buildx',\n    'bake',\n    `--load \"${target}\"`,\n    dry && '--print',\n    process.env.DOCKER_PROGRESS_FORMAT &&\n      `--progress \"${process.env.DOCKER_PROGRESS_FORMAT}\"`,\n  ]\n    .filter(Boolean)\n    .join(' ');\n  console.log(cmd);\n  execSync(cmd, { stdio: 'inherit' });\n};\n","import fs from 'node:fs';\nimport { type Platform } from './build.js';\nimport {\n  encodeUpgradeInfo,\n  imageNameForProposal,\n  isPassed,\n  ProposalRange,\n  type CoreEvalPackage,\n  type ParameterChangePackage,\n  type ProposalInfo,\n  type SoftwareUpgradePackage,\n} from './proposals.js';\n\n// We need this unstable syntax for the `COPY --exclude` feature.\nconst syntaxPragma = '# syntax=docker/dockerfile:1.7-labs';\n\n/**\n * Templates for Dockerfile stages\n */\nconst stage = {\n  /**\n   * Prepare an upgrade from ag0, start of the chain\n   */\n  PREPARE_ZERO(proposalName: string, to: string) {\n    const agZeroUpgrade = 'agoric-upgrade-7-2';\n    return `\n## START\n# on ${agZeroUpgrade}, with upgrade to ${to}\nFROM ghcr.io/agoric/ag0:${agZeroUpgrade} as prepare-${proposalName}\nENV UPGRADE_TO=${to}\n\n# put env functions into shell environment\nRUN echo '. /usr/src/upgrade-test-scripts/env_setup.sh' >> ~/.bashrc\n\n# copy scripts\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_prepare_zero.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\n# this is the only layer that starts ag0\nRUN /usr/src/upgrade-test-scripts/run_prepare_zero.sh\n`;\n  },\n  /**\n   * Resume from state of an existing image.\n   * Creates a \"use\" stage upon which a PREPARE or EVAL can stack.\n   */\n  RESUME(proposalName: string) {\n    return `\n## RESUME\nFROM ghcr.io/agoric/agoric-3-proposals:use-${proposalName} as use-${proposalName}\n`;\n  },\n\n  /**\n   * Prepare an upgrade handler to run.\n   *\n   * - Submit the software-upgrade proposal for planName and run until upgradeHeight, leaving the state-dir ready for next agd.\n   */\n  PREPARE(\n    {\n      path,\n      planName,\n      proposalName,\n      upgradeInfo,\n      releaseNotes,\n    }: SoftwareUpgradePackage,\n    lastProposal: ProposalInfo,\n  ) {\n    const skipProposalValidation = !releaseNotes;\n    return `\n# PREPARE ${proposalName}\n\n# upgrading to ${planName}\nFROM use-${lastProposal.proposalName} as prepare-${proposalName}\nENV \\\n    UPGRADE_TO=${planName} \\\n    UPGRADE_INFO=${JSON.stringify(encodeUpgradeInfo(upgradeInfo))} \\\n    SKIP_PROPOSAL_VALIDATION=${skipProposalValidation}\n\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_prepare.sh',\n  './upgrade-test-scripts/start_to_to.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nWORKDIR /usr/src/upgrade-test-scripts\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_prepare.sh ${path}\n`;\n  },\n  /**\n   * Execute a prepared upgrade.\n   * - Start agd with the SDK that has the upgradeHandler\n   * - Run any core-evals associated with the proposal (either the ones specified in prepare, or straight from the proposal)\n   */\n  EXECUTE({\n    path,\n    planName,\n    proposalName,\n    sdkImageTag,\n  }: SoftwareUpgradePackage) {\n    return `\n# EXECUTE ${proposalName}\nFROM ghcr.io/agoric/agoric-sdk:${sdkImageTag} as execute-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# base is a fresh sdk image so set up the proposal and its dependencies\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/env_setup.sh',\n  './upgrade-test-scripts/run_execute.sh',\n  './upgrade-test-scripts/start_to_to.sh',\n  './upgrade-test-scripts/install_deps.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --from=prepare-${proposalName} /root/.agoric /root/.agoric\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_execute.sh ${planName}\n`;\n  },\n  /**\n   * Run a core-eval proposal\n   * - Run the core-eval scripts from the proposal. They are only guaranteed to have started, not completed.\n   */\n  EVAL(\n    { path, proposalName }: CoreEvalPackage | ParameterChangePackage,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# EVAL ${proposalName}\nFROM use-${lastProposal.proposalName} as eval-${proposalName}\n\n${createCopyCommand(\n  ['host', 'node_modules', 'test', 'test.sh'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# First stage of this proposal so install its deps.\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/install_deps.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/*eval*',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_eval.sh ${path}\n`;\n  },\n  /**\n   * Use the proposal\n   *\n   * - Perform any mutations that should be part of chain history\n   */\n  USE({ path, proposalName, type }: ProposalInfo) {\n    const previousStage =\n      type === 'Software Upgrade Proposal' ? 'execute' : 'eval';\n    return `\n# USE ${proposalName}\nFROM ${previousStage}-${proposalName} as use-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/run_use.sh',\n  './upgrade-test-scripts/start_agd.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_use.sh ${path}\nENTRYPOINT ./start_agd.sh\n`;\n  },\n  /**\n   * Generate image than can test the proposal\n   *\n   * - Run with the image of the last \"use\"\n   * - Run tests of the proposal\n   *\n   * Needs to be an image to have access to the SwingSet db. run it with `docker run --rm` to not make the container ephemeral.\n   */\n  TEST({ path, proposalName }: ProposalInfo) {\n    return `\n# TEST ${proposalName}\nFROM use-${proposalName} as test-${proposalName}\n\n# Previous stages copied excluding test files (see COPY above). It would be good\n# to copy only missing files, but there may be none. Fortunately, copying extra\n# does not invalidate other images because nothing depends on this layer.\n${createCopyCommand(\n  ['host', 'node_modules'],\n  `./proposals/${path}`,\n  `/usr/src/proposals/${path}`,\n)}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n${createCopyCommand(\n  [],\n  './upgrade-test-scripts/run_test.sh',\n  '/usr/src/upgrade-test-scripts/',\n)}\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT ./run_test.sh ${path}\n`;\n  },\n  /**\n   * The last target in the file, for untargeted `docker build`\n   */\n  LAST(lastProposal: ProposalInfo) {\n    // Assumes the 'use' image is built and tagged.\n    // This isn't necessary for a multi-stage build, but without it CI\n    // rebuilds the last \"use\" image during the \"default\" image step\n    // Some background: https://github.com/moby/moby/issues/34715\n    const useImage = imageNameForProposal(lastProposal, 'use').name;\n    return `\n## LAST\nFROM ${useImage} as latest\n`;\n  },\n};\n\nexport const createCopyCommand = (\n  exclusionList: Array<string>,\n  ...files: Array<string>\n) =>\n  [\n    'COPY',\n    '--link',\n    '--chmod=755',\n    ...exclusionList.map(excluded => `--exclude=${excluded}`),\n    ...files,\n  ].join(' ');\n\nexport function writeBakefileProposals(\n  range: ProposalRange,\n  platforms?: Platform[],\n) {\n  const json = {\n    variable: {\n      PLATFORMS: {\n        default: platforms || null,\n      },\n      PROPOSALS: {\n        default: range.proposals.map(p => p.proposalName),\n      },\n      UPGRADE_PROPOSALS: {\n        default: range.proposals\n          .filter(p => p.type === 'Software Upgrade Proposal')\n          .map(p => p.proposalName),\n      },\n    },\n  };\n  fs.writeFileSync('docker-bake.json', JSON.stringify(json, null, 2));\n}\n\nexport function writeDockerfile(range: ProposalRange) {\n  // Each stage tests something about the left argument and prepare an upgrade to the right side (by passing the proposal and halting the chain.)\n  // The upgrade doesn't happen until the next stage begins executing.\n  const blocks: string[] = [syntaxPragma];\n\n  let previousProposal = range.previousProposal;\n  if (previousProposal) {\n    blocks.push(stage.RESUME(previousProposal.proposalName));\n  }\n  for (const proposal of range.proposals) {\n    // UNTIL region support https://github.com/microsoft/vscode-docker/issues/230\n    blocks.push(\n      `#----------------\\n# ${proposal.proposalName}\\n#----------------`,\n    );\n\n    switch (proposal.type) {\n      case '/agoric.swingset.CoreEvalProposal':\n      case '/cosmos.params.v1beta1.ParameterChangeProposal':\n        blocks.push(stage.EVAL(proposal, previousProposal!));\n        break;\n      case 'Software Upgrade Proposal':\n        if (previousProposal) {\n          blocks.push(stage.PREPARE(proposal, previousProposal));\n        } else {\n          // handle the first proposal of the chain specially\n          blocks.push(\n            stage.PREPARE_ZERO(proposal.proposalName, proposal.planName),\n          );\n        }\n        blocks.push(stage.EXECUTE(proposal));\n        break;\n      default:\n        // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n        // @ts-expect-error exhaustive switch narrowed type to `never`\n        throw new Error(`unsupported proposal type ${proposal.type}`);\n    }\n\n    // The stages must be output in dependency order because if the builder finds a FROM\n    // that it hasn't built yet, it will search for it in the registry. But it won't be there!\n    blocks.push(stage.USE(proposal));\n    blocks.push(stage.TEST(proposal));\n    previousProposal = proposal;\n  }\n\n  if (range.lastProposalIsLatest) {\n    // If one of the proposals is a passed proposal, make the latest one the default entrypoint\n    const lastPassed = range.proposals.findLast(isPassed);\n    if (lastPassed) {\n      blocks.push(stage.LAST(lastPassed));\n    }\n  }\n\n  const contents = blocks.join('\\n');\n  fs.writeFileSync('Dockerfile', contents);\n}\n","import assert from 'node:assert';\nimport fs from 'node:fs';\nimport * as path from 'node:path';\nimport type { DirRd, FileRd } from '../lib/webAsset.js';\nimport type { AgoricSyntheticChainConfig } from './build.js';\n\nexport const repository = 'ghcr.io/agoric/agoric-3-proposals';\n\ntype ProposalCommon = {\n  path: string; // in the proposals directory\n  proposalName: string;\n  proposalIdentifier: string;\n};\n\nexport type ProposalRange = {\n  allProposals: ProposalInfo[];\n  previousProposal?: ProposalInfo;\n  proposals: ProposalInfo[];\n  proposalsToTest: ProposalInfo[];\n  lastProposalIsLatest: boolean;\n};\n\nexport function synthesizePreviousProposal(fromTag: string): ProposalInfo {\n  const proposalName = fromTag.replace(/^use-/, '');\n\n  return {\n    proposalName,\n    proposalIdentifier: proposalName,\n    // XXX these are bogus\n    path: '.',\n    type: '/agoric.swingset.CoreEvalProposal',\n    source: 'subdir',\n  };\n}\n\nexport function getProposalRange(\n  allProposals: ProposalInfo[],\n  { fromTag }: AgoricSyntheticChainConfig,\n  { start, stop, match }: { start: string; stop: string; match?: string },\n): ProposalRange {\n  let failures = '';\n  let sep = '';\n\n  const startIndex = allProposals.findIndex(p => p.proposalName === start);\n  if (start && startIndex < 0) {\n    failures += `${sep}Start proposal \"${start}\" not found`;\n    sep = ', ';\n  }\n\n  const stopIndex = allProposals.findIndex(p => p.proposalName === stop);\n  if (stop && stopIndex < 0) {\n    failures += `${sep}Stop proposal \"${stop}\" not found`;\n    sep = ', ';\n  }\n\n  if (failures) {\n    console.error(`Getting proposal range:`, { start, stop });\n    throw new Error(`Invalid proposal range: ${failures}`);\n  }\n\n  const sliceStart = start ? startIndex : 0;\n  const sliceEnd = stop ? stopIndex : allProposals.length;\n  const someProposals = allProposals.slice(sliceStart, sliceEnd);\n  const proposals = match\n    ? someProposals.filter(p => p.proposalName.includes(match))\n    : someProposals;\n\n  const previousProposal = sliceStart\n    ? allProposals[sliceStart - 1]\n    : fromTag\n      ? synthesizePreviousProposal(fromTag)\n      : undefined;\n\n  if (proposals.length === 0) {\n    failures += `${sep}No proposals found`;\n    sep = ', ';\n  }\n\n  if (\n    previousProposal &&\n    proposals.some(p => p.proposalName === previousProposal.proposalName)\n  ) {\n    throw Error(\n      `Unexpected previous proposal ${previousProposal.proposalName}`,\n    );\n  }\n\n  const proposalsToTest = proposals;\n  const lastProposalIsLatest = sliceEnd === allProposals.length;\n\n  if (failures) {\n    console.error(\n      `Considering proposals: ${proposals.map(p => p.proposalName).join(', ')}`,\n    );\n    throw new Error(`Invalid proposal range: ${failures}`);\n  }\n\n  return {\n    allProposals,\n    previousProposal,\n    proposals,\n    proposalsToTest,\n    lastProposalIsLatest,\n  };\n}\n\nexport type SoftwareUpgradePackage = ProposalCommon & {\n  sdkImageTag: string;\n  planName: string;\n  upgradeInfo?: unknown;\n  /**\n   * The URL for the notes of the release.\n   * `false` for unreleased upgrades for which `upgradeInfo` cannot be validated\n   */\n  releaseNotes: string | false;\n  type: 'Software Upgrade Proposal';\n};\n\nexport type CoreEvalPackage = ProposalCommon & {\n  type: '/agoric.swingset.CoreEvalProposal';\n} & (\n    | { source: 'build'; buildScript: string }\n    | {\n        // default behavior\n        source: 'subdir';\n      }\n  );\n\nexport type ParameterChangePackage = ProposalCommon & {\n  type: '/cosmos.params.v1beta1.ParameterChangeProposal';\n};\n\nexport type ProposalInfo =\n  | SoftwareUpgradePackage\n  | CoreEvalPackage\n  | ParameterChangePackage;\n\n/** @deprecated use readInfoOf */\nfunction readInfo(proposalPath: string): ProposalInfo {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = path.join('proposals', proposalPath, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nasync function readInfoOf(\n  proposals: FileRd,\n  proposalPath: string,\n): Promise<ProposalInfo> {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = proposals.join(proposalPath, 'package.json');\n  const packageJson = await packageJsonPath.readText();\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nexport function encodeUpgradeInfo(upgradeInfo: unknown): string {\n  return upgradeInfo != null ? JSON.stringify(upgradeInfo) : '';\n}\n\nexport function compareProposalDirNames(a: string, b: string): -1 | 0 | 1 {\n  // Proposal directories should be named like \"$position:$name\", and we expect\n  // $position to be numeric but this logic tolerates deviation.\n  // Compare by position numerically, then by position lexicographically (by\n  // code unit for simplicity), then by the full name.\n  const [_a, aPos, aNumericPos] = a.match(/^(([0-9]+)|[^:]*):.*/) || [];\n  const [_b, bPos, bNumericPos] = b.match(/^(([0-9]+)|[^:]*):.*/) || [];\n  if (aNumericPos && !bNumericPos) return -1;\n  if (!aNumericPos && bNumericPos) return 1;\n  if (aNumericPos && bNumericPos) {\n    if (Number(aNumericPos) < Number(bNumericPos)) return -1;\n    if (Number(aNumericPos) > Number(bNumericPos)) return 1;\n  }\n  if (aPos !== undefined && bPos === undefined) return -1;\n  if (aPos === undefined && bPos !== undefined) return 1;\n  if (aPos !== undefined && bPos !== undefined) {\n    if (aPos < bPos) return -1;\n    if (aPos > bPos) return 1;\n  }\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\n/** @deprecated use readProposalsOf */\nexport function readProposals(proposalsParent: string): ProposalInfo[] {\n  const proposalsDir = path.join(proposalsParent, 'proposals');\n  const proposalPaths = fs\n    .readdirSync(proposalsDir, { withFileTypes: true })\n    .filter(dirent => {\n      assert('path' in dirent, 'missing path in dirent added in Node 18.17');\n      const hasPackageJson = fs.existsSync(\n        path.join(dirent.path, dirent.name, 'package.json'),\n      );\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          dirent.name,\n        );\n      }\n      return hasPackageJson;\n    })\n    .map(dirent => dirent.name)\n    .sort(compareProposalDirNames);\n  return proposalPaths.map(readInfo);\n}\n\nexport async function readProposalsOf(\n  proposalsParent: DirRd,\n): Promise<ProposalInfo[]> {\n  const proposalsDir = proposalsParent.join('proposals');\n  const candidates = await proposalsDir.readdir();\n  const proposalPaths = candidates\n    .filter(dirent => {\n      const hasPackageJson = dirent.join('package.json').existsSync();\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          `${dirent}`,\n        );\n      }\n      return hasPackageJson;\n    })\n    .sort((a, b) => compareProposalDirNames(a.basename(), b.basename()));\n  return Promise.all(\n    proposalPaths.map(p => readInfoOf(proposalsDir.asFileRd(), p.basename())),\n  );\n}\n\nexport function imageNameForProposal(\n  proposal: Pick<ProposalCommon, 'proposalName'>,\n  stage: 'test' | 'use',\n) {\n  const target = `${stage}-${proposal.proposalName}`;\n  return { name: `${repository}:${target}`, target };\n}\n\nexport function isPassed(proposal: ProposalInfo) {\n  return proposal.proposalIdentifier.match(/^\\d/);\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { glob } from 'glob';\nimport { type ProposalInfo } from './proposals.js';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\n\nconst checkShellScripts = (proposalPath: string) => {\n  const shellScripts = glob.sync('*.sh', { cwd: proposalPath });\n  for (const script of shellScripts) {\n    const scriptPath = path.join(proposalPath, script);\n    const content = fs.readFileSync(scriptPath, 'utf-8');\n    assert(\n      content.includes('set -e'),\n      `${script} must include \"set -e\"; otherwise lines may fail silently. \"set -euo pipefail\" is recommended.`,\n    );\n  }\n};\n\nconst fixupProposal = (proposal: ProposalInfo) => {\n  const proposalPath = path.join('proposals', proposal.path);\n  checkShellScripts(proposalPath);\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join(proposalPath, 'package.json'), 'utf-8'),\n  );\n  if (packageJson.dependencies || packageJson.devDependencies) {\n    assert(\n      packageJson.packageManager,\n      'missing packageManager in package.json',\n    );\n    if (packageJson.packageManager.includes('yarn')) {\n      console.log('found \"yarn\" packageManager, processing...');\n      // ensure it has its own yarn.lock, to indicate this is a separate project\n      const yarnLock = path.join(proposalPath, 'yarn.lock');\n      if (!fs.existsSync(yarnLock)) {\n        console.log(`creating empty ${yarnLock}`);\n        fs.writeFileSync(yarnLock, '');\n      }\n\n      // default to node-modules linker\n      // (The pnpm linker has little benefit because hard links can't cross\n      // volumes so each Docker layer will have copies of the deps anyway. The\n      // pnp linker might work but requires other changes.)\n      const yarnRc = path.join(proposalPath, '.yarnrc.yml');\n      if (!fs.existsSync(yarnRc)) {\n        console.log(`creating ${yarnRc} with node-modules linker`);\n        fs.writeFileSync(yarnRc, 'nodeLinker: node-modules\\n');\n      }\n\n      // refresh install\n      execSync('rm -rf node_modules', { cwd: proposalPath });\n      // skip builds to prevent local native artifacts from accidentally being\n      // copied into the Docker image. The local environment never runs the\n      // proposal so the only artifacts that are necessary are the files that\n      // the JS IDE expects (e.g. for module resolution, types).\n      execSync('yarn install --mode=skip-build', { cwd: proposalPath });\n    }\n  }\n};\n\nconst checkYarn = () => {\n  const yarnpath = execSync('which yarn', {\n    encoding: 'utf-8',\n  });\n  console.log(yarnpath);\n\n  if (yarnpath.includes('homebrew')) {\n    // Homebrew's yarn install overrides Node's corepack install\n    console.error(\n      'Homebrew installs of yarn are not supported. Use corepack instead:',\n    );\n    console.error('  brew uninstall yarn');\n    process.exit(1);\n  }\n\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join('package.json'), 'utf-8'),\n  );\n  const expectedYarnVersion =\n    packageJson.packageManager.match(/yarn@(\\d+\\.\\d+\\.\\d+)/)[1];\n  const actualYarnVersion = execSync('yarn --version', {\n    encoding: 'utf-8',\n  }).trim();\n  if (actualYarnVersion !== expectedYarnVersion) {\n    console.log({ actualYarnVersion, expectedYarnVersion });\n    console.error(\n      `Corepack specifies yarn version ${expectedYarnVersion} but the path has ${actualYarnVersion}`,\n    );\n    console.error('Find a way to remove the global yarn before proceeding.');\n    process.exit(1);\n  }\n};\n\nexport const runDoctor = (proposals: ProposalInfo[]) => {\n  console.log('Running doctor...');\n\n  console.log('enabling corepack');\n  execSync('corepack enable', { stdio: 'inherit' });\n\n  checkYarn();\n\n  console.log('Verifying the CLI runs and create the Dockerfiles');\n  execSync('yarn synthetic-chain prepare-build', { stdio: 'inherit' });\n\n  console.log(\n    'Verifying the install Docker Buildx is new enough to handle the Bake file',\n  );\n  try {\n    execSync('docker buildx bake --print');\n  } catch (e: any) {\n    console.error('Docker Buildx version is too old');\n    execSync('docker buildx version', { stdio: 'inherit' });\n    console.log(\n      'It must be at least 0.11. https://docs.docker.com/build/release-notes/#0110',\n    );\n    process.exit(1);\n  }\n\n  for (const proposal of proposals) {\n    try {\n      console.log('\\nchecking proposal', proposal.proposalName, '...');\n      fixupProposal(proposal);\n      console.log('passed');\n    } catch (e: any) {\n      console.error('message' in e ? e.message : e);\n      console.log('PROBLEM ^^^  After correcting, run doctor again.');\n    }\n  }\n};\n","import { spawnSync, type SpawnSyncReturns } from 'node:child_process';\nimport { existsSync, realpathSync } from 'node:fs';\nimport { resolve as resolvePath } from 'node:path';\nimport { fileSync as createTempFile } from 'tmp';\nimport { type ProposalInfo, imageNameForProposal } from './proposals.js';\n\nconst createMessageFile = (proposal: ProposalInfo) =>\n  createTempFile({ prefix: proposal.proposalName });\n\nconst executeHostScriptIfPresent = (\n  extraEnv: typeof process.env,\n  proposal: ProposalInfo,\n  scriptName: string,\n) => {\n  const scriptPath = `${resolvePath('.')}/proposals/${proposal.path}/host/${scriptName}`;\n  if (existsSync(scriptPath)) {\n    console.log(\n      `Running script ${scriptName} for proposal ${proposal.proposalName}`,\n    );\n    spawnSync(scriptPath, {\n      env: { ...process.env, ...extraEnv },\n      stdio: 'inherit',\n    });\n  }\n};\n\n/**\n * Used to propagate a SLOGFILE environment variable into Docker containers.\n * Any file identified by such a variable will be created if it does not already\n * exist.\n *\n * @param {typeof process.env} env environment variables\n * @returns {string[]} docker run options\n */\nconst propagateSlogfile = env => {\n  const { SLOGFILE } = env;\n  if (!SLOGFILE) return [];\n\n  spawnSync('touch', [SLOGFILE]);\n\n  return [\n    '--env',\n    `SLOGFILE=${SLOGFILE}`,\n    '--volume',\n    `${SLOGFILE}:${realpathSync(SLOGFILE)}`,\n  ];\n};\n\nexport const runTestImage = ({\n  extraDockerArgs = [],\n  proposal,\n  removeContainerOnExit = true,\n}: {\n  extraDockerArgs?: Array<string>;\n  proposal: ProposalInfo;\n  removeContainerOnExit?: boolean;\n}) => {\n  const { name: messageFilePath, removeCallback: removeTempFileCallback } =\n    createMessageFile(proposal);\n\n  const containerFilePath = '/root/message-file-path';\n  const { name: imageName } = imageNameForProposal(proposal, 'test');\n\n  let runResult: SpawnSyncReturns<Buffer>;\n\n  try {\n    executeHostScriptIfPresent(\n      {\n        MESSAGE_FILE_PATH: messageFilePath,\n      },\n      proposal,\n      'before-test-run.sh',\n    );\n\n    console.log(`Running test image for proposal ${proposal.proposalName}`);\n    runResult = spawnSync(\n      'docker',\n      [\n        'run',\n        '--env',\n        `MESSAGE_FILE_PATH=${containerFilePath}`,\n        '--mount',\n        `source=${messageFilePath},target=${containerFilePath},type=bind`,\n        ...(removeContainerOnExit ? ['--rm'] : []),\n        ...propagateSlogfile(process.env),\n        ...extraDockerArgs,\n        imageName,\n      ],\n      { stdio: 'inherit' },\n    );\n\n    executeHostScriptIfPresent(\n      {\n        MESSAGE_FILE_PATH: messageFilePath,\n      },\n      proposal,\n      'after-test-run.sh',\n    );\n  } finally {\n    removeTempFileCallback();\n  }\n\n  if (runResult.status !== 0) {\n    console.error(\n      `Run of ${imageName} failed with exit code ${runResult.status}`,\n    );\n    throw new Error(`Run of ${imageName} failed`);\n  }\n};\n\nexport const debugTestImage = (proposal: ProposalInfo) => {\n  const { name } = imageNameForProposal(proposal, 'test');\n  console.log(\n    `\n  Starting chain of test image for proposal ${proposal.proposalName}\n\n  To get an interactive shell in the container, use an IDE feature like \"Attach Shell\" or this command:'\n\n    docker exec -ti $(docker ps -q -f ancestor=${name}) bash\n\n  And within that shell:\n    cd /usr/src/proposals/${proposal.path} && ./test.sh\n\n  To edit files you can use terminal tools like vim, or mount the container in your IDE.\n  In VS Code the command is:\n    Dev Containers: Attach to Running Container...\n  `,\n  );\n  return runTestImage({\n    extraDockerArgs: [\n      '--entrypoint',\n      '/usr/src/upgrade-test-scripts/start_agd.sh',\n      '--interactive',\n      '--publish',\n      '1317:1317',\n      '--publish',\n      '9090:9090',\n      '--publish',\n      '26657:26657',\n      '--tty',\n    ],\n    proposal,\n    removeContainerOnExit: false,\n  });\n};\n"],"mappings":"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","names":["assert","execSync","path","root","cmd","fs","fs","path","fs","stage","path","range","fs","fs","path","assert","execSync","path","range","execSync","assert"]}
\ No newline at end of file
diff --git a/dist/lib/index.d.ts b/dist/lib/index.d.ts
index da768611c7ada19ae3b52546b0c934b8a545a322..ea539ec19bc65ee4cb30f62d94f197a05a209f19 100644
--- a/dist/lib/index.d.ts
+++ b/dist/lib/index.d.ts
@@ -196,6 +196,13 @@ declare function getVatDetails(vatName: string): Promise<{
     incarnation: number;
     terminated: boolean;
 }>;
+declare function getVatInfoFromID(vatID: string): Promise<Readonly<{
+    source: () => any;
+    options: () => any;
+    parameters: () => any;
+    currentSpan: () => unknown;
+    terminated: () => any;
+}>>;
 declare function getIncarnation(vatName: string): Promise<number>;
 declare function getDetailsMatchingVats(vatSubstring: string): Promise<{
     vatName: string;
@@ -223,6 +230,7 @@ declare function makeSwingstoreTool(db: better_sqlite3.Database): Readonly<{
     lookupVat: (vatID: string) => Readonly<{
         source: () => any;
         options: () => any;
+        parameters: () => any;
         currentSpan: () => unknown;
         terminated: () => any;
     }>;
@@ -372,4 +380,4 @@ type FileRW = ReturnType<typeof makeFileRW>;
 type DirRW = ReturnType<typeof makeDirRW>;
 type WebCache = ReturnType<typeof makeWebCache>;
 
-export { ATOM_DENOM, BINARY, type BundleInfo, CHAINID, type CoreEvalConfig, type DirRW, type DirRd, type FileRW, type FileRd, GOV1ADDR, GOV2ADDR, GOV3ADDR, HOME, SDK_ROOT, type StaticConfig, type SwingstoreTool, type TextRd, USER1ADDR, VALIDATORADDR, type WebCache, addPreexistingOracles, addUser, adjustVault, agd, agops, agopsInter, agopsLocation, agoric, bundleDetail, bundleSource, bundleSourceLocation, calculateWalletState, checkForOracle, closeVault, createBid, dbTool, ensureISTForInstall, evalBundles, executeCommand, executeOffer, extractStreamCellValue, flags, generateOracleMap, getAuctionCollateral, getContractInfo, getDetailsMatchingVats, getISTBalance, getIncarnation, getInstanceBoardId, getLiveOffers, getPriceQuote, getProvisionPoolMetrics, getQuoteBody, getRoundId, getUser, getVatDetails, getVaultPrices, installBundle, loadedBundleIds, makeAgd, makeDirRW, makeDirRd, makeFileRW, makeFileRd, makeWebCache, makeWebRd, mintIST, mkTemp, newOfferId, openVault, passCoreEvalProposal, proposalBuilder, provisionSmartWallet, pushPrices, queryVstorage, readBundles, registerOraclesForBrand, smallCapsContext, staticConfig, step, submitProposal, txAbbr, voteLatestProposalAndWait, waitForBlock, wellKnownIdentities };
+export { ATOM_DENOM, BINARY, type BundleInfo, CHAINID, type CoreEvalConfig, type DirRW, type DirRd, type FileRW, type FileRd, GOV1ADDR, GOV2ADDR, GOV3ADDR, HOME, SDK_ROOT, type StaticConfig, type SwingstoreTool, type TextRd, USER1ADDR, VALIDATORADDR, type WebCache, addPreexistingOracles, addUser, adjustVault, agd, agops, agopsInter, agopsLocation, agoric, bundleDetail, bundleSource, bundleSourceLocation, calculateWalletState, checkForOracle, closeVault, createBid, dbTool, ensureISTForInstall, evalBundles, executeCommand, executeOffer, extractStreamCellValue, flags, generateOracleMap, getAuctionCollateral, getContractInfo, getDetailsMatchingVats, getISTBalance, getIncarnation, getInstanceBoardId, getLiveOffers, getPriceQuote, getProvisionPoolMetrics, getQuoteBody, getRoundId, getUser, getVatDetails, getVatInfoFromID, getVaultPrices, installBundle, loadedBundleIds, makeAgd, makeDirRW, makeDirRd, makeFileRW, makeFileRd, makeWebCache, makeWebRd, mintIST, mkTemp, newOfferId, openVault, passCoreEvalProposal, proposalBuilder, provisionSmartWallet, pushPrices, queryVstorage, readBundles, registerOraclesForBrand, smallCapsContext, staticConfig, step, submitProposal, txAbbr, voteLatestProposalAndWait, waitForBlock, wellKnownIdentities };
diff --git a/dist/lib/index.js b/dist/lib/index.js
index 45c3d8005228c7db36bd2c62b1959341df4b0308..23f2b54bcbd3f95a54d1072dec5e1acb31e7c33f 100644
--- a/dist/lib/index.js
+++ b/dist/lib/index.js
@@ -1055,6 +1055,7 @@ var makeSwingstoreTool = (db) => {
     return Object.freeze({
       source: () => kvGetJSON(`${vatID}.source`),
       options: () => kvGetJSON(`${vatID}.options`),
+      parameters: () => kvGetJSON(`${vatID}.vatParameters`),
       currentSpan: () => sql.get`select * from transcriptSpans where isCurrent = 1 and vatID = ${vatID}`,
       terminated: () => {
         const t = kvGetSafe("vat.terminated");
@@ -1133,6 +1134,10 @@ var getVatDetails = async (vatName) => {
   const vatID = kStore.findVat(vatName);
   return getVatDetailsFromID(kStore, vatID);
 };
+var getVatInfoFromID = async (vatID) => {
+  const kStore = buildSwingstoreTool();
+  return kStore.lookupVat(vatID);
+};
 var getIncarnation = async (vatName) => {
   const details = await getVatDetails(vatName);
   console.error(JSON.stringify(details));
@@ -1522,6 +1527,7 @@ export {
   getRoundId,
   getUser,
   getVatDetails,
+  getVatInfoFromID,
   getVaultPrices,
   installBundle,
   loadedBundleIds,
diff --git a/dist/lib/index.js.map b/dist/lib/index.js.map
index 82313b2d6d094deb683798146aa9d668268e0fe0..bb721af650df8ddc958dabc6706b3ef4668ba6db 100644
--- a/dist/lib/index.js.map
+++ b/dist/lib/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/lib/agd-lib.ts","../../src/lib/cliHelper.ts","../../src/lib/assert.js","../../src/lib/constants.js","../../src/lib/commonUpgradeHelpers.ts","../../src/lib/core-eval-support.ts","../../src/lib/unmarshal.js","../../src/lib/vstorage.js","../../src/lib/econHelpers.js","../../src/lib/core-eval.ts","../../src/lib/vat-status.js","../../src/lib/logging.ts","../../src/lib/webAsset.js"],"sourcesContent":["import assert from 'node:assert';\nimport type { ExecFileSyncOptionsWithStringEncoding } from 'node:child_process';\n\nconst { freeze } = Object;\n\nconst agdBinary = 'agd';\n\nexport const makeAgd = ({\n  execFileSync,\n}: {\n  execFileSync: typeof import('child_process').execFileSync;\n}) => {\n  const make = (\n    { home, keyringBackend, rpcAddrs } = {} as {\n      home?: string;\n      keyringBackend?: string;\n      rpcAddrs?: string[];\n    },\n  ) => {\n    const keyringArgs = [\n      ...(home ? ['--home', home] : []),\n      ...(keyringBackend ? [`--keyring-backend`, keyringBackend] : []),\n    ];\n    if (rpcAddrs) {\n      assert.equal(\n        rpcAddrs.length,\n        1,\n        'XXX rpcAddrs must contain only one entry',\n      );\n    }\n    const nodeArgs = [...(rpcAddrs ? [`--node`, rpcAddrs[0]] : [])];\n\n    const exec = (\n      args: string[],\n      opts?: ExecFileSyncOptionsWithStringEncoding,\n    ) => {\n      console.warn(\n        '# invoking agd:',\n        ...[agdBinary, ...args].map(arg =>\n          arg.match(/[^a-zA-Z0-9,._+:@%/-]/)\n            ? `'${arg.replaceAll(`'`, `'\\\\''`)}'`\n            : arg,\n        ),\n      );\n      return execFileSync(agdBinary, args, opts).toString();\n    };\n\n    const outJson = ['--output', 'json'];\n\n    const ro = freeze({\n      status: async () => JSON.parse(exec([...nodeArgs, 'status'])),\n      query: async (\n        qArgs:\n          | [kind: 'gov', domain: string, ...rest: any]\n          | [kind: 'txs', filter: string]\n          | [kind: 'tx', txhash: string]\n          | [mod: 'vstorage', kind: 'data' | 'children', path: string],\n      ) => {\n        const out = exec(['query', ...qArgs, ...nodeArgs, ...outJson], {\n          encoding: 'utf-8',\n          stdio: ['ignore', 'pipe', 'ignore'],\n        });\n\n        try {\n          return JSON.parse(out);\n        } catch (e) {\n          console.error(e);\n          console.info('output:', out);\n        }\n      },\n    });\n    const nameHub = freeze({\n      /**\n       * NOTE: synchronous I/O\n       */\n      lookup: (...path: string[]) => {\n        if (!Array.isArray(path)) {\n          // TODO: use COND || Fail``\n          throw TypeError();\n        }\n        if (path.length !== 1) {\n          throw Error(`path length limited to 1: ${path.length}`);\n        }\n        const [name] = path;\n        const txt = exec(['keys', 'show', `--address`, name, ...keyringArgs]);\n        return txt.trim();\n      },\n    });\n    const rw = freeze({\n      /**\n       * @param {string[]} txArgs\n       * @param {{ chainId: string, from: string, yes?: boolean }} opts\n       */\n      tx: async (\n        txArgs: string[],\n        {\n          chainId,\n          from,\n          yes,\n        }: { chainId: string; from: string; yes?: boolean },\n      ) => {\n        const yesArg = yes ? ['--yes'] : [];\n        const args = [\n          ...nodeArgs,\n          ...[`--chain-id`, chainId],\n          ...keyringArgs,\n          ...[`--from`, from],\n          'tx',\n          ...['--broadcast-mode', 'block'],\n          ...['--gas', 'auto'],\n          ...['--gas-adjustment', '1.3'],\n          ...txArgs,\n          ...yesArg,\n          ...outJson,\n        ];\n        const out = exec(args);\n        try {\n          return JSON.parse(out);\n        } catch (e) {\n          console.error(e);\n          console.info('output:', out);\n        }\n      },\n      ...ro,\n      ...nameHub,\n      readOnly: () => ro,\n      nameHub: () => nameHub,\n      keys: {\n        add: (name: string, mnemonic: string) => {\n          return execFileSync(\n            agdBinary,\n            [...keyringArgs, 'keys', 'add', name, '--recover'],\n            { input: mnemonic },\n          ).toString();\n        },\n      },\n      withOpts: (opts: Record<string, unknown>) =>\n        make({ home, keyringBackend, rpcAddrs, ...opts }),\n    });\n    return rw;\n  };\n  return make();\n};\n","import type { Options as ExecaOptions } from 'execa';\nimport { $, execaCommand } from 'execa';\nimport { NonNullish } from './assert.js';\nimport { SDK_ROOT } from './constants.js';\n\nexport const BINARY = NonNullish(process.env.binary);\n\nexport const executeCommand = async (\n  command: string,\n  params: string[],\n  options: Omit<\n    ExecaOptions,\n    'buffer' | 'encoding' | 'lines' | 'stdio' | 'stdout'\n  > = {},\n) => {\n  const invocation = `${command} ${params.join(' ')}`;\n  console.warn('# invoking:', invocation);\n  const result = await execaCommand(invocation, options);\n  if (!options.stderr) {\n    const { stderr } = result;\n    if (stderr) console.warn(stderr);\n  }\n  return result.stdout;\n};\n\nexport const agd = {\n  query: async <T = any>(...params: string[]) => {\n    const newParams = ['query', ...params, '-o json'];\n    const data = await executeCommand(BINARY, newParams);\n    return JSON.parse(data) as T;\n  },\n  tx: async (...params: string[]) => {\n    const newParams = [\n      'tx',\n      '-bblock',\n      '--gas auto',\n      '--gas-adjustment 1.3',\n      ...params,\n      '-o json',\n    ];\n    const data = await executeCommand(BINARY, newParams, { shell: true });\n    return JSON.parse(data);\n  },\n  keys: async (...params: string[]) => {\n    let newParams = ['keys', ...params];\n    let shouldParse = true;\n\n    if (params.includes('show')) {\n      if (params.includes('-a') || params.includes('-address')) {\n        shouldParse = false;\n      }\n    }\n\n    if (shouldParse) {\n      newParams = [...newParams, '--output json'];\n    }\n\n    const data = await executeCommand(BINARY, newParams, { input: 'Y' });\n    if (!shouldParse) {\n      return data;\n    }\n\n    return JSON.parse(data);\n  },\n  export: async (...params: string[]) => {\n    const newParams = ['export', ...params];\n    const data = await executeCommand(BINARY, newParams);\n    return JSON.parse(data);\n  },\n};\n\nexport const agoric = {\n  follow: async (...params: string[]) => {\n    let newParams = ['follow', ...params];\n    let parseJson = false;\n\n    if (!params.includes('-o')) {\n      newParams = [...newParams, '-o json'];\n      parseJson = true;\n    }\n    const data = await executeCommand('agoric', newParams);\n\n    if (parseJson) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  },\n  wallet: async (...params: string[]) => {\n    const newParams = ['wallet', ...params];\n    return executeCommand('agoric', newParams);\n  },\n  run: async (...params: string[]) => {\n    const newParams = ['run', ...params];\n    return executeCommand('agoric', newParams);\n  },\n};\n\nexport const agopsLocation = `${SDK_ROOT}/node_modules/.bin/agops`;\n\nexport const agops = {\n  vaults: async (...params: string[]) => {\n    const newParams = ['vaults', ...params];\n\n    const result = await executeCommand(agopsLocation, newParams);\n\n    if (params[0] === 'list') {\n      if (result === '') return [];\n\n      return result.split('\\n');\n    }\n\n    return result;\n  },\n  ec: async (...params: string[]) => {\n    const newParams = ['ec', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  oracle: async (...params: string[]) => {\n    const newParams = ['oracle', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  perf: async (...params: string[]) => {\n    const newParams = ['perf', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  auctioneer: async (...params: string[]) => {\n    const newParams = ['auctioneer', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n};\n\nexport const bundleSourceLocation = `${SDK_ROOT}/node_modules/.bin/bundle-source`;\n\n/**\n * @returns Returns the filepath of the bundle\n */\nexport const bundleSource = async (filePath: string, bundleName: string) => {\n  const output =\n    await $`${bundleSourceLocation} --cache-json /tmp ${filePath} ${bundleName}`;\n  console.log(output.stderr);\n  return `/tmp/bundle-${bundleName}.json`;\n};\n\nexport const wellKnownIdentities = async (io = {}) => {\n  // @ts-expect-error\n  const { agoric: { follow = agoric.follow } = {} } = io;\n  const zip = (xs: unknown[], ys: unknown[]) => xs.map((x, i) => [x, ys[i]]);\n  const fromSmallCapsEntries = (txt: string) => {\n    const { body, slots } = JSON.parse(txt);\n    const theEntries = zip(JSON.parse(body.slice(1)), slots).map(\n      // @ts-expect-error\n      ([[name, ref], boardID]) => {\n        const iface = ref.replace(/^\\$\\d+\\./, '');\n        return [name, { iface, boardID }];\n      },\n    );\n    return Object.fromEntries(theEntries);\n  };\n\n  const installation = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.installation', '-o', 'text'),\n  );\n\n  const instance = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.instance', '-o', 'text'),\n  );\n\n  const brand = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.brand', '-o', 'text'),\n  );\n\n  return { brand, installation, instance };\n};\n\nexport const smallCapsContext = () => {\n  const slots = [] as string[]; // XXX global mutable state\n  const smallCaps = {\n    Nat: (n: number | bigint) => `+${n}`,\n    // XXX mutates obj\n    ref: (obj: any) => {\n      if (obj.ix) return obj.ix;\n      const ix = slots.length;\n      slots.push(obj.boardID);\n      obj.ix = `$${ix}.Alleged: ${obj.iface}`;\n      return obj.ix;\n    },\n  };\n\n  const toCapData = (body: unknown) => {\n    const capData = { body: `#${JSON.stringify(body)}`, slots };\n    return JSON.stringify(capData);\n  };\n\n  return { smallCaps, toCapData };\n};\n","// XXX subset of @endo/assert\n// consider using Node built-in assert https://nodejs.org/api/assert.html\n\nexport const Fail = (template, ...args) => {\n  throw Error(String.raw(template, ...args.map(val => String(val))));\n};\n\nexport const assert = (cond, msg = 'check failed') => {\n  if (!cond) {\n    throw Error(msg);\n  }\n};\n\nassert.typeof = (val, type) => {\n  if (typeof val !== type) {\n    throw Error(`expected ${type}, got ${typeof val}`);\n  }\n};\n\n/** @type {<T>(val: T | undefined) => T} */\nexport const NonNullish = val => {\n  if (!val) throw Error('required');\n  return val;\n};\n","export const GOV1ADDR = 'agoric1ee9hr0jyrxhy999y755mp862ljgycmwyp4pl7q';\nexport const GOV2ADDR = 'agoric1wrfh296eu2z34p6pah7q04jjuyj3mxu9v98277';\nexport const GOV3ADDR = 'agoric1ydzxwh6f893jvpaslmaz6l8j2ulup9a7x8qvvq';\nexport const USER1ADDR = 'agoric1rwwley550k9mmk6uq6mm6z4udrg8kyuyvfszjk';\nexport const VALIDATORADDR = 'agoric1estsewt6jqsx77pwcxkn5ah0jqgu8rhgflwfdl';\n\nexport const ATOM_DENOM = process.env.ATOM_DENOM || 'uatom';\n\nexport const CHAINID = process.env.CHAINID || 'agoric-3';\n\nexport const SDK_ROOT = process.env.AGORIC_SDK || '/usr/src/agoric-sdk';\n","import {\n  $,\n  type TemplateExpression,\n  type Options as ExecaOptions,\n} from 'execa';\nimport assert from 'node:assert';\nimport fsp from 'node:fs/promises';\nimport * as path from 'node:path';\nimport { agd, agops, agoric } from './cliHelper.js';\nimport { CHAINID, VALIDATORADDR } from './constants.js';\n\nconst waitForBootstrap = async (): Promise<number> => {\n  const endpoint = 'localhost';\n  while (true) {\n    const { stdout: json } = await $({\n      reject: false,\n    })`curl -s --fail -m 15 ${`${endpoint}:26657/status`}`;\n\n    if (json.length === 0) {\n      continue;\n    }\n\n    const data = JSON.parse(json);\n\n    if (data.jsonrpc !== '2.0') {\n      continue;\n    }\n\n    const lastHeight = data.result.sync_info.latest_block_height;\n\n    if (lastHeight !== '1') {\n      return lastHeight;\n    }\n\n    await new Promise(r => setTimeout(r, 2000));\n  }\n};\n\nexport const waitForBlock = async (n = 1) => {\n  console.log(`waitForBlock waiting for ${n} new block(s)...`);\n  const h0 = await waitForBootstrap();\n  let lastHeight = h0;\n  for (let i = 0; i < n; i += 1) {\n    while (true) {\n      await new Promise(r => setTimeout(r, 1000));\n      const currentHeight = await waitForBootstrap();\n      if (currentHeight !== lastHeight) {\n        console.log(`waitForBlock saw new height ${currentHeight}`);\n        lastHeight = currentHeight;\n        break;\n      }\n    }\n  }\n};\n\nexport const provisionSmartWallet = async (address: string, amount: string) => {\n  console.log(`funding ${address}`);\n  await agd.tx(\n    'bank',\n    'send',\n    'validator',\n    address,\n    amount,\n    '-y',\n    '--keyring-backend=test',\n    `--chain-id=\"${CHAINID}\"`,\n  );\n  await waitForBlock();\n\n  console.log(`provisioning ${address}`);\n  await agd.tx(\n    'swingset',\n    'provision-one',\n    'my-wallet',\n    address,\n    'SMART_WALLET',\n    '--keyring-backend=test',\n    '-y',\n    `--chain-id=\"${CHAINID}\"`,\n    `--from=\"${address}\"`,\n  );\n\n  await waitForBlock(2);\n  console.log(await agoric.wallet('show', `--from ${address}`));\n};\n\nexport const newOfferId = async () => {\n  const { stdout: date } = await $`date +${'%s%3M'}`;\n  await new Promise(r => setTimeout(r, 1000));\n\n  return date;\n};\n\nexport const mkTemp = async (template: string) => {\n  const { stdout: data } = await $({\n    shell: true,\n  })`mktemp -t ${template}`;\n  return data;\n};\n\nexport const calculateWalletState = async (\n  addr: string,\n): Promise<'old' | 'revived' | 'upgraded'> => {\n  const result = await agoric.follow(\n    '-lF',\n    `:published.wallet.${addr}`,\n    '-o',\n    'text',\n  );\n\n  const body = JSON.parse(result).body;\n  let state = body;\n\n  if (body.includes('@qclass')) {\n    state = 'old';\n  } else if (body.includes('#{}')) {\n    state = 'upgraded';\n  } else if (body.includes('#')) {\n    state = 'revived';\n  }\n\n  return state;\n};\n\nexport const executeOffer = async (\n  address: string,\n  offerPromise: string | Promise<string>,\n  options: Omit<\n    ExecaOptions,\n    'buffer' | 'encoding' | 'lines' | 'stdio' | 'stdout'\n  > = {},\n) => {\n  const offerPath = await mkTemp('agops.XXX');\n  const offer = await offerPromise;\n  await fsp.writeFile(offerPath, offer);\n\n  if (options.verbose) {\n    console.warn(\n      `# ${offerPath}:`,\n      await fsp.readFile(offerPath, { encoding: 'utf8' }),\n    );\n  }\n  const stdout = await agops.perf(\n    'satisfaction',\n    '--from',\n    address,\n    '--executeOffer',\n    offerPath,\n    '--keyring-backend=test',\n    ...(options.verbose ? ['--verbose'] : []),\n  );\n  console.warn(stdout);\n};\n\nexport const getUser = async (user: string): Promise<string> => {\n  return agd.keys('show', user, '-a', '--keyring-backend=test');\n};\n\n/**\n *\n * @param user\n * @returns user address\n */\nexport const addUser = async (user: string) => {\n  await agd.keys('add', user, '--keyring-backend=test');\n\n  return getUser(user);\n};\n\ninterface V047ProposalMessage {\n  '@type': string;\n  content: {\n    title: string;\n  };\n}\n\ninterface V050ProposalMessage {\n  type: string;\n  value: {\n    content: {\n      type: string;\n      value: {\n        title: string;\n      };\n    };\n  };\n}\n\ntype Proposal = {\n  content?: { title: string };\n  id: string;\n  messages?: Array<V047ProposalMessage | V050ProposalMessage>;\n  proposal_id?: string;\n  status: string;\n  title?: string;\n  voting_end_time: unknown;\n};\n\nexport const voteLatestProposalAndWait = async (\n  title?: string,\n): Promise<{\n  proposal_id: string;\n  voting_end_time: unknown;\n  status: string;\n}> => {\n  const getProposal = async (proposalId: Proposal['id']) => {\n    const proposal = await agd.query<Proposal | { proposal: Proposal }>(\n      'gov',\n      'proposal',\n      proposalId,\n    );\n    assert(proposal, `Proposal ${lastProposalId} not found`);\n    if ('proposal' in proposal) return proposal.proposal;\n    return proposal;\n  };\n\n  await waitForBlock();\n  let { proposals } = (await agd.query('gov', 'proposals')) as {\n    proposals: Array<Proposal>;\n  };\n  if (title) {\n    proposals = proposals.filter(proposal => {\n      if (proposal.title === title) {\n        return true;\n      }\n      if (proposal.content?.title === title) {\n        return true;\n      }\n      if (proposal.messages) {\n        return proposal.messages.some(message => {\n          let typeUrl: string;\n          let msgTitle: string;\n          if ('@type' in message) {\n            typeUrl = message['@type'];\n            msgTitle = message?.content?.title;\n          } else {\n            typeUrl = message.type;\n            msgTitle = message?.value?.content?.value?.title;\n          }\n\n          typeUrl === '/cosmos.gov.v1.MsgExecLegacyContent' ||\n            Fail`Unsupported proposal message type ${typeUrl}`;\n          return msgTitle === title;\n        });\n      } else {\n        Fail`Unrecognized proposal shape ${Object.keys(proposal)}`;\n      }\n    });\n  }\n  let lastProposal = proposals.at(-1);\n\n  assert(lastProposal, `No last proposal found`);\n\n  const lastProposalId = lastProposal.proposal_id || lastProposal.id;\n\n  assert(lastProposalId, `Invalid proposal ${lastProposal}`);\n\n  if (lastProposal.status === 'PROPOSAL_STATUS_DEPOSIT_PERIOD') {\n    await agd.tx(\n      'gov',\n      'deposit',\n      lastProposalId,\n      '50000000ubld',\n      '--from',\n      VALIDATORADDR,\n      `--chain-id=${CHAINID}`,\n      '--yes',\n      '--keyring-backend',\n      'test',\n    );\n\n    await waitForBlock();\n\n    lastProposal = await getProposal(lastProposalId);\n  }\n\n  lastProposal.status === 'PROPOSAL_STATUS_VOTING_PERIOD' ||\n    Fail`Latest proposal ${lastProposalId} not in voting period (status=${lastProposal.status})`;\n\n  await agd.tx(\n    'gov',\n    'vote',\n    lastProposalId,\n    'yes',\n    '--from',\n    VALIDATORADDR,\n    `--chain-id=${CHAINID}`,\n    '--yes',\n    '--keyring-backend',\n    'test',\n  );\n\n  for (\n    ;\n    lastProposal.status !== 'PROPOSAL_STATUS_PASSED' &&\n    lastProposal.status !== 'PROPOSAL_STATUS_REJECTED' &&\n    lastProposal.status !== 'PROPOSAL_STATUS_FAILED';\n    await waitForBlock()\n  ) {\n    lastProposal = await getProposal(lastProposalId);\n    assert(lastProposal, `Proposal ${lastProposalId} not found`);\n    console.log(\n      `Waiting for proposal ${lastProposalId} to pass (status=${lastProposal.status})`,\n    );\n  }\n  return { proposal_id: lastProposalId, ...lastProposal };\n};\n\nconst Fail = (\n  template: { raw: readonly string[] | ArrayLike<string> },\n  ...args: unknown[]\n) => {\n  throw Error(String.raw(template, ...args.map(val => String(val))));\n};\n\n/**\n * Parse output of `agoric run proposal-builder.js`\n *\n * @param {string} txt\n *\n * adapted from packages/boot/test/bootstrapTests/supports.js\n */\nconst parseProposalParts = (txt: string) => {\n  const evals = [\n    ...txt.matchAll(/swingset-core-eval (?<permit>\\S+) (?<script>\\S+)/g),\n  ].map(m => {\n    if (!m.groups) throw Fail`Invalid proposal output ${m[0]}`;\n    const { permit, script } = m.groups;\n    return { permit, script };\n  });\n  evals.length || Fail`No swingset-core-eval found in proposal output: ${txt}`;\n\n  const bundles = [...txt.matchAll(/swingset install-bundle @([^\\n]+)/gm)].map(\n    ([, bundle]) => bundle,\n  );\n  bundles.length || Fail`No bundles found in proposal output: ${txt}`;\n\n  return { evals, bundles };\n};\n\nexport const proposalBuilder = async (fileName: TemplateExpression) => {\n  const { stdout: output } = await $({ cwd: '/tmp' })`agoric run ${fileName}`;\n  const { evals, bundles } = parseProposalParts(output);\n\n  const evalsWithLocation = evals.map(e => {\n    return {\n      permit: path.join('/tmp', e.permit),\n      script: path.join('/tmp', e.script),\n    };\n  });\n\n  return { evals: evalsWithLocation, bundles };\n};\n\nexport const installBundle = async (addr: string, bundlePath: string) => {\n  await agd.tx(\n    'swingset',\n    'install-bundle',\n    `@${bundlePath}`,\n    '--from',\n    addr,\n    '--keyring-backend=test',\n    '--chain-id',\n    CHAINID,\n    '-bblock',\n    '--yes',\n  );\n};\n\nexport const submitProposal = async (\n  scriptPath: string,\n  permitPath: string,\n  title: string,\n  description: string,\n) => {\n  await agd.tx(\n    'gov',\n    'submit-proposal',\n    'swingset-core-eval',\n    permitPath,\n    scriptPath,\n    `--title=\"${title}\"`,\n    `--description=\"${description}\"`,\n    '--deposit=10000000ubld',\n    '--from',\n    VALIDATORADDR,\n    '--keyring-backend=test',\n    '--chain-id',\n    CHAINID,\n    '-bblock',\n    '--yes',\n  );\n\n  await voteLatestProposalAndWait(title);\n};\n","import * as fsp from 'node:fs/promises';\n\nimport { Fail, NonNullish } from './assert.js';\nimport { Far, makeMarshal, makeTranslationTable } from './unmarshal.js';\n\n// TODO: factor out ambient authority from these\n// or at least allow caller to supply authority.\nimport { agoric } from './cliHelper.js';\nimport { getISTBalance, mintIST } from './econHelpers.js';\nimport { type StaticConfig } from './core-eval.js';\nimport path from 'node:path';\n\n// move to unmarshal.js?\nconst makeBoardUnmarshal = () => {\n  const synthesizeRemotable = (_slot: unknown, iface: string) =>\n    Far(iface.replace(/^Alleged: /, ''), {});\n\n  const { convertValToSlot, convertSlotToVal } = makeTranslationTable(\n    (slot: unknown) => Fail`unknown id: ${slot}`,\n    synthesizeRemotable,\n  );\n\n  return makeMarshal(convertValToSlot, convertSlotToVal);\n};\n\nexport const getContractInfo = async (path: string, io = {} as any) => {\n  const m = makeBoardUnmarshal();\n  const {\n    agoric: { follow = agoric.follow },\n    prefix = 'published.',\n  } = io;\n  console.log('@@TODO: prevent agoric follow hang', prefix, path);\n  const txt = await follow('-lF', `:${prefix}${path}`, '-o', 'text');\n  const { body, slots } = JSON.parse(txt);\n  return m.fromCapData({ body, slots });\n};\n\n/**\n * @param record - e.g. { color: 'blue' }\n * @returns e.g. ['--color', 'blue']\n */\nexport const flags = (record: Record<string, string>): string[] => {\n  return Object.entries(record)\n    .map(([k, v]) => [`--${k}`, v])\n    .flat();\n};\n\nexport const txAbbr = (tx: any) => {\n  const { txhash, codespace, code, height, gas_used } = tx;\n  return { txhash, codespace, code, height, gas_used };\n};\n\nexport const loadedBundleIds = (swingstore: any) => {\n  const ids = swingstore`SELECT bundleID FROM bundles`.map(\n    (r: { bundleID: string }) => r.bundleID,\n  );\n  return ids;\n};\n\n/**\n * @param cacheFn - e.g. /home/me.agoric/cache/b1-DEADBEEF.json\n */\nexport const bundleDetail = (cacheFn: string) => {\n  const fileName = NonNullish(cacheFn.split('/').at(-1));\n  const id = fileName.replace(/\\.json$/, '');\n  const hash = id.replace(/^b1-/, '');\n  return { fileName, endoZipBase64Sha512: hash, id };\n};\n\nconst importBundleCost = (bytes: number, price = 0.002) => {\n  return bytes * price;\n};\n\nexport type BundleInfo = {\n  name: string;\n  dir: string;\n  bundles: string[];\n  evals: { permit: string; script: string }[];\n};\n\nconst mintCalc = (\n  myIST: number,\n  cost: number,\n  opts: {\n    unit?: number;\n    padding?: number;\n    minInitialDebt?: number;\n    collateralPrice: number;\n  },\n) => {\n  const {\n    unit = 1_000_000,\n    padding = 1,\n    minInitialDebt = 6,\n    collateralPrice,\n  } = opts;\n  const { round, max } = Math;\n  const wantMinted = max(round(cost - myIST + padding), minInitialDebt);\n  const giveCollateral = round(wantMinted / collateralPrice) + 1;\n  const sendValue = round(giveCollateral * unit);\n  return { wantMinted, giveCollateral, sendValue };\n};\n\nexport const ensureISTForInstall = async (\n  agd: ReturnType<typeof import('../lib/agd-lib.js').makeAgd>,\n  config: StaticConfig,\n  bytes: number,\n  { log }: { log: (...args: any[]) => void },\n) => {\n  const cost = importBundleCost(bytes);\n  log({ totalSize: bytes, cost });\n  const { installer } = config;\n  const addr = agd.lookup(installer);\n  const istBalance = await getISTBalance(addr);\n\n  if (istBalance > cost) {\n    log('balance sufficient', { istBalance, cost });\n    return;\n  }\n  const { sendValue, wantMinted, giveCollateral } = mintCalc(\n    istBalance,\n    cost,\n    config,\n  );\n  log({ wantMinted });\n  await mintIST(addr, sendValue, wantMinted, giveCollateral);\n};\n\nexport const readBundles = async (dir: string) => {\n  const files = await fsp.readdir(dir);\n  const names = files.filter(f => f.endsWith('.js')).map(f => f.slice(0, -3));\n  const bundleInfos: BundleInfo[] = [];\n  for (const name of names) {\n    const evals = [{ permit: `${name}-permit.json`, script: `${name}.js` }];\n    const content = await fsp.readFile(path.join(dir, `${name}.js`), 'utf8');\n    const bundleIds = content.matchAll(/b1-[a-z0-9]+/g);\n    const bundles = Array.from(bundleIds).map(id => `${id}.json`);\n    bundleInfos.push({ evals, bundles, name, dir });\n  }\n  return bundleInfos;\n};\n","// TODO use actual @endo/marshal\n\nconst {\n  create,\n  entries,\n  fromEntries,\n  freeze,\n  keys,\n  setPrototypeOf,\n  prototype: objectPrototype,\n} = Object;\nconst { isArray } = Array;\n\nconst sigilDoc = {\n  '!': 'escaped string',\n  '+': `non-negative bigint`,\n  '-': `negative bigint`,\n  '#': `manifest constant`,\n  '%': `symbol`,\n  $: `remotable`,\n  '&': `promise`,\n};\nconst sigils = keys(sigilDoc).join('');\n\nconst { freeze: harden } = Object; // XXX\n\n/**\n * @template {Record<string, any>} O\n * @param {O} original\n * @template R map result\n * @param {(value: O[keyof O], key: keyof O) => R} mapFn\n * @returns {{ [P in keyof O]: R}}\n */\nexport const objectMap = (original, mapFn) => {\n  const ents = entries(original);\n  const mapEnts = ents.map(([k, v]) => [k, mapFn(v, k)]);\n  return harden(fromEntries(mapEnts));\n};\nharden(objectMap);\n\nexport const makeMarshal = (_v2s, convertSlotToVal = (s, _i) => s) => {\n  const fromCapData = ({ body, slots }) => {\n    const recur = v => {\n      switch (typeof v) {\n        case 'boolean':\n        case 'number':\n          return v;\n        case 'string':\n          if (v === '') return v;\n          const sigil = v.slice(0, 1);\n          if (!sigils.includes(sigil)) return v;\n          switch (sigil) {\n            case '!':\n              return v.slice(1);\n            case '+':\n              return BigInt(v.slice(1));\n            case '-':\n              return -BigInt(v.slice(1));\n            case '$': {\n              const [ix, iface] = v.slice(1).split('.');\n              return convertSlotToVal(slots[Number(ix)], iface);\n            }\n            case '#':\n              switch (v) {\n                case '#undefined':\n                  return undefined;\n                case '#Infinity':\n                  return Infinity;\n                case '#NaN':\n                  return Infinity;\n                default:\n                  throw RangeError(`Unexpected constant ${v}`);\n              }\n            case '%':\n              // TODO: @@asyncIterator\n              return Symbol.for(v.slice(1));\n            default:\n              throw RangeError(`Unexpected sigil ${sigil}`);\n          }\n        case 'object':\n          if (v === null) return v;\n          if (isArray(v)) {\n            return freeze(v.map(recur));\n          }\n          return freeze(objectMap(v, recur));\n        default:\n          throw RangeError(`Unexpected value type ${typeof v}`);\n      }\n    };\n    const encoding = JSON.parse(body.replace(/^#/, ''));\n    return recur(encoding);\n  };\n\n  const toCapData = () => {\n    throw Error('not implemented');\n  };\n\n  return harden({\n    fromCapData,\n    unserialize: fromCapData,\n    toCapData,\n    serialize: toCapData,\n  });\n};\nharden(makeMarshal);\n\nconst PASS_STYLE = Symbol.for('passStyle');\nexport const Far = (iface, methods) => {\n  const proto = freeze(\n    create(objectPrototype, {\n      [PASS_STYLE]: { value: 'remotable' },\n      [Symbol.toStringTag]: { value: iface },\n    }),\n  );\n  setPrototypeOf(methods, proto);\n  freeze(methods);\n  return methods;\n};\n\nexport const makeTranslationTable = (makeSlot, makeVal) => {\n  const valToSlot = new Map();\n  const slotToVal = new Map();\n\n  const convertValToSlot = val => {\n    if (valToSlot.has(val)) return valToSlot.get(val);\n    const slot = makeSlot(val, valToSlot.size);\n    valToSlot.set(val, slot);\n    slotToVal.set(slot, val);\n    return slot;\n  };\n\n  const convertSlotToVal = (slot, iface) => {\n    if (slotToVal.has(slot)) return slotToVal.get(slot);\n    if (makeVal) {\n      const val = makeVal(slot, iface);\n      valToSlot.set(val, slot);\n      slotToVal.set(slot, val);\n      return val;\n    }\n    throw Error(`no such ${iface}: ${slot}`);\n  };\n\n  return harden({ convertValToSlot, convertSlotToVal });\n};\nharden(makeTranslationTable);\n","import { assert, Fail } from './assert.js';\nimport { agd } from './cliHelper.js';\n\nconst { freeze: harden } = Object; // XXX\n\n// from '@agoric/internal/src/lib-chainStorage.js';\n/** @type {(cell: unknown) => cell is { blockHeight: number;values: unknown[] }} cell */\nconst isStreamCell = cell =>\n  !!(\n    cell &&\n    typeof cell === 'object' &&\n    'values' in cell &&\n    Array.isArray(cell.values) &&\n    'blockHeight' in cell &&\n    typeof cell.blockHeight === 'string' &&\n    /^0$|^[1-9][0-9]*$/.test(cell.blockHeight)\n  );\nharden(isStreamCell);\n\n/**\n * Extract one value from the vstorage stream cell in a QueryDataResponse\n *\n * @param {import('@agoric/cosmic-proto/vstorage/query.js').QueryDataResponse} data\n * @param {number} [index] index of the desired value in a deserialized stream cell\n */\nexport const extractStreamCellValue = (data, index = -1) => {\n  const { value: serialized } = data;\n\n  serialized.length > 0 || Fail`no StreamCell values: ${data}`;\n\n  const streamCell = JSON.parse(serialized);\n  if (!isStreamCell(streamCell)) {\n    throw Fail`not a StreamCell: ${streamCell}`;\n  }\n\n  const { values } = streamCell;\n  values.length > 0 || Fail`no StreamCell values: ${streamCell}`;\n\n  const value = values.at(index);\n  assert.typeof(value, 'string');\n  return value;\n};\nharden(extractStreamCellValue);\n\n/** @param {string} path */\nexport const queryVstorage = path =>\n  agd.query('vstorage', 'data', '--output', 'json', path);\n\n// XXX use endo/marshal?\n/** @param {string} path */\nexport const getQuoteBody = async path => {\n  const queryOut = await queryVstorage(path);\n\n  const body = JSON.parse(JSON.parse(queryOut.value).values[0]);\n  return JSON.parse(body.body.substring(1));\n};\n\n/**\n *\n * @param {string} instanceName\n * @returns {Promise<string | null>} boardId of the named instance in agoricNames\n */\nexport const getInstanceBoardId = async instanceName => {\n  const instanceRec = await queryVstorage(`published.agoricNames.instance`);\n\n  const value = JSON.parse(instanceRec.value);\n  const body = JSON.parse(value.values.at(-1));\n\n  const instances = JSON.parse(body.body.substring(1));\n\n  const key = Object.keys(instances).find(\n    k => instances[k][0] === instanceName,\n  );\n  if (key) {\n    return body.slots[key];\n  }\n  return null;\n};\n","import { executeOffer, waitForBlock } from './commonUpgradeHelpers.js';\nimport { ATOM_DENOM, CHAINID, VALIDATORADDR } from './constants.js';\nimport {\n  agd,\n  agops,\n  executeCommand,\n  agopsLocation,\n  agoric as agoricAmbient,\n} from './cliHelper.js';\nimport { GOV1ADDR, GOV2ADDR, GOV3ADDR } from './constants.js';\nimport { queryVstorage, getQuoteBody, getInstanceBoardId } from './vstorage.js';\n\nconst ORACLE_ADDRESSES = [GOV1ADDR, GOV2ADDR, GOV3ADDR];\n\n// TODO return the id of the new vault so subsequent commands can use it\n/**\n *\n * @param {string} address\n * @param {string} mint\n * @param {string} collateral\n */\nexport const openVault = (address, mint, collateral) => {\n  return executeOffer(\n    address,\n    // @ts-expect-error could return string[] but not in this case\n    agops.vaults('open', '--wantMinted', mint, '--giveCollateral', collateral),\n  );\n};\n\nexport const adjustVault = (address, vaultId, vaultParams) => {\n  let params = [\n    'adjust',\n    '--vaultId',\n    vaultId,\n    '--from',\n    address,\n    ' --keyring-backend=test',\n  ];\n\n  if ('wantCollateral' in vaultParams) {\n    params = [...params, '--wantCollateral', vaultParams.wantCollateral];\n  }\n\n  if ('wantMinted' in vaultParams) {\n    params = [...params, '--wantMinted', vaultParams.wantMinted];\n  }\n\n  if ('giveCollateral' in vaultParams) {\n    params = [...params, '--giveCollateral', vaultParams.giveCollateral];\n  }\n\n  if ('giveMinted' in vaultParams) {\n    params = [...params, '--giveMinted', vaultParams.giveMinted];\n  }\n\n  // @ts-expect-error could return string[] but not in this case\n  return executeOffer(address, agops.vaults(...params));\n};\n\nexport const closeVault = (address, vaultId, mint) => {\n  return executeOffer(\n    address,\n    // @ts-expect-error could return string[] but not in this case\n    agops.vaults(\n      'close',\n      '--vaultId',\n      vaultId,\n      '--giveMinted',\n      mint,\n      '--from',\n      address,\n      '--keyring-backend=test',\n    ),\n  );\n};\n\nexport const mintIST = async (addr, sendValue, wantMinted, giveCollateral) => {\n  await agd.tx(\n    'bank',\n    'send',\n    'validator',\n    addr,\n    `${sendValue}${ATOM_DENOM}`,\n    '--from',\n    VALIDATORADDR,\n    '--chain-id',\n    CHAINID,\n    '--keyring-backend',\n    'test',\n    '--yes',\n  );\n  await openVault(addr, wantMinted, giveCollateral);\n};\n\nexport const getISTBalance = async (addr, denom = 'uist', unit = 1_000_000) => {\n  const coins = await agd.query('bank', 'balances', addr);\n  const coin = coins.balances.find(a => a.denom === denom);\n  return Number(coin.amount) / unit;\n};\n\nexport const checkForOracle = async (t, name) => {\n  const instanceName = `${name}-USD price feed`;\n  const instance = await getInstanceBoardId(name);\n  t.truthy(instance);\n};\n\nexport const registerOraclesForBrand = async (brandIn, oraclesByBrand) => {\n  await null;\n  const promiseArray = [];\n\n  const oraclesWithID = oraclesByBrand.get(brandIn);\n  for (const oracle of oraclesWithID) {\n    const { address, offerId } = oracle;\n    promiseArray.push(\n      executeOffer(\n        address,\n        agops.oracle('accept', '--offerId', offerId, `--pair ${brandIn}.USD`),\n      ),\n    );\n  }\n\n  return Promise.all(promiseArray);\n};\n\n/**\n * Generate a consistent map of oracleIDs for a brand that can be used to\n * register oracles or to push prices. The baseID changes each time new\n * invitations are sent/accepted, and need to be maintained as constants in\n * scripts that use the oracles. Each oracleAddress and brand needs a unique\n * offerId, so we create recoverable IDs using the brandName and oracle id,\n * mixed with the upgrade at which the invitations were accepted.\n *\n * @param {string} baseId\n * @param {string} brandName\n */\nconst addOraclesForBrand = (baseId, brandName) => {\n  const oraclesWithID = [];\n  for (let i = 0; i < ORACLE_ADDRESSES.length; i += 1) {\n    const oracleAddress = ORACLE_ADDRESSES[i];\n    const offerId = `${brandName}.${baseId}.${i}`;\n    oraclesWithID.push({ address: oracleAddress, offerId });\n  }\n  return oraclesWithID;\n};\n\nexport const addPreexistingOracles = async (brandIn, oraclesByBrand) => {\n  await null;\n\n  const oraclesWithID = [];\n  for (let i = 0; i < ORACLE_ADDRESSES.length; i += 1) {\n    const oracleAddress = ORACLE_ADDRESSES[i];\n\n    const path = `published.wallet.${oracleAddress}.current`;\n    const wallet = await getQuoteBody(path);\n    const idToInvitation = wallet.offerToUsedInvitation.find(([k]) => {\n      return !isNaN(k[0]);\n    });\n    if (idToInvitation) {\n      oraclesWithID.push({\n        address: oracleAddress,\n        offerId: idToInvitation[0],\n      });\n    }\n  }\n\n  oraclesByBrand.set(brandIn, oraclesWithID);\n};\n\n/**\n * Generate a consistent map of oracleIDs and brands that can be used to\n * register oracles or to push prices. The baseID changes each time new\n * invitations are sent/accepted, and need to be maintained as constants in\n * scripts that use these records to push prices.\n *\n * @param {string} baseId\n * @param {string[]} brandNames\n */\nexport const generateOracleMap = (baseId, brandNames) => {\n  const oraclesByBrand = new Map();\n  for (const brandName of brandNames) {\n    const oraclesWithID = addOraclesForBrand(baseId, brandName);\n    oraclesByBrand.set(brandName, oraclesWithID);\n  }\n  return oraclesByBrand;\n};\n\nexport const pushPrices = async (price, brandIn, oraclesByBrand, round) => {\n  await waitForBlock(1);\n  // rotate which oracle is first. Use the round number\n  const oracles = oraclesByBrand.get(brandIn);\n  for (let i = 0; i < oracles.length; i += 1) {\n    const offset = (i + round) % oracles.length;\n    const oracle = oraclesByBrand.get(brandIn)[offset];\n    const oracleCmd = await agops.oracle(\n      'pushPriceRound',\n      '--price',\n      price,\n      '--oracleAdminAcceptOfferId',\n      oracle.offerId,\n      '--roundId',\n      round,\n    );\n    await executeOffer(oracle.address, oracleCmd);\n  }\n};\n\nexport const getRoundId = async (price, io = {}) => {\n  const { agoric = { follow: agoricAmbient.follow }, prefix = 'published.' } =\n    io;\n  const path = `:${prefix}priceFeed.${price}-USD_price_feed.latestRound`;\n  const round = await agoric.follow('-lF', path);\n  return parseInt(round.roundId);\n};\n\nexport const getPriceQuote = async price => {\n  const path = `published.priceFeed.${price}-USD_price_feed`;\n  const body = await getQuoteBody(path);\n  return body.amountOut.value;\n};\n\nexport const agopsInter = (...params) => {\n  const newParams = ['inter', ...params];\n  return executeCommand(agopsLocation, newParams);\n};\n\nexport const createBid = (price, addr, offerId) => {\n  return agopsInter(\n    'bid',\n    'by-price',\n    `--price ${price}`,\n    `--give 1.0IST`,\n    '--from',\n    addr,\n    '--keyring-backend test',\n    `--offer-id ${offerId}`,\n  );\n};\n\nexport const getLiveOffers = async addr => {\n  const path = `published.wallet.${addr}.current`;\n  const body = await getQuoteBody(path);\n  return body.liveOffers;\n};\n\nexport const getAuctionCollateral = async index => {\n  const path = `published.auction.book${index}`;\n  const body = await getQuoteBody(path);\n  return body.collateralAvailable.value;\n};\n\nexport const getVaultPrices = async index => {\n  const path = `published.vaultFactory.managers.manager${index}.quotes`;\n  const body = await getQuoteBody(path);\n  return body.quoteAmount;\n};\n\nexport const getProvisionPoolMetrics = async () => {\n  const path = `published.provisionPool.metrics`;\n  return getQuoteBody(path);\n};\n","import { execFileSync } from 'node:child_process'; // TODO: use execa\nimport assert from 'node:assert';\nimport * as fsp from 'node:fs/promises';\nimport * as path from 'node:path';\nimport * as process from 'node:process';\n\nimport { ZipReader } from '@endo/zip';\nimport dbOpen from 'better-sqlite3';\n\nimport { makeAgd } from './agd-lib.js';\nimport { agoric } from './cliHelper.js';\nimport { voteLatestProposalAndWait } from './commonUpgradeHelpers.js';\nimport { dbTool } from './vat-status.js';\nimport {\n  type BundleInfo,\n  bundleDetail,\n  ensureISTForInstall,\n  flags,\n  getContractInfo,\n  loadedBundleIds,\n  readBundles,\n  txAbbr,\n} from './core-eval-support.js';\nimport { step } from './logging.js';\n\nexport const staticConfig = {\n  deposit: '10000000ubld', // 10 BLD\n  installer: 'gov1', // as in: agd keys show gov1\n  proposer: 'validator',\n  collateralPrice: 6, // conservatively low price. TODO: look up\n  swingstorePath: '~/.agoric/data/agoric/swingstore.sqlite',\n};\n\nexport type StaticConfig = typeof staticConfig;\n\nexport type CoreEvalConfig = {\n  title?: string;\n  description?: string;\n};\n\n/**\n * Provide access to the outside world via context.\n *\n * TODO: refactor overlap with mn2-start.test.js\n */\nconst makeTestContext = async (\n  staticConfig: StaticConfig,\n  coreEvalConfig: CoreEvalConfig,\n) => {\n  const config = {\n    chainId: 'agoriclocal',\n    ...staticConfig,\n    ...coreEvalConfig,\n  };\n\n  const agd = makeAgd({ execFileSync }).withOpts({\n    keyringBackend: 'test',\n  });\n\n  const dbPath = staticConfig.swingstorePath.replace(/^~/, process.env.HOME!);\n  const swingstore = dbTool(dbOpen(dbPath, { readonly: true }));\n\n  const before = new Map();\n  return { agd, agoric, swingstore, config, before, fetch };\n};\n\nexport const passCoreEvalProposal = async (\n  bundleInfos: BundleInfo[],\n  coreEvalConfig: CoreEvalConfig = {},\n) => {\n  // XXX vestige of Ava\n  const config = {\n    ...staticConfig,\n  };\n  const context = await makeTestContext(config, coreEvalConfig);\n\n  console.log('Passing core evals...');\n  for (const { name, bundles, evals } of bundleInfos) {\n    console.log(\n      name,\n      evals.map(record => record.script),\n      `(bundle count: ${bundles.length})`,\n    );\n  }\n\n  const bundleEntry = async (bundle: { endoZipBase64: string }) => {\n    const getZipReader = async () => {\n      const { endoZipBase64 } = bundle;\n      const toBlob = (base64: string, type = 'application/octet-stream') =>\n        fetch(`data:${type};base64,${base64}`).then(res => res.blob());\n      const zipBlob = await toBlob(endoZipBase64);\n      // https://github.com/endojs/endo/issues/1811#issuecomment-1751499626\n      const buffer = await zipBlob.arrayBuffer();\n      const bytes = new Uint8Array(buffer);\n      return new ZipReader(bytes);\n    };\n\n    const getCompartmentMap = (zipRd: ZipReader) => {\n      const { content } = zipRd.files.get('compartment-map.json');\n      const td = new TextDecoder();\n      const cmap = JSON.parse(td.decode(content));\n      return cmap;\n    };\n\n    const zipRd = await getZipReader();\n    const cmap = getCompartmentMap(zipRd);\n    return cmap.entry;\n  };\n\n  await step('bundle names: compartmentMap.entry', async () => {\n    for (const { bundles, dir } of bundleInfos) {\n      for (const bundleRef of bundles) {\n        const { fileName } = bundleDetail(bundleRef);\n        const bundle = JSON.parse(\n          await fsp.readFile(path.join(dir, fileName), 'utf8'),\n        );\n        const entry = await bundleEntry(bundle);\n        console.log(`${fileName.slice(0, 'b1-#####'.length)}...`, entry);\n        assert(entry.compartment);\n        assert(entry.module);\n      }\n    }\n  });\n\n  const sum = (xs: number[]) => xs.reduce((a, b) => a + b, 0);\n\n  const readBundleSizes = async () => {\n    const bundleSizes = await Promise.all(\n      bundleInfos.flatMap(({ bundles, dir }) =>\n        bundles.map(async b => {\n          const { fileName } = bundleDetail(b);\n          const stat = await fsp.stat(path.join(dir, fileName));\n          return stat.size;\n        }),\n      ),\n    );\n    const totalSize = sum(bundleSizes);\n    return { bundleSizes, totalSize };\n  };\n\n  await step('ensure enough IST to install bundles', async () => {\n    const { agd, config } = context;\n    const { totalSize } = await readBundleSizes();\n\n    await ensureISTForInstall(agd, config, totalSize, {\n      log: console.log,\n    });\n  });\n\n  await step('ensure bundles installed', async () => {\n    const { agd, swingstore, agoric, config } = context;\n    const { chainId } = config;\n    const loaded = loadedBundleIds(swingstore);\n    const from = agd.lookup(config.installer);\n\n    let todo = 0;\n    let done = 0;\n    for (const { bundles, dir } of bundleInfos) {\n      todo += bundles.length;\n      for (const bundle of bundles) {\n        const { id, fileName, endoZipBase64Sha512 } = bundleDetail(bundle);\n        if (loaded.includes(id)) {\n          console.log('bundle already installed', id);\n          done += 1;\n          continue;\n        }\n\n        const bundleRd = path.join(dir, fileName);\n        const result = await agd.tx(\n          ['swingset', 'install-bundle', `@${bundleRd}`],\n          { from, chainId, yes: true },\n        );\n        console.log(result.code === 0 ? txAbbr(result) : result);\n        assert.equal(result.code, 0);\n\n        const info = await getContractInfo('bundles', { agoric, prefix: '' });\n        console.log(info);\n        done += 1;\n        assert.deepEqual(info, {\n          endoZipBase64Sha512,\n          error: null,\n          installed: true,\n        });\n      }\n    }\n    assert.equal(todo, done);\n  });\n\n  await step('ensure core eval proposal passes', async () => {\n    const { agd, swingstore, config } = context;\n    const from = agd.lookup(config.proposer);\n    const { chainId, deposit } = config;\n    const info = {\n      title: config.title || `Core Eval ${Date.now()}`,\n      description: config.description || 'Core eval proposal',\n    };\n    console.log('submit proposal', info.title);\n\n    // double-check that bundles are loaded\n    const loaded = loadedBundleIds(swingstore);\n    for (const { bundles } of bundleInfos) {\n      for (const bundle of bundles) {\n        const { id } = bundleDetail(bundle);\n        if (!loaded.includes(id)) {\n          assert.fail(`bundle ${id} not loaded`);\n        }\n      }\n    }\n\n    const evalPaths = bundleInfos.flatMap(({ evals, dir }) => {\n      return evals\n        .flatMap(e => [e.permit, e.script])\n        .map(file => path.join(dir, file));\n    });\n\n    const result = await agd.tx(\n      [\n        'gov',\n        'submit-proposal',\n        'swingset-core-eval',\n        ...evalPaths,\n        ...flags({ ...info, deposit }),\n      ],\n      { from, chainId, yes: true },\n    );\n    console.log(txAbbr(result));\n    assert.equal(result.code, 0);\n\n    const detail = await voteLatestProposalAndWait(info.title);\n    console.log(\n      `proposal ${detail.proposal_id} end ${detail.voting_end_time}`,\n      detail.status,\n    );\n    assert.equal(detail.status, 'PROPOSAL_STATUS_PASSED');\n  });\n};\n\nexport const evalBundles = async (dir: string) => {\n  const bundleInfos = await readBundles(dir);\n\n  await passCoreEvalProposal(bundleInfos, { title: `Core eval of ${dir}` });\n};\n","import dbOpenAmbient from 'better-sqlite3';\nimport { NonNullish } from './assert.js';\n\nexport const HOME = NonNullish(process.env.HOME);\n\n/**\n * @file look up vat incarnation from kernel DB\n * @see {getIncarnation}\n */\n\nconst swingstorePath = '~/.agoric/data/agoric/swingstore.sqlite';\n\n/**\n * SQL short-hand\n *\n * @param {import('better-sqlite3').Database} db\n */\nexport const dbTool = db => {\n  const prepare = (strings, ...params) => {\n    const dml = strings.join('?');\n    return { stmt: db.prepare(dml), params };\n  };\n  const sql = (strings, ...args) => {\n    const { stmt, params } = prepare(strings, ...args);\n    return stmt.all(...params);\n  };\n  sql.get = (strings, ...args) => {\n    const { stmt, params } = prepare(strings, ...args);\n    return stmt.get(...params);\n  };\n  return sql;\n};\n\n/** @param {import('better-sqlite3').Database} db */\nconst makeSwingstoreTool = db => {\n  const sql = dbTool(db);\n\n  /** @param {string} key */\n  // @ts-expect-error sqlite typedefs\n  const kvGet = key => sql.get`select * from kvStore where key = ${key}`.value;\n  const kvGetSafe = key => sql.get`select * from kvStore where key = ${key}`;\n  /** @param {string} key */\n  const kvGetJSON = key => JSON.parse(kvGet(key));\n\n  /** @param {string} vatID */\n  const lookupVat = vatID => {\n    return Object.freeze({\n      source: () => kvGetJSON(`${vatID}.source`),\n      options: () => kvGetJSON(`${vatID}.options`),\n      currentSpan: () =>\n        sql.get`select * from transcriptSpans where isCurrent = 1 and vatID = ${vatID}`,\n      terminated: () => {\n        const t = kvGetSafe('vat.terminated');\n        if (!t) {\n          return false;\n        }\n        const terminatedIDs = kvGetJSON('vat.terminated');\n        return terminatedIDs.includes(vatID);\n      },\n    });\n  };\n\n  return Object.freeze({\n    /**\n     * Return the vatID for a vat whose name includes the provided string, or an\n     * error if there is no such vat. If multiple vats match, the return value\n     * prefers static vats over dynamic vats but makes no other guarantees.\n     *\n     * @param {string} vatName\n     */\n    findVat: vatName => {\n      /** @type {string[]} */\n      const staticNames = kvGetJSON('vat.names');\n      for (const staticName of staticNames) {\n        if (staticName.includes(vatName)) {\n          return kvGet(`vat.name.${staticName}`);\n        }\n      }\n      /** @type {string[]} */\n      const dynamicIDs = kvGetJSON('vat.dynamicIDs');\n      for (const vatID of dynamicIDs) {\n        if (lookupVat(vatID).options().name.includes(vatName)) {\n          return vatID;\n        }\n      }\n      throw Error(`vat not found: ${vatName}`);\n    },\n    /**\n     * Return an array of vatIDs for which the vat name includes the provided string.\n     *\n     * @param {string} vatName\n     */\n    findVats: vatName => {\n      const vatIDs = [];\n      /** @type {string[]} */\n      const staticNames = kvGetJSON('vat.names');\n      for (const staticName of staticNames) {\n        if (staticName.includes(vatName)) {\n          vatIDs.push(kvGet(`vat.name.${staticName}`));\n        }\n      }\n      /** @type {string[]} */\n      const dynamicIDs = kvGetJSON('vat.dynamicIDs');\n      for (const vatID of dynamicIDs) {\n        if (lookupVat(vatID).options().name.includes(vatName)) {\n          vatIDs.push(vatID);\n        }\n      }\n      return vatIDs;\n    },\n    lookupVat,\n  });\n};\n\n/** @typedef {ReturnType<typeof makeSwingstoreTool>} SwingstoreTool */\n\nconst buildSwingstoreTool = () => {\n  const fullPath = swingstorePath.replace(/^~/, NonNullish(HOME));\n  return makeSwingstoreTool(dbOpenAmbient(fullPath, { readonly: true }));\n};\n\n/**\n * @param {SwingstoreTool} kStore\n * @param {string} vatID\n * @returns {{vatName: string, vatID: string, incarnation: number, terminated: boolean}}\n */\nconst getVatDetailsFromID = (kStore, vatID) => {\n  const vatInfo = kStore.lookupVat(vatID);\n  const vatName = vatInfo.options().name;\n  const source = vatInfo.source();\n  const { incarnation } = /** @type {{incarnation: number}} */ (\n    vatInfo.currentSpan()\n  );\n  const terminated = vatInfo.terminated();\n  return { vatName, vatID, incarnation, ...source, terminated };\n};\n\n/** @param {string} vatName */\nexport const getVatDetails = async vatName => {\n  const kStore = buildSwingstoreTool();\n  const vatID = kStore.findVat(vatName);\n  return getVatDetailsFromID(kStore, vatID);\n};\n\n/**\n * @param {string} vatName\n * @returns {Promise<number>}\n */\nexport const getIncarnation = async vatName => {\n  const details = await getVatDetails(vatName);\n\n  // misc info to stderr\n  console.error(JSON.stringify(details));\n\n  return details.incarnation;\n};\n\n/** @param {string} vatSubstring substring to search for within the vat name. */\nexport const getDetailsMatchingVats = async vatSubstring => {\n  const kStore = buildSwingstoreTool();\n  const vatIDs = kStore.findVats(vatSubstring);\n  const infos = [];\n  for (const vatID of vatIDs) {\n    infos.push(getVatDetailsFromID(kStore, vatID));\n  }\n\n  return infos;\n};\n","export const step = async (name: string, fn: Function) => {\n  console.log('START', name);\n  await fn();\n  console.log('END', name);\n};\n","import { promisify } from 'util';\n\nconst dbg = label => x => {\n  label;\n  // console.log(label, x);\n  return x;\n};\n\n/**\n *\n * @param {string} root\n * @param {object} io\n * @param {typeof fetch} io.fetch\n * @param {(...msgs: any[]) => void} [io.log]\n *\n * @typedef {ReturnType<typeof makeWebRd>} TextRd\n */\nexport const makeWebRd = (root, { fetch, log = console.log }) => {\n  /** @param {string} there */\n  const make = there => {\n    const join = (...segments) => {\n      dbg('web.join')({ there, segments });\n      let out = there;\n      for (const segment of segments) {\n        out = `${new URL(segment, out)}`;\n      }\n      return out;\n    };\n\n    const checkedFetch = async () => {\n      log('WebRd fetch:', there);\n      const res = await fetch(there);\n      if (!res.ok) {\n        throw Error(`${res.statusText} @ ${there}`);\n      }\n      return res;\n    };\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(join(...segments)),\n      readText: () => checkedFetch().then(res => res.text()),\n      readJSON: () => checkedFetch().then(res => res.json()),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'), 'stat' | 'readFile'>} io.fsp\n * @param {Pick<typeof import('path'), 'join'>} io.path\n *\n * @typedef {ReturnType<typeof makeFileRd>} FileRd\n */\nexport const makeFileRd = (root, { fsp, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      stat: () => fsp.stat(there),\n      readText: () => fsp.readFile(there, 'utf8'),\n      readJSON: () => self.readText().then(txt => JSON.parse(txt)),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'), 'stat' | 'readFile'>} io.fsp\n * @param {Pick<typeof import('fs'), 'readdir' | 'existsSync'>} io.fs\n * @param {Pick<typeof import('path'), 'join' | 'basename'>} io.path\n *\n * @typedef {ReturnType<typeof makeDirRd>} DirRd\n */\nexport const makeDirRd = (root, { fsp, fs, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const fileRd = makeFileRd(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      /** @param {string} [suffix] */\n      basename: suffix => path.basename(there, suffix),\n      asFileRd: () => fileRd,\n      existsSync: () => fs.existsSync(there),\n      /** @returns {Promise<DirRd[]>} */\n      readdir: () =>\n        promisify(fs.readdir)(there).then(files =>\n          files.map(segment => self.join(segment)),\n        ),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read/write access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'),\n *         'stat' | 'readFile' | 'writeFile' | 'unlink' | 'mkdir' | 'rmdir'\n *        >} io.fsp\n * @param {Pick<typeof import('path'), 'join'>} io.path\n *\n * @typedef {ReturnType<typeof makeFileRW>} FileRW\n */\nexport const makeFileRW = (root, { fsp, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const ro = makeFileRd(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      readOnly: () => ro,\n      /** @param {string[]} segments */\n      join: (...segments) =>\n        make(dbg('FileRW join')(path.join(there, ...segments))),\n      writeText: text => fsp.writeFile(there, text, 'utf8'),\n      unlink: () => fsp.unlink(there),\n      mkdir: () => fsp.mkdir(there, { recursive: true }),\n      rmdir: () => fsp.rmdir(there),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read/write access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'),\n *         'stat' | 'readFile' | 'writeFile' | 'unlink' | 'mkdir' | 'rmdir' | 'open'\n *        >} io.fsp\n * @param {Pick<typeof import('fs'), 'readdir' | 'existsSync'>} io.fs\n * @param {Pick<typeof import('path'), 'join' | 'basename'>} io.path\n *\n * @typedef {ReturnType<typeof makeDirRW>} DirRW\n */\nexport const makeDirRW = (root, { fsp, fs, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const ro = makeDirRd(there, { fsp, fs, path });\n    const fileRW = makeFileRW(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      readOnly: () => ro,\n      asFileRW: () => fileRW,\n      mkdir: () => fsp.mkdir(there, { recursive: true }).then(_ => {}),\n      rmdir: () => fsp.rmdir(there),\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      touch: async () => {\n        const handle = await fsp.open(there, 'a');\n        await handle.close();\n      },\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * @param {TextRd} src\n * @param {FileRW} dest\n *\n * @typedef {ReturnType<typeof makeWebCache>} WebCache\n */\nexport const makeWebCache = (src, dest) => {\n  /** @type {Map<string, Promise<FileRd>>} */\n  const saved = new Map();\n\n  /** @param {string} segment */\n  const getFileP = segment => {\n    const target = src.join(segment);\n    const addr = `${target}`;\n    const cached = saved.get(addr);\n    if (cached) return cached;\n\n    const f = dest.join(segment);\n    /** @type {Promise<FileRd>} */\n    const p = new Promise((resolve, reject) =>\n      target\n        .readText()\n        .then(txt =>\n          dest\n            .mkdir()\n            .then(() => f.writeText(txt).then(_ => resolve(f.readOnly()))),\n        )\n        .catch(reject),\n    );\n    saved.set(addr, p);\n    return p;\n  };\n\n  const remove = async () => {\n    await Promise.all([...saved.values()].map(p => p.then(f => f.unlink())));\n    await dest.rmdir();\n  };\n\n  const self = {\n    toString: () => `${src} -> ${dest}`,\n    /** @param {string} segment */\n    getText: async segment => {\n      const fr = await getFileP(segment);\n      return fr.readText();\n    },\n    /** @param {string} segment */\n    storedPath: segment => getFileP(segment).then(f => f.toString()),\n    /** @param {string} segment */\n    size: async segment => {\n      const fr = await getFileP(segment);\n      const info = await fr.stat();\n      return info.size;\n    },\n    remove,\n  };\n  return self;\n};\n"],"mappings":"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","names":["execFileSync","path","assert","$","assert","$","assert","Fail","fsp","freeze","harden","assert","path","path","agoric","path","agd","assert","fsp","path","process","staticConfig","agd","zipRd","cmap","assert","stat","config","agoric","fetch","join","fsp","path"]}
\ No newline at end of file
+{"version":3,"sources":["../../src/lib/agd-lib.ts","../../src/lib/cliHelper.ts","../../src/lib/assert.js","../../src/lib/constants.js","../../src/lib/commonUpgradeHelpers.ts","../../src/lib/core-eval-support.ts","../../src/lib/unmarshal.js","../../src/lib/vstorage.js","../../src/lib/econHelpers.js","../../src/lib/core-eval.ts","../../src/lib/vat-status.js","../../src/lib/logging.ts","../../src/lib/webAsset.js"],"sourcesContent":["import assert from 'node:assert';\nimport type { ExecFileSyncOptionsWithStringEncoding } from 'node:child_process';\n\nconst { freeze } = Object;\n\nconst agdBinary = 'agd';\n\nexport const makeAgd = ({\n  execFileSync,\n}: {\n  execFileSync: typeof import('child_process').execFileSync;\n}) => {\n  const make = (\n    { home, keyringBackend, rpcAddrs } = {} as {\n      home?: string;\n      keyringBackend?: string;\n      rpcAddrs?: string[];\n    },\n  ) => {\n    const keyringArgs = [\n      ...(home ? ['--home', home] : []),\n      ...(keyringBackend ? [`--keyring-backend`, keyringBackend] : []),\n    ];\n    if (rpcAddrs) {\n      assert.equal(\n        rpcAddrs.length,\n        1,\n        'XXX rpcAddrs must contain only one entry',\n      );\n    }\n    const nodeArgs = [...(rpcAddrs ? [`--node`, rpcAddrs[0]] : [])];\n\n    const exec = (\n      args: string[],\n      opts?: ExecFileSyncOptionsWithStringEncoding,\n    ) => {\n      console.warn(\n        '# invoking agd:',\n        ...[agdBinary, ...args].map(arg =>\n          arg.match(/[^a-zA-Z0-9,._+:@%/-]/)\n            ? `'${arg.replaceAll(`'`, `'\\\\''`)}'`\n            : arg,\n        ),\n      );\n      return execFileSync(agdBinary, args, opts).toString();\n    };\n\n    const outJson = ['--output', 'json'];\n\n    const ro = freeze({\n      status: async () => JSON.parse(exec([...nodeArgs, 'status'])),\n      query: async (\n        qArgs:\n          | [kind: 'gov', domain: string, ...rest: any]\n          | [kind: 'txs', filter: string]\n          | [kind: 'tx', txhash: string]\n          | [mod: 'vstorage', kind: 'data' | 'children', path: string],\n      ) => {\n        const out = exec(['query', ...qArgs, ...nodeArgs, ...outJson], {\n          encoding: 'utf-8',\n          stdio: ['ignore', 'pipe', 'ignore'],\n        });\n\n        try {\n          return JSON.parse(out);\n        } catch (e) {\n          console.error(e);\n          console.info('output:', out);\n        }\n      },\n    });\n    const nameHub = freeze({\n      /**\n       * NOTE: synchronous I/O\n       */\n      lookup: (...path: string[]) => {\n        if (!Array.isArray(path)) {\n          // TODO: use COND || Fail``\n          throw TypeError();\n        }\n        if (path.length !== 1) {\n          throw Error(`path length limited to 1: ${path.length}`);\n        }\n        const [name] = path;\n        const txt = exec(['keys', 'show', `--address`, name, ...keyringArgs]);\n        return txt.trim();\n      },\n    });\n    const rw = freeze({\n      /**\n       * @param {string[]} txArgs\n       * @param {{ chainId: string, from: string, yes?: boolean }} opts\n       */\n      tx: async (\n        txArgs: string[],\n        {\n          chainId,\n          from,\n          yes,\n        }: { chainId: string; from: string; yes?: boolean },\n      ) => {\n        const yesArg = yes ? ['--yes'] : [];\n        const args = [\n          ...nodeArgs,\n          ...[`--chain-id`, chainId],\n          ...keyringArgs,\n          ...[`--from`, from],\n          'tx',\n          ...['--broadcast-mode', 'block'],\n          ...['--gas', 'auto'],\n          ...['--gas-adjustment', '1.3'],\n          ...txArgs,\n          ...yesArg,\n          ...outJson,\n        ];\n        const out = exec(args);\n        try {\n          return JSON.parse(out);\n        } catch (e) {\n          console.error(e);\n          console.info('output:', out);\n        }\n      },\n      ...ro,\n      ...nameHub,\n      readOnly: () => ro,\n      nameHub: () => nameHub,\n      keys: {\n        add: (name: string, mnemonic: string) => {\n          return execFileSync(\n            agdBinary,\n            [...keyringArgs, 'keys', 'add', name, '--recover'],\n            { input: mnemonic },\n          ).toString();\n        },\n      },\n      withOpts: (opts: Record<string, unknown>) =>\n        make({ home, keyringBackend, rpcAddrs, ...opts }),\n    });\n    return rw;\n  };\n  return make();\n};\n","import type { Options as ExecaOptions } from 'execa';\nimport { $, execaCommand } from 'execa';\nimport { NonNullish } from './assert.js';\nimport { SDK_ROOT } from './constants.js';\n\nexport const BINARY = NonNullish(process.env.binary);\n\nexport const executeCommand = async (\n  command: string,\n  params: string[],\n  options: Omit<\n    ExecaOptions,\n    'buffer' | 'encoding' | 'lines' | 'stdio' | 'stdout'\n  > = {},\n) => {\n  const invocation = `${command} ${params.join(' ')}`;\n  console.warn('# invoking:', invocation);\n  const result = await execaCommand(invocation, options);\n  if (!options.stderr) {\n    const { stderr } = result;\n    if (stderr) console.warn(stderr);\n  }\n  return result.stdout;\n};\n\nexport const agd = {\n  query: async <T = any>(...params: string[]) => {\n    const newParams = ['query', ...params, '-o json'];\n    const data = await executeCommand(BINARY, newParams);\n    return JSON.parse(data) as T;\n  },\n  tx: async (...params: string[]) => {\n    const newParams = [\n      'tx',\n      '-bblock',\n      '--gas auto',\n      '--gas-adjustment 1.3',\n      ...params,\n      '-o json',\n    ];\n    const data = await executeCommand(BINARY, newParams, { shell: true });\n    return JSON.parse(data);\n  },\n  keys: async (...params: string[]) => {\n    let newParams = ['keys', ...params];\n    let shouldParse = true;\n\n    if (params.includes('show')) {\n      if (params.includes('-a') || params.includes('-address')) {\n        shouldParse = false;\n      }\n    }\n\n    if (shouldParse) {\n      newParams = [...newParams, '--output json'];\n    }\n\n    const data = await executeCommand(BINARY, newParams, { input: 'Y' });\n    if (!shouldParse) {\n      return data;\n    }\n\n    return JSON.parse(data);\n  },\n  export: async (...params: string[]) => {\n    const newParams = ['export', ...params];\n    const data = await executeCommand(BINARY, newParams);\n    return JSON.parse(data);\n  },\n};\n\nexport const agoric = {\n  follow: async (...params: string[]) => {\n    let newParams = ['follow', ...params];\n    let parseJson = false;\n\n    if (!params.includes('-o')) {\n      newParams = [...newParams, '-o json'];\n      parseJson = true;\n    }\n    const data = await executeCommand('agoric', newParams);\n\n    if (parseJson) {\n      return JSON.parse(data);\n    }\n\n    return data;\n  },\n  wallet: async (...params: string[]) => {\n    const newParams = ['wallet', ...params];\n    return executeCommand('agoric', newParams);\n  },\n  run: async (...params: string[]) => {\n    const newParams = ['run', ...params];\n    return executeCommand('agoric', newParams);\n  },\n};\n\nexport const agopsLocation = `${SDK_ROOT}/node_modules/.bin/agops`;\n\nexport const agops = {\n  vaults: async (...params: string[]) => {\n    const newParams = ['vaults', ...params];\n\n    const result = await executeCommand(agopsLocation, newParams);\n\n    if (params[0] === 'list') {\n      if (result === '') return [];\n\n      return result.split('\\n');\n    }\n\n    return result;\n  },\n  ec: async (...params: string[]) => {\n    const newParams = ['ec', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  oracle: async (...params: string[]) => {\n    const newParams = ['oracle', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  perf: async (...params: string[]) => {\n    const newParams = ['perf', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n  auctioneer: async (...params: string[]) => {\n    const newParams = ['auctioneer', ...params];\n    return executeCommand(agopsLocation, newParams);\n  },\n};\n\nexport const bundleSourceLocation = `${SDK_ROOT}/node_modules/.bin/bundle-source`;\n\n/**\n * @returns Returns the filepath of the bundle\n */\nexport const bundleSource = async (filePath: string, bundleName: string) => {\n  const output =\n    await $`${bundleSourceLocation} --cache-json /tmp ${filePath} ${bundleName}`;\n  console.log(output.stderr);\n  return `/tmp/bundle-${bundleName}.json`;\n};\n\nexport const wellKnownIdentities = async (io = {}) => {\n  // @ts-expect-error\n  const { agoric: { follow = agoric.follow } = {} } = io;\n  const zip = (xs: unknown[], ys: unknown[]) => xs.map((x, i) => [x, ys[i]]);\n  const fromSmallCapsEntries = (txt: string) => {\n    const { body, slots } = JSON.parse(txt);\n    const theEntries = zip(JSON.parse(body.slice(1)), slots).map(\n      // @ts-expect-error\n      ([[name, ref], boardID]) => {\n        const iface = ref.replace(/^\\$\\d+\\./, '');\n        return [name, { iface, boardID }];\n      },\n    );\n    return Object.fromEntries(theEntries);\n  };\n\n  const installation = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.installation', '-o', 'text'),\n  );\n\n  const instance = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.instance', '-o', 'text'),\n  );\n\n  const brand = fromSmallCapsEntries(\n    await follow('-lF', ':published.agoricNames.brand', '-o', 'text'),\n  );\n\n  return { brand, installation, instance };\n};\n\nexport const smallCapsContext = () => {\n  const slots = [] as string[]; // XXX global mutable state\n  const smallCaps = {\n    Nat: (n: number | bigint) => `+${n}`,\n    // XXX mutates obj\n    ref: (obj: any) => {\n      if (obj.ix) return obj.ix;\n      const ix = slots.length;\n      slots.push(obj.boardID);\n      obj.ix = `$${ix}.Alleged: ${obj.iface}`;\n      return obj.ix;\n    },\n  };\n\n  const toCapData = (body: unknown) => {\n    const capData = { body: `#${JSON.stringify(body)}`, slots };\n    return JSON.stringify(capData);\n  };\n\n  return { smallCaps, toCapData };\n};\n","// XXX subset of @endo/assert\n// consider using Node built-in assert https://nodejs.org/api/assert.html\n\nexport const Fail = (template, ...args) => {\n  throw Error(String.raw(template, ...args.map(val => String(val))));\n};\n\nexport const assert = (cond, msg = 'check failed') => {\n  if (!cond) {\n    throw Error(msg);\n  }\n};\n\nassert.typeof = (val, type) => {\n  if (typeof val !== type) {\n    throw Error(`expected ${type}, got ${typeof val}`);\n  }\n};\n\n/** @type {<T>(val: T | undefined) => T} */\nexport const NonNullish = val => {\n  if (!val) throw Error('required');\n  return val;\n};\n","export const GOV1ADDR = 'agoric1ee9hr0jyrxhy999y755mp862ljgycmwyp4pl7q';\nexport const GOV2ADDR = 'agoric1wrfh296eu2z34p6pah7q04jjuyj3mxu9v98277';\nexport const GOV3ADDR = 'agoric1ydzxwh6f893jvpaslmaz6l8j2ulup9a7x8qvvq';\nexport const USER1ADDR = 'agoric1rwwley550k9mmk6uq6mm6z4udrg8kyuyvfszjk';\nexport const VALIDATORADDR = 'agoric1estsewt6jqsx77pwcxkn5ah0jqgu8rhgflwfdl';\n\nexport const ATOM_DENOM = process.env.ATOM_DENOM || 'uatom';\n\nexport const CHAINID = process.env.CHAINID || 'agoric-3';\n\nexport const SDK_ROOT = process.env.AGORIC_SDK || '/usr/src/agoric-sdk';\n","import {\n  $,\n  type TemplateExpression,\n  type Options as ExecaOptions,\n} from 'execa';\nimport assert from 'node:assert';\nimport fsp from 'node:fs/promises';\nimport * as path from 'node:path';\nimport { agd, agops, agoric } from './cliHelper.js';\nimport { CHAINID, VALIDATORADDR } from './constants.js';\n\nconst waitForBootstrap = async (): Promise<number> => {\n  const endpoint = 'localhost';\n  while (true) {\n    const { stdout: json } = await $({\n      reject: false,\n    })`curl -s --fail -m 15 ${`${endpoint}:26657/status`}`;\n\n    if (json.length === 0) {\n      continue;\n    }\n\n    const data = JSON.parse(json);\n\n    if (data.jsonrpc !== '2.0') {\n      continue;\n    }\n\n    const lastHeight = data.result.sync_info.latest_block_height;\n\n    if (lastHeight !== '1') {\n      return lastHeight;\n    }\n\n    await new Promise(r => setTimeout(r, 2000));\n  }\n};\n\nexport const waitForBlock = async (n = 1) => {\n  console.log(`waitForBlock waiting for ${n} new block(s)...`);\n  const h0 = await waitForBootstrap();\n  let lastHeight = h0;\n  for (let i = 0; i < n; i += 1) {\n    while (true) {\n      await new Promise(r => setTimeout(r, 1000));\n      const currentHeight = await waitForBootstrap();\n      if (currentHeight !== lastHeight) {\n        console.log(`waitForBlock saw new height ${currentHeight}`);\n        lastHeight = currentHeight;\n        break;\n      }\n    }\n  }\n};\n\nexport const provisionSmartWallet = async (address: string, amount: string) => {\n  console.log(`funding ${address}`);\n  await agd.tx(\n    'bank',\n    'send',\n    'validator',\n    address,\n    amount,\n    '-y',\n    '--keyring-backend=test',\n    `--chain-id=\"${CHAINID}\"`,\n  );\n  await waitForBlock();\n\n  console.log(`provisioning ${address}`);\n  await agd.tx(\n    'swingset',\n    'provision-one',\n    'my-wallet',\n    address,\n    'SMART_WALLET',\n    '--keyring-backend=test',\n    '-y',\n    `--chain-id=\"${CHAINID}\"`,\n    `--from=\"${address}\"`,\n  );\n\n  await waitForBlock(2);\n  console.log(await agoric.wallet('show', `--from ${address}`));\n};\n\nexport const newOfferId = async () => {\n  const { stdout: date } = await $`date +${'%s%3M'}`;\n  await new Promise(r => setTimeout(r, 1000));\n\n  return date;\n};\n\nexport const mkTemp = async (template: string) => {\n  const { stdout: data } = await $({\n    shell: true,\n  })`mktemp -t ${template}`;\n  return data;\n};\n\nexport const calculateWalletState = async (\n  addr: string,\n): Promise<'old' | 'revived' | 'upgraded'> => {\n  const result = await agoric.follow(\n    '-lF',\n    `:published.wallet.${addr}`,\n    '-o',\n    'text',\n  );\n\n  const body = JSON.parse(result).body;\n  let state = body;\n\n  if (body.includes('@qclass')) {\n    state = 'old';\n  } else if (body.includes('#{}')) {\n    state = 'upgraded';\n  } else if (body.includes('#')) {\n    state = 'revived';\n  }\n\n  return state;\n};\n\nexport const executeOffer = async (\n  address: string,\n  offerPromise: string | Promise<string>,\n  options: Omit<\n    ExecaOptions,\n    'buffer' | 'encoding' | 'lines' | 'stdio' | 'stdout'\n  > = {},\n) => {\n  const offerPath = await mkTemp('agops.XXX');\n  const offer = await offerPromise;\n  await fsp.writeFile(offerPath, offer);\n\n  if (options.verbose) {\n    console.warn(\n      `# ${offerPath}:`,\n      await fsp.readFile(offerPath, { encoding: 'utf8' }),\n    );\n  }\n  const stdout = await agops.perf(\n    'satisfaction',\n    '--from',\n    address,\n    '--executeOffer',\n    offerPath,\n    '--keyring-backend=test',\n    ...(options.verbose ? ['--verbose'] : []),\n  );\n  console.warn(stdout);\n};\n\nexport const getUser = async (user: string): Promise<string> => {\n  return agd.keys('show', user, '-a', '--keyring-backend=test');\n};\n\n/**\n *\n * @param user\n * @returns user address\n */\nexport const addUser = async (user: string) => {\n  await agd.keys('add', user, '--keyring-backend=test');\n\n  return getUser(user);\n};\n\ninterface V047ProposalMessage {\n  '@type': string;\n  content: {\n    title: string;\n  };\n}\n\ninterface V050ProposalMessage {\n  type: string;\n  value: {\n    content: {\n      type: string;\n      value: {\n        title: string;\n      };\n    };\n  };\n}\n\ntype Proposal = {\n  content?: { title: string };\n  id: string;\n  messages?: Array<V047ProposalMessage | V050ProposalMessage>;\n  proposal_id?: string;\n  status: string;\n  title?: string;\n  voting_end_time: unknown;\n};\n\nexport const voteLatestProposalAndWait = async (\n  title?: string,\n): Promise<{\n  proposal_id: string;\n  voting_end_time: unknown;\n  status: string;\n}> => {\n  const getProposal = async (proposalId: Proposal['id']) => {\n    const proposal = await agd.query<Proposal | { proposal: Proposal }>(\n      'gov',\n      'proposal',\n      proposalId,\n    );\n    assert(proposal, `Proposal ${lastProposalId} not found`);\n    if ('proposal' in proposal) return proposal.proposal;\n    return proposal;\n  };\n\n  await waitForBlock();\n  let { proposals } = (await agd.query('gov', 'proposals')) as {\n    proposals: Array<Proposal>;\n  };\n  if (title) {\n    proposals = proposals.filter(proposal => {\n      if (proposal.title === title) {\n        return true;\n      }\n      if (proposal.content?.title === title) {\n        return true;\n      }\n      if (proposal.messages) {\n        return proposal.messages.some(message => {\n          let typeUrl: string;\n          let msgTitle: string;\n          if ('@type' in message) {\n            typeUrl = message['@type'];\n            msgTitle = message?.content?.title;\n          } else {\n            typeUrl = message.type;\n            msgTitle = message?.value?.content?.value?.title;\n          }\n\n          typeUrl === '/cosmos.gov.v1.MsgExecLegacyContent' ||\n            Fail`Unsupported proposal message type ${typeUrl}`;\n          return msgTitle === title;\n        });\n      } else {\n        Fail`Unrecognized proposal shape ${Object.keys(proposal)}`;\n      }\n    });\n  }\n  let lastProposal = proposals.at(-1);\n\n  assert(lastProposal, `No last proposal found`);\n\n  const lastProposalId = lastProposal.proposal_id || lastProposal.id;\n\n  assert(lastProposalId, `Invalid proposal ${lastProposal}`);\n\n  if (lastProposal.status === 'PROPOSAL_STATUS_DEPOSIT_PERIOD') {\n    await agd.tx(\n      'gov',\n      'deposit',\n      lastProposalId,\n      '50000000ubld',\n      '--from',\n      VALIDATORADDR,\n      `--chain-id=${CHAINID}`,\n      '--yes',\n      '--keyring-backend',\n      'test',\n    );\n\n    await waitForBlock();\n\n    lastProposal = await getProposal(lastProposalId);\n  }\n\n  lastProposal.status === 'PROPOSAL_STATUS_VOTING_PERIOD' ||\n    Fail`Latest proposal ${lastProposalId} not in voting period (status=${lastProposal.status})`;\n\n  await agd.tx(\n    'gov',\n    'vote',\n    lastProposalId,\n    'yes',\n    '--from',\n    VALIDATORADDR,\n    `--chain-id=${CHAINID}`,\n    '--yes',\n    '--keyring-backend',\n    'test',\n  );\n\n  for (\n    ;\n    lastProposal.status !== 'PROPOSAL_STATUS_PASSED' &&\n    lastProposal.status !== 'PROPOSAL_STATUS_REJECTED' &&\n    lastProposal.status !== 'PROPOSAL_STATUS_FAILED';\n    await waitForBlock()\n  ) {\n    lastProposal = await getProposal(lastProposalId);\n    assert(lastProposal, `Proposal ${lastProposalId} not found`);\n    console.log(\n      `Waiting for proposal ${lastProposalId} to pass (status=${lastProposal.status})`,\n    );\n  }\n  return { proposal_id: lastProposalId, ...lastProposal };\n};\n\nconst Fail = (\n  template: { raw: readonly string[] | ArrayLike<string> },\n  ...args: unknown[]\n) => {\n  throw Error(String.raw(template, ...args.map(val => String(val))));\n};\n\n/**\n * Parse output of `agoric run proposal-builder.js`\n *\n * @param {string} txt\n *\n * adapted from packages/boot/test/bootstrapTests/supports.js\n */\nconst parseProposalParts = (txt: string) => {\n  const evals = [\n    ...txt.matchAll(/swingset-core-eval (?<permit>\\S+) (?<script>\\S+)/g),\n  ].map(m => {\n    if (!m.groups) throw Fail`Invalid proposal output ${m[0]}`;\n    const { permit, script } = m.groups;\n    return { permit, script };\n  });\n  evals.length || Fail`No swingset-core-eval found in proposal output: ${txt}`;\n\n  const bundles = [...txt.matchAll(/swingset install-bundle @([^\\n]+)/gm)].map(\n    ([, bundle]) => bundle,\n  );\n  bundles.length || Fail`No bundles found in proposal output: ${txt}`;\n\n  return { evals, bundles };\n};\n\nexport const proposalBuilder = async (fileName: TemplateExpression) => {\n  const { stdout: output } = await $({ cwd: '/tmp' })`agoric run ${fileName}`;\n  const { evals, bundles } = parseProposalParts(output);\n\n  const evalsWithLocation = evals.map(e => {\n    return {\n      permit: path.join('/tmp', e.permit),\n      script: path.join('/tmp', e.script),\n    };\n  });\n\n  return { evals: evalsWithLocation, bundles };\n};\n\nexport const installBundle = async (addr: string, bundlePath: string) => {\n  await agd.tx(\n    'swingset',\n    'install-bundle',\n    `@${bundlePath}`,\n    '--from',\n    addr,\n    '--keyring-backend=test',\n    '--chain-id',\n    CHAINID,\n    '-bblock',\n    '--yes',\n  );\n};\n\nexport const submitProposal = async (\n  scriptPath: string,\n  permitPath: string,\n  title: string,\n  description: string,\n) => {\n  await agd.tx(\n    'gov',\n    'submit-proposal',\n    'swingset-core-eval',\n    permitPath,\n    scriptPath,\n    `--title=\"${title}\"`,\n    `--description=\"${description}\"`,\n    '--deposit=10000000ubld',\n    '--from',\n    VALIDATORADDR,\n    '--keyring-backend=test',\n    '--chain-id',\n    CHAINID,\n    '-bblock',\n    '--yes',\n  );\n\n  await voteLatestProposalAndWait(title);\n};\n","import * as fsp from 'node:fs/promises';\n\nimport { Fail, NonNullish } from './assert.js';\nimport { Far, makeMarshal, makeTranslationTable } from './unmarshal.js';\n\n// TODO: factor out ambient authority from these\n// or at least allow caller to supply authority.\nimport { agoric } from './cliHelper.js';\nimport { getISTBalance, mintIST } from './econHelpers.js';\nimport { type StaticConfig } from './core-eval.js';\nimport path from 'node:path';\n\n// move to unmarshal.js?\nconst makeBoardUnmarshal = () => {\n  const synthesizeRemotable = (_slot: unknown, iface: string) =>\n    Far(iface.replace(/^Alleged: /, ''), {});\n\n  const { convertValToSlot, convertSlotToVal } = makeTranslationTable(\n    (slot: unknown) => Fail`unknown id: ${slot}`,\n    synthesizeRemotable,\n  );\n\n  return makeMarshal(convertValToSlot, convertSlotToVal);\n};\n\nexport const getContractInfo = async (path: string, io = {} as any) => {\n  const m = makeBoardUnmarshal();\n  const {\n    agoric: { follow = agoric.follow },\n    prefix = 'published.',\n  } = io;\n  console.log('@@TODO: prevent agoric follow hang', prefix, path);\n  const txt = await follow('-lF', `:${prefix}${path}`, '-o', 'text');\n  const { body, slots } = JSON.parse(txt);\n  return m.fromCapData({ body, slots });\n};\n\n/**\n * @param record - e.g. { color: 'blue' }\n * @returns e.g. ['--color', 'blue']\n */\nexport const flags = (record: Record<string, string>): string[] => {\n  return Object.entries(record)\n    .map(([k, v]) => [`--${k}`, v])\n    .flat();\n};\n\nexport const txAbbr = (tx: any) => {\n  const { txhash, codespace, code, height, gas_used } = tx;\n  return { txhash, codespace, code, height, gas_used };\n};\n\nexport const loadedBundleIds = (swingstore: any) => {\n  const ids = swingstore`SELECT bundleID FROM bundles`.map(\n    (r: { bundleID: string }) => r.bundleID,\n  );\n  return ids;\n};\n\n/**\n * @param cacheFn - e.g. /home/me.agoric/cache/b1-DEADBEEF.json\n */\nexport const bundleDetail = (cacheFn: string) => {\n  const fileName = NonNullish(cacheFn.split('/').at(-1));\n  const id = fileName.replace(/\\.json$/, '');\n  const hash = id.replace(/^b1-/, '');\n  return { fileName, endoZipBase64Sha512: hash, id };\n};\n\nconst importBundleCost = (bytes: number, price = 0.002) => {\n  return bytes * price;\n};\n\nexport type BundleInfo = {\n  name: string;\n  dir: string;\n  bundles: string[];\n  evals: { permit: string; script: string }[];\n};\n\nconst mintCalc = (\n  myIST: number,\n  cost: number,\n  opts: {\n    unit?: number;\n    padding?: number;\n    minInitialDebt?: number;\n    collateralPrice: number;\n  },\n) => {\n  const {\n    unit = 1_000_000,\n    padding = 1,\n    minInitialDebt = 6,\n    collateralPrice,\n  } = opts;\n  const { round, max } = Math;\n  const wantMinted = max(round(cost - myIST + padding), minInitialDebt);\n  const giveCollateral = round(wantMinted / collateralPrice) + 1;\n  const sendValue = round(giveCollateral * unit);\n  return { wantMinted, giveCollateral, sendValue };\n};\n\nexport const ensureISTForInstall = async (\n  agd: ReturnType<typeof import('../lib/agd-lib.js').makeAgd>,\n  config: StaticConfig,\n  bytes: number,\n  { log }: { log: (...args: any[]) => void },\n) => {\n  const cost = importBundleCost(bytes);\n  log({ totalSize: bytes, cost });\n  const { installer } = config;\n  const addr = agd.lookup(installer);\n  const istBalance = await getISTBalance(addr);\n\n  if (istBalance > cost) {\n    log('balance sufficient', { istBalance, cost });\n    return;\n  }\n  const { sendValue, wantMinted, giveCollateral } = mintCalc(\n    istBalance,\n    cost,\n    config,\n  );\n  log({ wantMinted });\n  await mintIST(addr, sendValue, wantMinted, giveCollateral);\n};\n\nexport const readBundles = async (dir: string) => {\n  const files = await fsp.readdir(dir);\n  const names = files.filter(f => f.endsWith('.js')).map(f => f.slice(0, -3));\n  const bundleInfos: BundleInfo[] = [];\n  for (const name of names) {\n    const evals = [{ permit: `${name}-permit.json`, script: `${name}.js` }];\n    const content = await fsp.readFile(path.join(dir, `${name}.js`), 'utf8');\n    const bundleIds = content.matchAll(/b1-[a-z0-9]+/g);\n    const bundles = Array.from(bundleIds).map(id => `${id}.json`);\n    bundleInfos.push({ evals, bundles, name, dir });\n  }\n  return bundleInfos;\n};\n","// TODO use actual @endo/marshal\n\nconst {\n  create,\n  entries,\n  fromEntries,\n  freeze,\n  keys,\n  setPrototypeOf,\n  prototype: objectPrototype,\n} = Object;\nconst { isArray } = Array;\n\nconst sigilDoc = {\n  '!': 'escaped string',\n  '+': `non-negative bigint`,\n  '-': `negative bigint`,\n  '#': `manifest constant`,\n  '%': `symbol`,\n  $: `remotable`,\n  '&': `promise`,\n};\nconst sigils = keys(sigilDoc).join('');\n\nconst { freeze: harden } = Object; // XXX\n\n/**\n * @template {Record<string, any>} O\n * @param {O} original\n * @template R map result\n * @param {(value: O[keyof O], key: keyof O) => R} mapFn\n * @returns {{ [P in keyof O]: R}}\n */\nexport const objectMap = (original, mapFn) => {\n  const ents = entries(original);\n  const mapEnts = ents.map(([k, v]) => [k, mapFn(v, k)]);\n  return harden(fromEntries(mapEnts));\n};\nharden(objectMap);\n\nexport const makeMarshal = (_v2s, convertSlotToVal = (s, _i) => s) => {\n  const fromCapData = ({ body, slots }) => {\n    const recur = v => {\n      switch (typeof v) {\n        case 'boolean':\n        case 'number':\n          return v;\n        case 'string':\n          if (v === '') return v;\n          const sigil = v.slice(0, 1);\n          if (!sigils.includes(sigil)) return v;\n          switch (sigil) {\n            case '!':\n              return v.slice(1);\n            case '+':\n              return BigInt(v.slice(1));\n            case '-':\n              return -BigInt(v.slice(1));\n            case '$': {\n              const [ix, iface] = v.slice(1).split('.');\n              return convertSlotToVal(slots[Number(ix)], iface);\n            }\n            case '#':\n              switch (v) {\n                case '#undefined':\n                  return undefined;\n                case '#Infinity':\n                  return Infinity;\n                case '#NaN':\n                  return Infinity;\n                default:\n                  throw RangeError(`Unexpected constant ${v}`);\n              }\n            case '%':\n              // TODO: @@asyncIterator\n              return Symbol.for(v.slice(1));\n            default:\n              throw RangeError(`Unexpected sigil ${sigil}`);\n          }\n        case 'object':\n          if (v === null) return v;\n          if (isArray(v)) {\n            return freeze(v.map(recur));\n          }\n          return freeze(objectMap(v, recur));\n        default:\n          throw RangeError(`Unexpected value type ${typeof v}`);\n      }\n    };\n    const encoding = JSON.parse(body.replace(/^#/, ''));\n    return recur(encoding);\n  };\n\n  const toCapData = () => {\n    throw Error('not implemented');\n  };\n\n  return harden({\n    fromCapData,\n    unserialize: fromCapData,\n    toCapData,\n    serialize: toCapData,\n  });\n};\nharden(makeMarshal);\n\nconst PASS_STYLE = Symbol.for('passStyle');\nexport const Far = (iface, methods) => {\n  const proto = freeze(\n    create(objectPrototype, {\n      [PASS_STYLE]: { value: 'remotable' },\n      [Symbol.toStringTag]: { value: iface },\n    }),\n  );\n  setPrototypeOf(methods, proto);\n  freeze(methods);\n  return methods;\n};\n\nexport const makeTranslationTable = (makeSlot, makeVal) => {\n  const valToSlot = new Map();\n  const slotToVal = new Map();\n\n  const convertValToSlot = val => {\n    if (valToSlot.has(val)) return valToSlot.get(val);\n    const slot = makeSlot(val, valToSlot.size);\n    valToSlot.set(val, slot);\n    slotToVal.set(slot, val);\n    return slot;\n  };\n\n  const convertSlotToVal = (slot, iface) => {\n    if (slotToVal.has(slot)) return slotToVal.get(slot);\n    if (makeVal) {\n      const val = makeVal(slot, iface);\n      valToSlot.set(val, slot);\n      slotToVal.set(slot, val);\n      return val;\n    }\n    throw Error(`no such ${iface}: ${slot}`);\n  };\n\n  return harden({ convertValToSlot, convertSlotToVal });\n};\nharden(makeTranslationTable);\n","import { assert, Fail } from './assert.js';\nimport { agd } from './cliHelper.js';\n\nconst { freeze: harden } = Object; // XXX\n\n// from '@agoric/internal/src/lib-chainStorage.js';\n/** @type {(cell: unknown) => cell is { blockHeight: number;values: unknown[] }} cell */\nconst isStreamCell = cell =>\n  !!(\n    cell &&\n    typeof cell === 'object' &&\n    'values' in cell &&\n    Array.isArray(cell.values) &&\n    'blockHeight' in cell &&\n    typeof cell.blockHeight === 'string' &&\n    /^0$|^[1-9][0-9]*$/.test(cell.blockHeight)\n  );\nharden(isStreamCell);\n\n/**\n * Extract one value from the vstorage stream cell in a QueryDataResponse\n *\n * @param {import('@agoric/cosmic-proto/vstorage/query.js').QueryDataResponse} data\n * @param {number} [index] index of the desired value in a deserialized stream cell\n */\nexport const extractStreamCellValue = (data, index = -1) => {\n  const { value: serialized } = data;\n\n  serialized.length > 0 || Fail`no StreamCell values: ${data}`;\n\n  const streamCell = JSON.parse(serialized);\n  if (!isStreamCell(streamCell)) {\n    throw Fail`not a StreamCell: ${streamCell}`;\n  }\n\n  const { values } = streamCell;\n  values.length > 0 || Fail`no StreamCell values: ${streamCell}`;\n\n  const value = values.at(index);\n  assert.typeof(value, 'string');\n  return value;\n};\nharden(extractStreamCellValue);\n\n/** @param {string} path */\nexport const queryVstorage = path =>\n  agd.query('vstorage', 'data', '--output', 'json', path);\n\n// XXX use endo/marshal?\n/** @param {string} path */\nexport const getQuoteBody = async path => {\n  const queryOut = await queryVstorage(path);\n\n  const body = JSON.parse(JSON.parse(queryOut.value).values[0]);\n  return JSON.parse(body.body.substring(1));\n};\n\n/**\n *\n * @param {string} instanceName\n * @returns {Promise<string | null>} boardId of the named instance in agoricNames\n */\nexport const getInstanceBoardId = async instanceName => {\n  const instanceRec = await queryVstorage(`published.agoricNames.instance`);\n\n  const value = JSON.parse(instanceRec.value);\n  const body = JSON.parse(value.values.at(-1));\n\n  const instances = JSON.parse(body.body.substring(1));\n\n  const key = Object.keys(instances).find(\n    k => instances[k][0] === instanceName,\n  );\n  if (key) {\n    return body.slots[key];\n  }\n  return null;\n};\n","import { executeOffer, waitForBlock } from './commonUpgradeHelpers.js';\nimport { ATOM_DENOM, CHAINID, VALIDATORADDR } from './constants.js';\nimport {\n  agd,\n  agops,\n  executeCommand,\n  agopsLocation,\n  agoric as agoricAmbient,\n} from './cliHelper.js';\nimport { GOV1ADDR, GOV2ADDR, GOV3ADDR } from './constants.js';\nimport { queryVstorage, getQuoteBody, getInstanceBoardId } from './vstorage.js';\n\nconst ORACLE_ADDRESSES = [GOV1ADDR, GOV2ADDR, GOV3ADDR];\n\n// TODO return the id of the new vault so subsequent commands can use it\n/**\n *\n * @param {string} address\n * @param {string} mint\n * @param {string} collateral\n */\nexport const openVault = (address, mint, collateral) => {\n  return executeOffer(\n    address,\n    // @ts-expect-error could return string[] but not in this case\n    agops.vaults('open', '--wantMinted', mint, '--giveCollateral', collateral),\n  );\n};\n\nexport const adjustVault = (address, vaultId, vaultParams) => {\n  let params = [\n    'adjust',\n    '--vaultId',\n    vaultId,\n    '--from',\n    address,\n    ' --keyring-backend=test',\n  ];\n\n  if ('wantCollateral' in vaultParams) {\n    params = [...params, '--wantCollateral', vaultParams.wantCollateral];\n  }\n\n  if ('wantMinted' in vaultParams) {\n    params = [...params, '--wantMinted', vaultParams.wantMinted];\n  }\n\n  if ('giveCollateral' in vaultParams) {\n    params = [...params, '--giveCollateral', vaultParams.giveCollateral];\n  }\n\n  if ('giveMinted' in vaultParams) {\n    params = [...params, '--giveMinted', vaultParams.giveMinted];\n  }\n\n  // @ts-expect-error could return string[] but not in this case\n  return executeOffer(address, agops.vaults(...params));\n};\n\nexport const closeVault = (address, vaultId, mint) => {\n  return executeOffer(\n    address,\n    // @ts-expect-error could return string[] but not in this case\n    agops.vaults(\n      'close',\n      '--vaultId',\n      vaultId,\n      '--giveMinted',\n      mint,\n      '--from',\n      address,\n      '--keyring-backend=test',\n    ),\n  );\n};\n\nexport const mintIST = async (addr, sendValue, wantMinted, giveCollateral) => {\n  await agd.tx(\n    'bank',\n    'send',\n    'validator',\n    addr,\n    `${sendValue}${ATOM_DENOM}`,\n    '--from',\n    VALIDATORADDR,\n    '--chain-id',\n    CHAINID,\n    '--keyring-backend',\n    'test',\n    '--yes',\n  );\n  await openVault(addr, wantMinted, giveCollateral);\n};\n\nexport const getISTBalance = async (addr, denom = 'uist', unit = 1_000_000) => {\n  const coins = await agd.query('bank', 'balances', addr);\n  const coin = coins.balances.find(a => a.denom === denom);\n  return Number(coin.amount) / unit;\n};\n\nexport const checkForOracle = async (t, name) => {\n  const instanceName = `${name}-USD price feed`;\n  const instance = await getInstanceBoardId(name);\n  t.truthy(instance);\n};\n\nexport const registerOraclesForBrand = async (brandIn, oraclesByBrand) => {\n  await null;\n  const promiseArray = [];\n\n  const oraclesWithID = oraclesByBrand.get(brandIn);\n  for (const oracle of oraclesWithID) {\n    const { address, offerId } = oracle;\n    promiseArray.push(\n      executeOffer(\n        address,\n        agops.oracle('accept', '--offerId', offerId, `--pair ${brandIn}.USD`),\n      ),\n    );\n  }\n\n  return Promise.all(promiseArray);\n};\n\n/**\n * Generate a consistent map of oracleIDs for a brand that can be used to\n * register oracles or to push prices. The baseID changes each time new\n * invitations are sent/accepted, and need to be maintained as constants in\n * scripts that use the oracles. Each oracleAddress and brand needs a unique\n * offerId, so we create recoverable IDs using the brandName and oracle id,\n * mixed with the upgrade at which the invitations were accepted.\n *\n * @param {string} baseId\n * @param {string} brandName\n */\nconst addOraclesForBrand = (baseId, brandName) => {\n  const oraclesWithID = [];\n  for (let i = 0; i < ORACLE_ADDRESSES.length; i += 1) {\n    const oracleAddress = ORACLE_ADDRESSES[i];\n    const offerId = `${brandName}.${baseId}.${i}`;\n    oraclesWithID.push({ address: oracleAddress, offerId });\n  }\n  return oraclesWithID;\n};\n\nexport const addPreexistingOracles = async (brandIn, oraclesByBrand) => {\n  await null;\n\n  const oraclesWithID = [];\n  for (let i = 0; i < ORACLE_ADDRESSES.length; i += 1) {\n    const oracleAddress = ORACLE_ADDRESSES[i];\n\n    const path = `published.wallet.${oracleAddress}.current`;\n    const wallet = await getQuoteBody(path);\n    const idToInvitation = wallet.offerToUsedInvitation.find(([k]) => {\n      return !isNaN(k[0]);\n    });\n    if (idToInvitation) {\n      oraclesWithID.push({\n        address: oracleAddress,\n        offerId: idToInvitation[0],\n      });\n    }\n  }\n\n  oraclesByBrand.set(brandIn, oraclesWithID);\n};\n\n/**\n * Generate a consistent map of oracleIDs and brands that can be used to\n * register oracles or to push prices. The baseID changes each time new\n * invitations are sent/accepted, and need to be maintained as constants in\n * scripts that use these records to push prices.\n *\n * @param {string} baseId\n * @param {string[]} brandNames\n */\nexport const generateOracleMap = (baseId, brandNames) => {\n  const oraclesByBrand = new Map();\n  for (const brandName of brandNames) {\n    const oraclesWithID = addOraclesForBrand(baseId, brandName);\n    oraclesByBrand.set(brandName, oraclesWithID);\n  }\n  return oraclesByBrand;\n};\n\nexport const pushPrices = async (price, brandIn, oraclesByBrand, round) => {\n  await waitForBlock(1);\n  // rotate which oracle is first. Use the round number\n  const oracles = oraclesByBrand.get(brandIn);\n  for (let i = 0; i < oracles.length; i += 1) {\n    const offset = (i + round) % oracles.length;\n    const oracle = oraclesByBrand.get(brandIn)[offset];\n    const oracleCmd = await agops.oracle(\n      'pushPriceRound',\n      '--price',\n      price,\n      '--oracleAdminAcceptOfferId',\n      oracle.offerId,\n      '--roundId',\n      round,\n    );\n    await executeOffer(oracle.address, oracleCmd);\n  }\n};\n\nexport const getRoundId = async (price, io = {}) => {\n  const { agoric = { follow: agoricAmbient.follow }, prefix = 'published.' } =\n    io;\n  const path = `:${prefix}priceFeed.${price}-USD_price_feed.latestRound`;\n  const round = await agoric.follow('-lF', path);\n  return parseInt(round.roundId);\n};\n\nexport const getPriceQuote = async price => {\n  const path = `published.priceFeed.${price}-USD_price_feed`;\n  const body = await getQuoteBody(path);\n  return body.amountOut.value;\n};\n\nexport const agopsInter = (...params) => {\n  const newParams = ['inter', ...params];\n  return executeCommand(agopsLocation, newParams);\n};\n\nexport const createBid = (price, addr, offerId) => {\n  return agopsInter(\n    'bid',\n    'by-price',\n    `--price ${price}`,\n    `--give 1.0IST`,\n    '--from',\n    addr,\n    '--keyring-backend test',\n    `--offer-id ${offerId}`,\n  );\n};\n\nexport const getLiveOffers = async addr => {\n  const path = `published.wallet.${addr}.current`;\n  const body = await getQuoteBody(path);\n  return body.liveOffers;\n};\n\nexport const getAuctionCollateral = async index => {\n  const path = `published.auction.book${index}`;\n  const body = await getQuoteBody(path);\n  return body.collateralAvailable.value;\n};\n\nexport const getVaultPrices = async index => {\n  const path = `published.vaultFactory.managers.manager${index}.quotes`;\n  const body = await getQuoteBody(path);\n  return body.quoteAmount;\n};\n\nexport const getProvisionPoolMetrics = async () => {\n  const path = `published.provisionPool.metrics`;\n  return getQuoteBody(path);\n};\n","import { execFileSync } from 'node:child_process'; // TODO: use execa\nimport assert from 'node:assert';\nimport * as fsp from 'node:fs/promises';\nimport * as path from 'node:path';\nimport * as process from 'node:process';\n\nimport { ZipReader } from '@endo/zip';\nimport dbOpen from 'better-sqlite3';\n\nimport { makeAgd } from './agd-lib.js';\nimport { agoric } from './cliHelper.js';\nimport { voteLatestProposalAndWait } from './commonUpgradeHelpers.js';\nimport { dbTool } from './vat-status.js';\nimport {\n  type BundleInfo,\n  bundleDetail,\n  ensureISTForInstall,\n  flags,\n  getContractInfo,\n  loadedBundleIds,\n  readBundles,\n  txAbbr,\n} from './core-eval-support.js';\nimport { step } from './logging.js';\n\nexport const staticConfig = {\n  deposit: '10000000ubld', // 10 BLD\n  installer: 'gov1', // as in: agd keys show gov1\n  proposer: 'validator',\n  collateralPrice: 6, // conservatively low price. TODO: look up\n  swingstorePath: '~/.agoric/data/agoric/swingstore.sqlite',\n};\n\nexport type StaticConfig = typeof staticConfig;\n\nexport type CoreEvalConfig = {\n  title?: string;\n  description?: string;\n};\n\n/**\n * Provide access to the outside world via context.\n *\n * TODO: refactor overlap with mn2-start.test.js\n */\nconst makeTestContext = async (\n  staticConfig: StaticConfig,\n  coreEvalConfig: CoreEvalConfig,\n) => {\n  const config = {\n    chainId: 'agoriclocal',\n    ...staticConfig,\n    ...coreEvalConfig,\n  };\n\n  const agd = makeAgd({ execFileSync }).withOpts({\n    keyringBackend: 'test',\n  });\n\n  const dbPath = staticConfig.swingstorePath.replace(/^~/, process.env.HOME!);\n  const swingstore = dbTool(dbOpen(dbPath, { readonly: true }));\n\n  const before = new Map();\n  return { agd, agoric, swingstore, config, before, fetch };\n};\n\nexport const passCoreEvalProposal = async (\n  bundleInfos: BundleInfo[],\n  coreEvalConfig: CoreEvalConfig = {},\n) => {\n  // XXX vestige of Ava\n  const config = {\n    ...staticConfig,\n  };\n  const context = await makeTestContext(config, coreEvalConfig);\n\n  console.log('Passing core evals...');\n  for (const { name, bundles, evals } of bundleInfos) {\n    console.log(\n      name,\n      evals.map(record => record.script),\n      `(bundle count: ${bundles.length})`,\n    );\n  }\n\n  const bundleEntry = async (bundle: { endoZipBase64: string }) => {\n    const getZipReader = async () => {\n      const { endoZipBase64 } = bundle;\n      const toBlob = (base64: string, type = 'application/octet-stream') =>\n        fetch(`data:${type};base64,${base64}`).then(res => res.blob());\n      const zipBlob = await toBlob(endoZipBase64);\n      // https://github.com/endojs/endo/issues/1811#issuecomment-1751499626\n      const buffer = await zipBlob.arrayBuffer();\n      const bytes = new Uint8Array(buffer);\n      return new ZipReader(bytes);\n    };\n\n    const getCompartmentMap = (zipRd: ZipReader) => {\n      const { content } = zipRd.files.get('compartment-map.json');\n      const td = new TextDecoder();\n      const cmap = JSON.parse(td.decode(content));\n      return cmap;\n    };\n\n    const zipRd = await getZipReader();\n    const cmap = getCompartmentMap(zipRd);\n    return cmap.entry;\n  };\n\n  await step('bundle names: compartmentMap.entry', async () => {\n    for (const { bundles, dir } of bundleInfos) {\n      for (const bundleRef of bundles) {\n        const { fileName } = bundleDetail(bundleRef);\n        const bundle = JSON.parse(\n          await fsp.readFile(path.join(dir, fileName), 'utf8'),\n        );\n        const entry = await bundleEntry(bundle);\n        console.log(`${fileName.slice(0, 'b1-#####'.length)}...`, entry);\n        assert(entry.compartment);\n        assert(entry.module);\n      }\n    }\n  });\n\n  const sum = (xs: number[]) => xs.reduce((a, b) => a + b, 0);\n\n  const readBundleSizes = async () => {\n    const bundleSizes = await Promise.all(\n      bundleInfos.flatMap(({ bundles, dir }) =>\n        bundles.map(async b => {\n          const { fileName } = bundleDetail(b);\n          const stat = await fsp.stat(path.join(dir, fileName));\n          return stat.size;\n        }),\n      ),\n    );\n    const totalSize = sum(bundleSizes);\n    return { bundleSizes, totalSize };\n  };\n\n  await step('ensure enough IST to install bundles', async () => {\n    const { agd, config } = context;\n    const { totalSize } = await readBundleSizes();\n\n    await ensureISTForInstall(agd, config, totalSize, {\n      log: console.log,\n    });\n  });\n\n  await step('ensure bundles installed', async () => {\n    const { agd, swingstore, agoric, config } = context;\n    const { chainId } = config;\n    const loaded = loadedBundleIds(swingstore);\n    const from = agd.lookup(config.installer);\n\n    let todo = 0;\n    let done = 0;\n    for (const { bundles, dir } of bundleInfos) {\n      todo += bundles.length;\n      for (const bundle of bundles) {\n        const { id, fileName, endoZipBase64Sha512 } = bundleDetail(bundle);\n        if (loaded.includes(id)) {\n          console.log('bundle already installed', id);\n          done += 1;\n          continue;\n        }\n\n        const bundleRd = path.join(dir, fileName);\n        const result = await agd.tx(\n          ['swingset', 'install-bundle', `@${bundleRd}`],\n          { from, chainId, yes: true },\n        );\n        console.log(result.code === 0 ? txAbbr(result) : result);\n        assert.equal(result.code, 0);\n\n        const info = await getContractInfo('bundles', { agoric, prefix: '' });\n        console.log(info);\n        done += 1;\n        assert.deepEqual(info, {\n          endoZipBase64Sha512,\n          error: null,\n          installed: true,\n        });\n      }\n    }\n    assert.equal(todo, done);\n  });\n\n  await step('ensure core eval proposal passes', async () => {\n    const { agd, swingstore, config } = context;\n    const from = agd.lookup(config.proposer);\n    const { chainId, deposit } = config;\n    const info = {\n      title: config.title || `Core Eval ${Date.now()}`,\n      description: config.description || 'Core eval proposal',\n    };\n    console.log('submit proposal', info.title);\n\n    // double-check that bundles are loaded\n    const loaded = loadedBundleIds(swingstore);\n    for (const { bundles } of bundleInfos) {\n      for (const bundle of bundles) {\n        const { id } = bundleDetail(bundle);\n        if (!loaded.includes(id)) {\n          assert.fail(`bundle ${id} not loaded`);\n        }\n      }\n    }\n\n    const evalPaths = bundleInfos.flatMap(({ evals, dir }) => {\n      return evals\n        .flatMap(e => [e.permit, e.script])\n        .map(file => path.join(dir, file));\n    });\n\n    const result = await agd.tx(\n      [\n        'gov',\n        'submit-proposal',\n        'swingset-core-eval',\n        ...evalPaths,\n        ...flags({ ...info, deposit }),\n      ],\n      { from, chainId, yes: true },\n    );\n    console.log(txAbbr(result));\n    assert.equal(result.code, 0);\n\n    const detail = await voteLatestProposalAndWait(info.title);\n    console.log(\n      `proposal ${detail.proposal_id} end ${detail.voting_end_time}`,\n      detail.status,\n    );\n    assert.equal(detail.status, 'PROPOSAL_STATUS_PASSED');\n  });\n};\n\nexport const evalBundles = async (dir: string) => {\n  const bundleInfos = await readBundles(dir);\n\n  await passCoreEvalProposal(bundleInfos, { title: `Core eval of ${dir}` });\n};\n","import dbOpenAmbient from 'better-sqlite3';\nimport { NonNullish } from './assert.js';\n\nexport const HOME = NonNullish(process.env.HOME);\n\n/**\n * @file look up vat incarnation from kernel DB\n * @see {getIncarnation}\n */\n\nconst swingstorePath = '~/.agoric/data/agoric/swingstore.sqlite';\n\n/**\n * SQL short-hand\n *\n * @param {import('better-sqlite3').Database} db\n */\nexport const dbTool = db => {\n  const prepare = (strings, ...params) => {\n    const dml = strings.join('?');\n    return { stmt: db.prepare(dml), params };\n  };\n  const sql = (strings, ...args) => {\n    const { stmt, params } = prepare(strings, ...args);\n    return stmt.all(...params);\n  };\n  sql.get = (strings, ...args) => {\n    const { stmt, params } = prepare(strings, ...args);\n    return stmt.get(...params);\n  };\n  return sql;\n};\n\n/** @param {import('better-sqlite3').Database} db */\nconst makeSwingstoreTool = db => {\n  const sql = dbTool(db);\n\n  /** @param {string} key */\n  // @ts-expect-error sqlite typedefs\n  const kvGet = key => sql.get`select * from kvStore where key = ${key}`.value;\n  const kvGetSafe = key => sql.get`select * from kvStore where key = ${key}`;\n  /** @param {string} key */\n  const kvGetJSON = key => JSON.parse(kvGet(key));\n\n  /** @param {string} vatID */\n  const lookupVat = vatID => {\n    return Object.freeze({\n      source: () => kvGetJSON(`${vatID}.source`),\n      options: () => kvGetJSON(`${vatID}.options`),\n      parameters: () => kvGetJSON(`${vatID}.vatParameters`),\n      currentSpan: () =>\n        sql.get`select * from transcriptSpans where isCurrent = 1 and vatID = ${vatID}`,\n      terminated: () => {\n        const t = kvGetSafe('vat.terminated');\n        if (!t) {\n          return false;\n        }\n        const terminatedIDs = kvGetJSON('vat.terminated');\n        return terminatedIDs.includes(vatID);\n      },\n    });\n  };\n\n  return Object.freeze({\n    /**\n     * Return the vatID for a vat whose name includes the provided string, or an\n     * error if there is no such vat. If multiple vats match, the return value\n     * prefers static vats over dynamic vats but makes no other guarantees.\n     *\n     * @param {string} vatName\n     */\n    findVat: vatName => {\n      /** @type {string[]} */\n      const staticNames = kvGetJSON('vat.names');\n      for (const staticName of staticNames) {\n        if (staticName.includes(vatName)) {\n          return kvGet(`vat.name.${staticName}`);\n        }\n      }\n      /** @type {string[]} */\n      const dynamicIDs = kvGetJSON('vat.dynamicIDs');\n      for (const vatID of dynamicIDs) {\n        if (lookupVat(vatID).options().name.includes(vatName)) {\n          return vatID;\n        }\n      }\n      throw Error(`vat not found: ${vatName}`);\n    },\n    /**\n     * Return an array of vatIDs for which the vat name includes the provided string.\n     *\n     * @param {string} vatName\n     */\n    findVats: vatName => {\n      const vatIDs = [];\n      /** @type {string[]} */\n      const staticNames = kvGetJSON('vat.names');\n      for (const staticName of staticNames) {\n        if (staticName.includes(vatName)) {\n          vatIDs.push(kvGet(`vat.name.${staticName}`));\n        }\n      }\n      /** @type {string[]} */\n      const dynamicIDs = kvGetJSON('vat.dynamicIDs');\n      for (const vatID of dynamicIDs) {\n        if (lookupVat(vatID).options().name.includes(vatName)) {\n          vatIDs.push(vatID);\n        }\n      }\n      return vatIDs;\n    },\n    lookupVat,\n  });\n};\n\n/** @typedef {ReturnType<typeof makeSwingstoreTool>} SwingstoreTool */\n\nconst buildSwingstoreTool = () => {\n  const fullPath = swingstorePath.replace(/^~/, NonNullish(HOME));\n  return makeSwingstoreTool(dbOpenAmbient(fullPath, { readonly: true }));\n};\n\n/**\n * @param {SwingstoreTool} kStore\n * @param {string} vatID\n * @returns {{vatName: string, vatID: string, incarnation: number, terminated: boolean}}\n */\nconst getVatDetailsFromID = (kStore, vatID) => {\n  const vatInfo = kStore.lookupVat(vatID);\n  const vatName = vatInfo.options().name;\n  const source = vatInfo.source();\n  const { incarnation } = /** @type {{incarnation: number}} */ (\n    vatInfo.currentSpan()\n  );\n  const terminated = vatInfo.terminated();\n  return { vatName, vatID, incarnation, ...source, terminated };\n};\n\n/** @param {string} vatName */\nexport const getVatDetails = async vatName => {\n  const kStore = buildSwingstoreTool();\n  const vatID = kStore.findVat(vatName);\n  return getVatDetailsFromID(kStore, vatID);\n};\n\n/** @param {string} vatID */\nexport const getVatInfoFromID = async vatID => {\n  const kStore = buildSwingstoreTool();\n  return kStore.lookupVat(vatID);\n};\n\n/**\n * @param {string} vatName\n * @returns {Promise<number>}\n */\nexport const getIncarnation = async vatName => {\n  const details = await getVatDetails(vatName);\n\n  // misc info to stderr\n  console.error(JSON.stringify(details));\n\n  return details.incarnation;\n};\n\n/** @param {string} vatSubstring substring to search for within the vat name. */\nexport const getDetailsMatchingVats = async vatSubstring => {\n  const kStore = buildSwingstoreTool();\n  const vatIDs = kStore.findVats(vatSubstring);\n  const infos = [];\n  for (const vatID of vatIDs) {\n    infos.push(getVatDetailsFromID(kStore, vatID));\n  }\n\n  return infos;\n};\n","export const step = async (name: string, fn: Function) => {\n  console.log('START', name);\n  await fn();\n  console.log('END', name);\n};\n","import { promisify } from 'util';\n\nconst dbg = label => x => {\n  label;\n  // console.log(label, x);\n  return x;\n};\n\n/**\n *\n * @param {string} root\n * @param {object} io\n * @param {typeof fetch} io.fetch\n * @param {(...msgs: any[]) => void} [io.log]\n *\n * @typedef {ReturnType<typeof makeWebRd>} TextRd\n */\nexport const makeWebRd = (root, { fetch, log = console.log }) => {\n  /** @param {string} there */\n  const make = there => {\n    const join = (...segments) => {\n      dbg('web.join')({ there, segments });\n      let out = there;\n      for (const segment of segments) {\n        out = `${new URL(segment, out)}`;\n      }\n      return out;\n    };\n\n    const checkedFetch = async () => {\n      log('WebRd fetch:', there);\n      const res = await fetch(there);\n      if (!res.ok) {\n        throw Error(`${res.statusText} @ ${there}`);\n      }\n      return res;\n    };\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(join(...segments)),\n      readText: () => checkedFetch().then(res => res.text()),\n      readJSON: () => checkedFetch().then(res => res.json()),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'), 'stat' | 'readFile'>} io.fsp\n * @param {Pick<typeof import('path'), 'join'>} io.path\n *\n * @typedef {ReturnType<typeof makeFileRd>} FileRd\n */\nexport const makeFileRd = (root, { fsp, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      stat: () => fsp.stat(there),\n      readText: () => fsp.readFile(there, 'utf8'),\n      readJSON: () => self.readText().then(txt => JSON.parse(txt)),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'), 'stat' | 'readFile'>} io.fsp\n * @param {Pick<typeof import('fs'), 'readdir' | 'existsSync'>} io.fs\n * @param {Pick<typeof import('path'), 'join' | 'basename'>} io.path\n *\n * @typedef {ReturnType<typeof makeDirRd>} DirRd\n */\nexport const makeDirRd = (root, { fsp, fs, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const fileRd = makeFileRd(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      /** @param {string} [suffix] */\n      basename: suffix => path.basename(there, suffix),\n      asFileRd: () => fileRd,\n      existsSync: () => fs.existsSync(there),\n      /** @returns {Promise<DirRd[]>} */\n      readdir: () =>\n        promisify(fs.readdir)(there).then(files =>\n          files.map(segment => self.join(segment)),\n        ),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read/write access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'),\n *         'stat' | 'readFile' | 'writeFile' | 'unlink' | 'mkdir' | 'rmdir'\n *        >} io.fsp\n * @param {Pick<typeof import('path'), 'join'>} io.path\n *\n * @typedef {ReturnType<typeof makeFileRW>} FileRW\n */\nexport const makeFileRW = (root, { fsp, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const ro = makeFileRd(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      readOnly: () => ro,\n      /** @param {string[]} segments */\n      join: (...segments) =>\n        make(dbg('FileRW join')(path.join(there, ...segments))),\n      writeText: text => fsp.writeFile(there, text, 'utf8'),\n      unlink: () => fsp.unlink(there),\n      mkdir: () => fsp.mkdir(there, { recursive: true }),\n      rmdir: () => fsp.rmdir(there),\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * Reify file read/write access as an object.\n *\n * @param {string} root\n * @param {object} io\n * @param {Pick<typeof import('fs/promises'),\n *         'stat' | 'readFile' | 'writeFile' | 'unlink' | 'mkdir' | 'rmdir' | 'open'\n *        >} io.fsp\n * @param {Pick<typeof import('fs'), 'readdir' | 'existsSync'>} io.fs\n * @param {Pick<typeof import('path'), 'join' | 'basename'>} io.path\n *\n * @typedef {ReturnType<typeof makeDirRW>} DirRW\n */\nexport const makeDirRW = (root, { fsp, fs, path }) => {\n  /** @param {string} there */\n  const make = there => {\n    const ro = makeDirRd(there, { fsp, fs, path });\n    const fileRW = makeFileRW(there, { fsp, path });\n    const self = {\n      toString: () => there,\n      readOnly: () => ro,\n      asFileRW: () => fileRW,\n      mkdir: () => fsp.mkdir(there, { recursive: true }).then(_ => {}),\n      rmdir: () => fsp.rmdir(there),\n      /** @param {string[]} segments */\n      join: (...segments) => make(path.join(there, ...segments)),\n      touch: async () => {\n        const handle = await fsp.open(there, 'a');\n        await handle.close();\n      },\n    };\n    return self;\n  };\n  return make(root);\n};\n\n/**\n * @param {TextRd} src\n * @param {FileRW} dest\n *\n * @typedef {ReturnType<typeof makeWebCache>} WebCache\n */\nexport const makeWebCache = (src, dest) => {\n  /** @type {Map<string, Promise<FileRd>>} */\n  const saved = new Map();\n\n  /** @param {string} segment */\n  const getFileP = segment => {\n    const target = src.join(segment);\n    const addr = `${target}`;\n    const cached = saved.get(addr);\n    if (cached) return cached;\n\n    const f = dest.join(segment);\n    /** @type {Promise<FileRd>} */\n    const p = new Promise((resolve, reject) =>\n      target\n        .readText()\n        .then(txt =>\n          dest\n            .mkdir()\n            .then(() => f.writeText(txt).then(_ => resolve(f.readOnly()))),\n        )\n        .catch(reject),\n    );\n    saved.set(addr, p);\n    return p;\n  };\n\n  const remove = async () => {\n    await Promise.all([...saved.values()].map(p => p.then(f => f.unlink())));\n    await dest.rmdir();\n  };\n\n  const self = {\n    toString: () => `${src} -> ${dest}`,\n    /** @param {string} segment */\n    getText: async segment => {\n      const fr = await getFileP(segment);\n      return fr.readText();\n    },\n    /** @param {string} segment */\n    storedPath: segment => getFileP(segment).then(f => f.toString()),\n    /** @param {string} segment */\n    size: async segment => {\n      const fr = await getFileP(segment);\n      const info = await fr.stat();\n      return info.size;\n    },\n    remove,\n  };\n  return self;\n};\n"],"mappings":"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","names":["execFileSync","path","assert","$","assert","$","assert","Fail","fsp","freeze","harden","assert","path","path","agoric","path","agd","assert","fsp","path","process","staticConfig","agd","zipRd","cmap","assert","stat","config","agoric","fetch","join","fsp","path"]}
\ No newline at end of file
